/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/proc/reg00016.H $         */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PROC_REG00016_H_
#define __PROC_REG00016_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace proc
{
#endif


//>> PREP_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG]

//>> GET_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG]

//>> PUT_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG]


//>> SET_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]

//>> SET_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]

//>> GET_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]

//>> PREP_[PB_COM_SCOM_EQ7_STATION_CFG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ7_STATION_CFG3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_CFG3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ7_STATION_CFG3]

//>> GET_[PB_COM_SCOM_EQ7_STATION_CFG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ7_STATION_CFG3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_CFG3;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ7_STATION_CFG3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_CFG3]

//>> PUT_[PB_COM_SCOM_EQ7_STATION_CFG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ7_STATION_CFG3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ7_STATION_CFG3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ7_STATION_CFG3]


//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ7,
           PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ7,
           PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ7,
           PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]

//>> GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]

//>> GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]

//>> GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]

//>> GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]

//>> GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]

//>> GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]

//>> GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]

//>> GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]

//>> GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]

//>> GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]

//>> GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]

//>> GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_CFG3_PB_CFG_SPARE2]

//>> PREP_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ7_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_EVENT_SEL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_EVENT_SEL;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ7_STATION_EVENT_SEL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL]

//>> PUT_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ7_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ7_STATION_EVENT_SEL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL]


//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ7,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> PREP_[PB_COM_SCOM_EQ7_STATION_FIR_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ7_STATION_FIR_REG_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_FIR_REG_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ7_STATION_FIR_REG_RW]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_FIR_REG_RW;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_RW]

//>> PUT_[PB_COM_SCOM_EQ7_STATION_FIR_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ7_STATION_FIR_REG_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ7_STATION_FIR_REG_RW]

//>> PREP_[PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND]

//>> PUT_[PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND]

//>> PREP_[PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR]

//>> PUT_[PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR]


//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_3]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_COHERENCY_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_CRESP_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_SPARE_8]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FORCE_MP_IPL]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_DATA_ROUTE_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_FIR_COMPAB_TRIGGER]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]

//>> GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_FIR_REG_RW, PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ7_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]

//>> PREP_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_GP_CMD_RATE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE]

//>> GET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_GP_CMD_RATE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES1_STATION_GP_CMD_RATE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE]

//>> PUT_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES1_STATION_GP_CMD_RATE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE]


//>> SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_0_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_0_ES1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_0_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_0_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_0_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_0_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_0_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_0_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_0_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_0_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_0_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_0_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_0_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_0_ES1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_0_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_0_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_0_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_0_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_1_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_1_ES1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_1_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_1_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_1_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_1_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_1_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_1_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_1_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_1_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_1_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_1_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_1_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_1_ES1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_1_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_1_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_1_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_1_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_2_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_2_ES1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_2_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_2_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_2_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_2_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_2_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_2_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_2_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_2_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_2_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_2_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_2_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_2_ES1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_2_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_2_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_2_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_2_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_3_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_3_ES1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_3_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_3_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_3_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_3_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_3_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_3_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_3_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_3_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_3_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_3_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_3_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_3_ES1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_3_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_3_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_3_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_3_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_4_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_4_ES1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_4_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_4_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_4_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_4_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_4_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_4_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_4_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_4_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_4_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_4_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_4_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_4_ES1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_4_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_4_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_4_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_4_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_5_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_5_ES1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_5_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_5_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_5_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_5_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_5_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_5_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_5_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_5_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_5_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_5_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_5_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_5_ES1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_5_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_5_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_5_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_5_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_6_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_6_ES1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_6_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_6_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_6_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_6_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_6_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_6_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_6_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_6_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_6_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_6_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_6_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_6_ES1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_6_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_6_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_6_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_6_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_7_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_7_ES1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_7_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_7_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_7_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_7_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_7_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_7_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_7_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_7_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_7_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_7_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_7_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_7_ES1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_7_ES1,
           PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_7_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_7_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_GP_CMD_RATE_7_ES1]

//>> PREP_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR]

//>> PUT_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR]


//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_VALID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_ES1]

//>> PREP_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR]

//>> PUT_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR]


//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2]
static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_VALID_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_ES2]

//>> SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_ES2]

//>> GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_ES2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_ES2]

//>> PREP_[PB_COM_SCOM_ES2_STATION_PM_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES2_STATION_PM_CONTROL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_PM_CONTROL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES2_STATION_PM_CONTROL]

//>> GET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES2_STATION_PM_CONTROL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_PM_CONTROL;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES2_STATION_PM_CONTROL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL]

//>> PUT_[PB_COM_SCOM_ES2_STATION_PM_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES2_STATION_PM_CONTROL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES2_STATION_PM_CONTROL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES2_STATION_PM_CONTROL]


//>> SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE1,
           PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE1]

//>> SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE1,
           PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE1]

//>> GET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE1,
           PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE1]

//>> SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE]

//>> GET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE]

//>> GET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE]
static inline bool GET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX0_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE]

//>> GET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE]

//>> GET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE]
static inline bool GET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX1_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE]

//>> GET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE]

//>> GET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE]
static inline bool GET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX2_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE]

//>> CLEAR_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE]

//>> GET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE]

//>> GET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE]
static inline bool GET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_EX3_HBUS_DISABLE]

//>> SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE2,
           PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE2]

//>> SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE2,
           PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE2]

//>> GET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_PM_CONTROL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE2,
           PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES2_STATION_PM_CONTROL_SPARE2]

//>> PREP_[PB_COM_SCOM_ES3_STATION_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES3_STATION_CFG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_CFG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES3_STATION_CFG1]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES3_STATION_CFG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_CFG1;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES3_STATION_CFG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1]

//>> PUT_[PB_COM_SCOM_ES3_STATION_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES3_STATION_CFG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES3_STATION_CFG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES3_STATION_CFG1]


//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3]
static inline bool GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE1,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE1,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE1,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3]
static inline bool GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3]
static inline bool GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_ES3,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE2,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE2,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE2,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]

//>> SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]

//>> GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]

//>> PREP_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES3_STATION_EVENT_COMPB(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_EVENT_COMPB;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_EVENT_COMPB;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES3_STATION_EVENT_COMPB, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB]

//>> PUT_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES3_STATION_EVENT_COMPB(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES3_STATION_EVENT_COMPB, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB]


//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_MASK_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_MASK_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_MASK_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_MASK_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_MASK_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_MASK_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_MASK_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_MASK_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_MASK_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_MASK_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTYPE_MASK_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_MASK_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_MASK_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_MASK_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_MASK_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_MASK_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_MASK_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_MASK_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_MASK_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_MASK_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_MASK_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TSIZE_MASK_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_ES3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_ES3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_MASK_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_MASK_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_MASK_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_MASK_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_MASK_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_MASK_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_MASK_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_MASK_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_MASK_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_MASK_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_TTAG_MASK_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_MASK_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_MASK_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_MASK_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_MASK_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_MASK_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_MASK_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_MASK_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_MASK_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_MASK_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_MASK_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_MASK_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3]
static inline bool GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_CRESP_POLARITY_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_SCOPE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_SCOPE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_SCOPE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_SCOPE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_SCOPE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_SCOPE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_SCOPE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_SCOPE_ES3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_SCOPE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_SCOPE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_SCOPE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_SCOPE_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_SCOPE_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_EVENT_COMPB_SCOPE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_EVENT_COMPB));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_EVENT_COMPB_SCOPE_ES3,
           PB_COM_SCOM_ES3_STATION_EVENT_COMPB_SCOPE_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_EVENT_COMPB_SCOPE_ES3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_EVENT_COMPB_SCOPE_ES3]

//>> PREP_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4]

//>> PUT_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4]


//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG0_CMD_RATE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG1_CMD_RATE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG2_CMD_RATE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG3_CMD_RATE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG4_CMD_RATE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG5_CMD_RATE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_HANG6_CMD_RATE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3]
static inline bool GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_USE_SLOW_GO_RATE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_TMGR_DEC_MASK_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_TMGR_DEC_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_TMGR_DEC_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_TMGR_DEC_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_TMGR_DEC_MASK_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_TMGR_DEC_MASK_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_TMGR_DEC_MASK_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_TMGR_DEC_MASK_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_TMGR_DEC_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_TMGR_DEC_MASK_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_TMGR_DEC_MASK_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_TMGR_DEC_MASK_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_TMGR_DEC_MASK_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_TMGR_DEC_MASK_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_TMGR_DEC_MASK_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_TMGR_DEC_MASK_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_TMGR_DEC_MASK_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_TMGR_DEC_MASK_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_SPARE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_SPARE]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_SPARE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_SPARE]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_SPARE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_SPARE]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_XLINK_MAX_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG4_PB_CFG_COM_CR_TOK_ALINK_MAX_ES3]

//>> PREP_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT]

//>> PUT_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT]


//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0,
           PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0,
           PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0,
           PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1,
           PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1,
           PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1,
           PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4]

//>> CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4]
static inline bool GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2,
           PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2,
           PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2,
           PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES4]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES4,
           PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES4]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3,
           PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]

//>> SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3,
           PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]

//>> GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3,
           PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES4_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]

//>> PREP_[PB_PTLSCOM10_FM0123_ERR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM10_FM0123_ERR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_FM0123_ERR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM10_FM0123_ERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM10_FM0123_ERR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_FM0123_ERR;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM10_FM0123_ERR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR]

//>> PUT_[PB_PTLSCOM10_FM0123_ERR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM10_FM0123_ERR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM10_FM0123_ERR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM10_FM0123_ERR]


//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_ADDR_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_DAT_HI_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_DAT_LO_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_FRAME_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_INTERNAL_ERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_PRSP_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_TTAG_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_0_RTAG_MISC_PTY]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_ADDR_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_DAT_HI_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_DAT_LO_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_FRAME_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_INTERNAL_ERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_PRSP_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_TTAG_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_1_RTAG_MISC_PTY]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_ADDR_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_DAT_HI_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_DAT_LO_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_FRAME_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_INTERNAL_ERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_PRSP_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_TTAG_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_2_RTAG_MISC_PTY]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_ADDR_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_DAT_HI_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_DAT_LO_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_FRAME_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_INTERNAL_ERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_PRSP_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_TTAG_PERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_PTYERR]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY]

//>> SET_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY]

//>> CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY]

//>> GET_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY]
static inline bool GET_PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_FM0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_FM0123_ERR_3_RTAG_MISC_PTY]

//>> PREP_[PB_PTLSCOM10_MAILBOX_10_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM10_MAILBOX_10_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_MAILBOX_10_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM10_MAILBOX_10_REG]

//>> GET_[PB_PTLSCOM10_MAILBOX_10_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM10_MAILBOX_10_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_MAILBOX_10_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM10_MAILBOX_10_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_10_REG]

//>> PUT_[PB_PTLSCOM10_MAILBOX_10_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM10_MAILBOX_10_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_10_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM10_MAILBOX_10_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM10_MAILBOX_10_REG]


//>> PREP_[PB_PTLSCOM10_MAILBOX_11_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM10_MAILBOX_11_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_MAILBOX_11_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM10_MAILBOX_11_REG]

//>> GET_[PB_PTLSCOM10_MAILBOX_11_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM10_MAILBOX_11_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_MAILBOX_11_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM10_MAILBOX_11_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_11_REG]

//>> PUT_[PB_PTLSCOM10_MAILBOX_11_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM10_MAILBOX_11_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_11_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM10_MAILBOX_11_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM10_MAILBOX_11_REG]


//>> PREP_[PB_PTLSCOM23_PTL_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM23_PTL_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_PTL_FIR_ACTION0_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM23_PTL_FIR_ACTION0_REG]

//>> GET_[PB_PTLSCOM23_PTL_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM23_PTL_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_PTL_FIR_ACTION0_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM23_PTL_FIR_ACTION0_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM23_PTL_FIR_ACTION0_REG]

//>> PUT_[PB_PTLSCOM23_PTL_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM23_PTL_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PTL_FIR_ACTION0_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM23_PTL_FIR_ACTION0_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM23_PTL_FIR_ACTION0_REG]


//>> SET_[PB_PTLSCOM23_PTL_FIR_ACTION0_REG_PB_PTL_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PTL_FIR_ACTION0_REG_PB_PTL_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PTL_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PTL_FIR_ACTION0_REG_PB_PTL_FIR_ACTION0,
           PB_PTLSCOM23_PTL_FIR_ACTION0_REG_PB_PTL_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_PTL_FIR_ACTION0_REG_PB_PTL_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PTL_FIR_ACTION0_REG_PB_PTL_FIR_ACTION0]

//>> SET_[PB_PTLSCOM23_PTL_FIR_ACTION0_REG_PB_PTL_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PTL_FIR_ACTION0_REG_PB_PTL_FIR_ACTION0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PTL_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PTL_FIR_ACTION0_REG_PB_PTL_FIR_ACTION0,
           PB_PTLSCOM23_PTL_FIR_ACTION0_REG_PB_PTL_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_PTL_FIR_ACTION0_REG_PB_PTL_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PTL_FIR_ACTION0_REG_PB_PTL_FIR_ACTION0]

//>> GET_[PB_PTLSCOM23_PTL_FIR_ACTION0_REG_PB_PTL_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_PTL_FIR_ACTION0_REG_PB_PTL_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PTL_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_PTL_FIR_ACTION0_REG_PB_PTL_FIR_ACTION0,
           PB_PTLSCOM23_PTL_FIR_ACTION0_REG_PB_PTL_FIR_ACTION0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_PTL_FIR_ACTION0_REG_PB_PTL_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_PTL_FIR_ACTION0_REG_PB_PTL_FIR_ACTION0]

//>> PREP_[PB_PTLSCOM23_PTL_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM23_PTL_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_PTL_FIR_ACTION1_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM23_PTL_FIR_ACTION1_REG]

//>> GET_[PB_PTLSCOM23_PTL_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM23_PTL_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_PTL_FIR_ACTION1_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM23_PTL_FIR_ACTION1_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM23_PTL_FIR_ACTION1_REG]

//>> PUT_[PB_PTLSCOM23_PTL_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM23_PTL_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PTL_FIR_ACTION1_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM23_PTL_FIR_ACTION1_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM23_PTL_FIR_ACTION1_REG]


//>> SET_[PB_PTLSCOM23_PTL_FIR_ACTION1_REG_PB_PTL_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PTL_FIR_ACTION1_REG_PB_PTL_FIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PTL_FIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PTL_FIR_ACTION1_REG_PB_PTL_FIR_ACTION1,
           PB_PTLSCOM23_PTL_FIR_ACTION1_REG_PB_PTL_FIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_PTL_FIR_ACTION1_REG_PB_PTL_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PTL_FIR_ACTION1_REG_PB_PTL_FIR_ACTION1]

//>> SET_[PB_PTLSCOM23_PTL_FIR_ACTION1_REG_PB_PTL_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PTL_FIR_ACTION1_REG_PB_PTL_FIR_ACTION1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PTL_FIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PTL_FIR_ACTION1_REG_PB_PTL_FIR_ACTION1,
           PB_PTLSCOM23_PTL_FIR_ACTION1_REG_PB_PTL_FIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_PTL_FIR_ACTION1_REG_PB_PTL_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PTL_FIR_ACTION1_REG_PB_PTL_FIR_ACTION1]

//>> GET_[PB_PTLSCOM23_PTL_FIR_ACTION1_REG_PB_PTL_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_PTL_FIR_ACTION1_REG_PB_PTL_FIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PTL_FIR_ACTION1_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_PTL_FIR_ACTION1_REG_PB_PTL_FIR_ACTION1,
           PB_PTLSCOM23_PTL_FIR_ACTION1_REG_PB_PTL_FIR_ACTION1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_PTL_FIR_ACTION1_REG_PB_PTL_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_PTL_FIR_ACTION1_REG_PB_PTL_FIR_ACTION1]

//>> PREP_[PB_PTLSCOM23_TL_LINK_SYN_23_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM23_TL_LINK_SYN_23_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_TL_LINK_SYN_23_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM23_TL_LINK_SYN_23_REG]

//>> GET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM23_TL_LINK_SYN_23_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_TL_LINK_SYN_23_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM23_TL_LINK_SYN_23_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG]

//>> PUT_[PB_PTLSCOM23_TL_LINK_SYN_23_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM23_TL_LINK_SYN_23_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM23_TL_LINK_SYN_23_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM23_TL_LINK_SYN_23_REG]


//>> SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN0,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN0]

//>> SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN0,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN0]

//>> GET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN0,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN0]

//>> SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN1,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN1]

//>> SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN1,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN1]

//>> GET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN1,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN1]

//>> SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN2,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN2]

//>> SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN2,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN2]

//>> GET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN2,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN2]

//>> SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN3,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN3]

//>> SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN3,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN3]

//>> GET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN3,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_2_SCOM_SYN3]

//>> SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN0,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN0]

//>> SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN0,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN0]

//>> GET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN0,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN0]

//>> SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN1,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN1]

//>> SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN1,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN1]

//>> GET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN1,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN1]

//>> SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN2,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN2]

//>> SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN2,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN2]

//>> GET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN2,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN2]

//>> SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN3,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN3]

//>> SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN3,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN3]

//>> GET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_SYN_23_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN3,
           PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_TL_LINK_SYN_23_REG_3_SCOM_SYN3]

//>> PREP_[PB_PTLSCOM45_MAILBOX_00_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM45_MAILBOX_00_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_MAILBOX_00_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM45_MAILBOX_00_REG]

//>> GET_[PB_PTLSCOM45_MAILBOX_00_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM45_MAILBOX_00_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_MAILBOX_00_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM45_MAILBOX_00_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM45_MAILBOX_00_REG]

//>> PUT_[PB_PTLSCOM45_MAILBOX_00_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM45_MAILBOX_00_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_MAILBOX_00_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM45_MAILBOX_00_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM45_MAILBOX_00_REG]


//>> PREP_[PB_PTLSCOM45_MAILBOX_01_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM45_MAILBOX_01_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_MAILBOX_01_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM45_MAILBOX_01_REG]

//>> GET_[PB_PTLSCOM45_MAILBOX_01_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM45_MAILBOX_01_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_MAILBOX_01_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM45_MAILBOX_01_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM45_MAILBOX_01_REG]

//>> PUT_[PB_PTLSCOM45_MAILBOX_01_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM45_MAILBOX_01_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_MAILBOX_01_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM45_MAILBOX_01_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM45_MAILBOX_01_REG]


//>> PREP_[PB_PTLSCOM45_PMU0_TLPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM45_PMU0_TLPM_COUNTER(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_PMU0_TLPM_COUNTER;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM45_PMU0_TLPM_COUNTER]

//>> GET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM45_PMU0_TLPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_PMU0_TLPM_COUNTER;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM45_PMU0_TLPM_COUNTER, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER]

//>> PUT_[PB_PTLSCOM45_PMU0_TLPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM45_PMU0_TLPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU0_TLPM_COUNTER));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM45_PMU0_TLPM_COUNTER, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM45_PMU0_TLPM_COUNTER]


//>> SET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PMU0_TLPM_COUNTER_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU0_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PMU0_TLPM_COUNTER_0,
           PB_PTLSCOM45_PMU0_TLPM_COUNTER_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PMU0_TLPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_0]

//>> SET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PMU0_TLPM_COUNTER_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU0_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PMU0_TLPM_COUNTER_0,
           PB_PTLSCOM45_PMU0_TLPM_COUNTER_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PMU0_TLPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_0]

//>> GET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PMU0_TLPM_COUNTER_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU0_TLPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PMU0_TLPM_COUNTER_0,
           PB_PTLSCOM45_PMU0_TLPM_COUNTER_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PMU0_TLPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_0]

//>> SET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PMU0_TLPM_COUNTER_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU0_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PMU0_TLPM_COUNTER_1,
           PB_PTLSCOM45_PMU0_TLPM_COUNTER_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PMU0_TLPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_1]

//>> SET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PMU0_TLPM_COUNTER_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU0_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PMU0_TLPM_COUNTER_1,
           PB_PTLSCOM45_PMU0_TLPM_COUNTER_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PMU0_TLPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_1]

//>> GET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PMU0_TLPM_COUNTER_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU0_TLPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PMU0_TLPM_COUNTER_1,
           PB_PTLSCOM45_PMU0_TLPM_COUNTER_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PMU0_TLPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_1]

//>> SET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PMU0_TLPM_COUNTER_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU0_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PMU0_TLPM_COUNTER_2,
           PB_PTLSCOM45_PMU0_TLPM_COUNTER_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PMU0_TLPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_2]

//>> SET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PMU0_TLPM_COUNTER_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU0_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PMU0_TLPM_COUNTER_2,
           PB_PTLSCOM45_PMU0_TLPM_COUNTER_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PMU0_TLPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_2]

//>> GET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PMU0_TLPM_COUNTER_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU0_TLPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PMU0_TLPM_COUNTER_2,
           PB_PTLSCOM45_PMU0_TLPM_COUNTER_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PMU0_TLPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_2]

//>> SET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PMU0_TLPM_COUNTER_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU0_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PMU0_TLPM_COUNTER_3,
           PB_PTLSCOM45_PMU0_TLPM_COUNTER_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PMU0_TLPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_3]

//>> SET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PMU0_TLPM_COUNTER_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU0_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PMU0_TLPM_COUNTER_3,
           PB_PTLSCOM45_PMU0_TLPM_COUNTER_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PMU0_TLPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_3]

//>> GET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PMU0_TLPM_COUNTER_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PMU0_TLPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PMU0_TLPM_COUNTER_3,
           PB_PTLSCOM45_PMU0_TLPM_COUNTER_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PMU0_TLPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PMU0_TLPM_COUNTER_3]

//>> PREP_[PB_PTLSCOM45_PTL_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM45_PTL_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_PTL_FIR_MASK_REG_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM45_PTL_FIR_MASK_REG_RW]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_PTL_FIR_MASK_REG_RW;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_RW]

//>> PUT_[PB_PTLSCOM45_PTL_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM45_PTL_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM45_PTL_FIR_MASK_REG_RW]

//>> PREP_[PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND]

//>> PUT_[PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND]

//>> PREP_[PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR]

//>> PUT_[PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR]


//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_UE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_CE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_SUE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB01_ERR_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_UE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_CE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_SUE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DOB23_ERR_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB01_ERR_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_DIB23_ERR_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]

//>> SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]

//>> CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]

//>> GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]
static inline bool GET_PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_PTL_FIR_MASK_REG_RW, PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM45_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]

//>> PREP_[PB_PTLSCOM45_TRACE_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM45_TRACE_CFG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_TRACE_CFG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM45_TRACE_CFG]

//>> GET_[PB_PTLSCOM45_TRACE_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM45_TRACE_CFG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_TRACE_CFG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM45_TRACE_CFG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM45_TRACE_CFG]

//>> PUT_[PB_PTLSCOM45_TRACE_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM45_TRACE_CFG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TRACE_CFG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM45_TRACE_CFG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM45_TRACE_CFG]


//>> SET_[PB_PTLSCOM45_TRACE_CFG_0L_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TRACE_CFG_0L_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TRACE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TRACE_CFG_0L_SEL,
           PB_PTLSCOM45_TRACE_CFG_0L_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_TRACE_CFG_0L_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TRACE_CFG_0L_SEL]

//>> SET_[PB_PTLSCOM45_TRACE_CFG_0L_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TRACE_CFG_0L_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TRACE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TRACE_CFG_0L_SEL,
           PB_PTLSCOM45_TRACE_CFG_0L_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_TRACE_CFG_0L_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TRACE_CFG_0L_SEL]

//>> GET_[PB_PTLSCOM45_TRACE_CFG_0L_SEL]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_TRACE_CFG_0L_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TRACE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_TRACE_CFG_0L_SEL,
           PB_PTLSCOM45_TRACE_CFG_0L_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_TRACE_CFG_0L_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_TRACE_CFG_0L_SEL]

//>> SET_[PB_PTLSCOM45_TRACE_CFG_0R_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TRACE_CFG_0R_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TRACE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TRACE_CFG_0R_SEL,
           PB_PTLSCOM45_TRACE_CFG_0R_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_TRACE_CFG_0R_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TRACE_CFG_0R_SEL]

//>> SET_[PB_PTLSCOM45_TRACE_CFG_0R_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TRACE_CFG_0R_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TRACE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TRACE_CFG_0R_SEL,
           PB_PTLSCOM45_TRACE_CFG_0R_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_TRACE_CFG_0R_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TRACE_CFG_0R_SEL]

//>> GET_[PB_PTLSCOM45_TRACE_CFG_0R_SEL]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_TRACE_CFG_0R_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TRACE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_TRACE_CFG_0R_SEL,
           PB_PTLSCOM45_TRACE_CFG_0R_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_TRACE_CFG_0R_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_TRACE_CFG_0R_SEL]

//>> SET_[PB_PTLSCOM45_TRACE_CFG_1L_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TRACE_CFG_1L_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TRACE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TRACE_CFG_1L_SEL,
           PB_PTLSCOM45_TRACE_CFG_1L_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_TRACE_CFG_1L_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TRACE_CFG_1L_SEL]

//>> SET_[PB_PTLSCOM45_TRACE_CFG_1L_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TRACE_CFG_1L_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TRACE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TRACE_CFG_1L_SEL,
           PB_PTLSCOM45_TRACE_CFG_1L_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_TRACE_CFG_1L_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TRACE_CFG_1L_SEL]

//>> GET_[PB_PTLSCOM45_TRACE_CFG_1L_SEL]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_TRACE_CFG_1L_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TRACE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_TRACE_CFG_1L_SEL,
           PB_PTLSCOM45_TRACE_CFG_1L_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_TRACE_CFG_1L_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_TRACE_CFG_1L_SEL]

//>> SET_[PB_PTLSCOM45_TRACE_CFG_1R_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TRACE_CFG_1R_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TRACE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TRACE_CFG_1R_SEL,
           PB_PTLSCOM45_TRACE_CFG_1R_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_TRACE_CFG_1R_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TRACE_CFG_1R_SEL]

//>> SET_[PB_PTLSCOM45_TRACE_CFG_1R_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TRACE_CFG_1R_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TRACE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TRACE_CFG_1R_SEL,
           PB_PTLSCOM45_TRACE_CFG_1R_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_TRACE_CFG_1R_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TRACE_CFG_1R_SEL]

//>> GET_[PB_PTLSCOM45_TRACE_CFG_1R_SEL]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_TRACE_CFG_1R_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TRACE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_TRACE_CFG_1R_SEL,
           PB_PTLSCOM45_TRACE_CFG_1R_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_TRACE_CFG_1R_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_TRACE_CFG_1R_SEL]

//>> PREP_[PB_PTLSCOM45_RCMD_RATE_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM45_RCMD_RATE_CFG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_RCMD_RATE_CFG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM45_RCMD_RATE_CFG]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM45_RCMD_RATE_CFG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_RCMD_RATE_CFG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM45_RCMD_RATE_CFG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG]

//>> PUT_[PB_PTLSCOM45_RCMD_RATE_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM45_RCMD_RATE_CFG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM45_RCMD_RATE_CFG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM45_RCMD_RATE_CFG]


//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE,
           PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE,
           PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE,
           PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE,
           PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE,
           PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE,
           PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE_ADDER]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE_ADDER(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE_ADDER,
           PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE_ADDER_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE_ADDER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE_ADDER]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE_ADDER]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE_ADDER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE_ADDER,
           PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE_ADDER_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE_ADDER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE_ADDER]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE_ADDER]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE_ADDER(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE_ADDER,
           PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE_ADDER_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE_ADDER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_RCMD_RATE_ADDER]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE_ADDER]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE_ADDER(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE_ADDER,
           PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE_ADDER_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE_ADDER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE_ADDER]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE_ADDER]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE_ADDER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE_ADDER,
           PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE_ADDER_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE_ADDER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE_ADDER]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE_ADDER]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE_ADDER(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE_ADDER,
           PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE_ADDER_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE_ADDER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_RCMD_RATE_ADDER]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO]

//>> CLEAR_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO]
static inline bool GET_PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_TURBO]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE]

//>> CLEAR_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE]
static inline bool GET_PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_REFERENCE]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE]

//>> CLEAR_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE]
static inline bool GET_PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_MODE]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE]

//>> CLEAR_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE]
static inline bool GET_PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_TABLE]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK]

//>> CLEAR_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK]
static inline bool GET_PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_DISABLE_CREDIT_BANK]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_CFG]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_CFG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_CFG,
           PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_CFG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_CFG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_CFG]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_CFG]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_CFG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_CFG,
           PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_CFG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_CFG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_CFG]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_CFG]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_CFG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_CFG,
           PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_CFG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_CFG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_X_CMD_GAP_CFG]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO]

//>> CLEAR_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO]
static inline bool GET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_TURBO]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE]

//>> CLEAR_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE]
static inline bool GET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_REFERENCE]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE]

//>> CLEAR_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE]
static inline bool GET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_MODE]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE]

//>> CLEAR_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE]
static inline bool GET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_TABLE]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.setBit<PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK]

//>> CLEAR_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.clearBit<PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK]
static inline bool GET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.getBit<PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_DISABLE_CREDIT_BANK]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_CFG]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_CFG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_CFG,
           PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_CFG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_CFG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_CFG]

//>> SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_CFG]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_CFG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_CFG,
           PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_CFG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_CFG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_CFG]

//>> GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_CFG]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_CFG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_RCMD_RATE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_CFG,
           PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_CFG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_CFG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_RCMD_RATE_CFG_Y_CMD_GAP_CFG]

//>> PREP_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG]

//>> PUT_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG]


//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]

//>> PREP_[PB_PTLSCOM67_MAILBOX_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM67_MAILBOX_DATA_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM67_MAILBOX_DATA_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM67_MAILBOX_DATA_REG]

//>> GET_[PB_PTLSCOM67_MAILBOX_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM67_MAILBOX_DATA_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM67_MAILBOX_DATA_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM67_MAILBOX_DATA_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM67_MAILBOX_DATA_REG]

//>> PUT_[PB_PTLSCOM67_MAILBOX_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM67_MAILBOX_DATA_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_DATA_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM67_MAILBOX_DATA_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM67_MAILBOX_DATA_REG]


//>> PREP_[PB_PTLSCOM67_PMU3_CNPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM67_PMU3_CNPM_COUNTER(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM67_PMU3_CNPM_COUNTER;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM67_PMU3_CNPM_COUNTER]

//>> GET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM67_PMU3_CNPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM67_PMU3_CNPM_COUNTER;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM67_PMU3_CNPM_COUNTER, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER]

//>> PUT_[PB_PTLSCOM67_PMU3_CNPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM67_PMU3_CNPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU3_CNPM_COUNTER));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM67_PMU3_CNPM_COUNTER, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM67_PMU3_CNPM_COUNTER]


//>> SET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PMU3_CNPM_COUNTER_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PMU3_CNPM_COUNTER_0,
           PB_PTLSCOM67_PMU3_CNPM_COUNTER_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PMU3_CNPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_0]

//>> SET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PMU3_CNPM_COUNTER_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PMU3_CNPM_COUNTER_0,
           PB_PTLSCOM67_PMU3_CNPM_COUNTER_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PMU3_CNPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_0]

//>> GET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PMU3_CNPM_COUNTER_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU3_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PMU3_CNPM_COUNTER_0,
           PB_PTLSCOM67_PMU3_CNPM_COUNTER_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PMU3_CNPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_0]

//>> SET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PMU3_CNPM_COUNTER_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PMU3_CNPM_COUNTER_1,
           PB_PTLSCOM67_PMU3_CNPM_COUNTER_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PMU3_CNPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_1]

//>> SET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PMU3_CNPM_COUNTER_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PMU3_CNPM_COUNTER_1,
           PB_PTLSCOM67_PMU3_CNPM_COUNTER_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PMU3_CNPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_1]

//>> GET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PMU3_CNPM_COUNTER_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU3_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PMU3_CNPM_COUNTER_1,
           PB_PTLSCOM67_PMU3_CNPM_COUNTER_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PMU3_CNPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_1]

//>> SET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PMU3_CNPM_COUNTER_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PMU3_CNPM_COUNTER_2,
           PB_PTLSCOM67_PMU3_CNPM_COUNTER_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PMU3_CNPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_2]

//>> SET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PMU3_CNPM_COUNTER_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PMU3_CNPM_COUNTER_2,
           PB_PTLSCOM67_PMU3_CNPM_COUNTER_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PMU3_CNPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_2]

//>> GET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PMU3_CNPM_COUNTER_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU3_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PMU3_CNPM_COUNTER_2,
           PB_PTLSCOM67_PMU3_CNPM_COUNTER_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PMU3_CNPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_2]

//>> SET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PMU3_CNPM_COUNTER_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PMU3_CNPM_COUNTER_3,
           PB_PTLSCOM67_PMU3_CNPM_COUNTER_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PMU3_CNPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_3]

//>> SET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PMU3_CNPM_COUNTER_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU3_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PMU3_CNPM_COUNTER_3,
           PB_PTLSCOM67_PMU3_CNPM_COUNTER_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PMU3_CNPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_3]

//>> GET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PMU3_CNPM_COUNTER_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PMU3_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PMU3_CNPM_COUNTER_3,
           PB_PTLSCOM67_PMU3_CNPM_COUNTER_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PMU3_CNPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PMU3_CNPM_COUNTER_3]

//>> PREP_[PB_PTLSCOM67_PR0123_ERR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM67_PR0123_ERR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM67_PR0123_ERR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM67_PR0123_ERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM67_PR0123_ERR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM67_PR0123_ERR;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM67_PR0123_ERR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR]

//>> PUT_[PB_PTLSCOM67_PR0123_ERR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM67_PR0123_ERR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM67_PR0123_ERR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM67_PR0123_ERR]


//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_ADDRESS_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_ATAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_DATA_PTY_ERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_MISC_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_RTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_TTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_0_LINK_DOWN]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_ADDRESS_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_ATAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_DATA_PTY_ERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_MISC_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_RTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_TTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_1_LINK_DOWN]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_ADDRESS_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_ATAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_DATA_PTY_ERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_MISC_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_RTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_TTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_2_LINK_DOWN]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_ADDRESS_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_ATAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_CC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_CC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_CC2_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_CC3_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_CONTROL_ERROR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_DATA_PTY_ERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_MISC_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_RTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_TTAG_PTY]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_VC0_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_VC1_CREDITERR]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN]

//>> SET_[PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.setBit<PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN]

//>> CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN]

//>> GET_[PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN]
static inline bool GET_PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PR0123_ERR));
#endif
    return i_data.getBit<PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PR0123_ERR_3_LINK_DOWN]

//>> PREP_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG]

//>> GET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG]

//>> PUT_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG]


//>> SET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET,
           PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET]

//>> SET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET,
           PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET]

//>> GET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET,
           PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET]

//>> SET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET,
           PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET]

//>> SET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET,
           PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET]

//>> GET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET,
           PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET]

//>> SET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT,
           PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT]

//>> SET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT,
           PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT]

//>> GET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT,
           PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT]

//>> SET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT,
           PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT]

//>> SET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT,
           PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT]

//>> GET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT,
           PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT]

//>> PREP_[PB_BRIDGE_HCA_FIR_WOF]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_BRIDGE_HCA_FIR_WOF(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_HCA_FIR_WOF;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_BRIDGE_HCA_FIR_WOF]

//>> GET_[PB_BRIDGE_HCA_FIR_WOF]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_BRIDGE_HCA_FIR_WOF(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_HCA_FIR_WOF;
#endif
    return fapi2::getScom(i_target, PB_BRIDGE_HCA_FIR_WOF, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_WOF]

//>> PUT_[PB_BRIDGE_HCA_FIR_WOF]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_BRIDGE_HCA_FIR_WOF(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_WOF));
#endif
    return fapi2::putScom(i_target, PB_BRIDGE_HCA_FIR_WOF, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_BRIDGE_HCA_FIR_WOF]


//>> SET_[PB_BRIDGE_HCA_FIR_WOF_FIR_WOF_BITS]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_WOF_FIR_WOF_BITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_WOF));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_WOF_FIR_WOF_BITS,
           PB_BRIDGE_HCA_FIR_WOF_FIR_WOF_BITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_WOF_FIR_WOF_BITS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_WOF_FIR_WOF_BITS]

//>> SET_[PB_BRIDGE_HCA_FIR_WOF_FIR_WOF_BITS]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_WOF_FIR_WOF_BITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_WOF));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_WOF_FIR_WOF_BITS,
           PB_BRIDGE_HCA_FIR_WOF_FIR_WOF_BITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_WOF_FIR_WOF_BITS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_WOF_FIR_WOF_BITS]

//>> GET_[PB_BRIDGE_HCA_FIR_WOF_FIR_WOF_BITS]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_WOF_FIR_WOF_BITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_WOF));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_WOF_FIR_WOF_BITS,
           PB_BRIDGE_HCA_FIR_WOF_FIR_WOF_BITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_WOF_FIR_WOF_BITS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_WOF_FIR_WOF_BITS]

//>> PREP_[PB_BRIDGE_HCA_CHSW_CTRL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_BRIDGE_HCA_CHSW_CTRL_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_HCA_CHSW_CTRL_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_BRIDGE_HCA_CHSW_CTRL_REG]

//>> GET_[PB_BRIDGE_HCA_CHSW_CTRL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_BRIDGE_HCA_CHSW_CTRL_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_HCA_CHSW_CTRL_REG;
#endif
    return fapi2::getScom(i_target, PB_BRIDGE_HCA_CHSW_CTRL_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_BRIDGE_HCA_CHSW_CTRL_REG]

//>> PUT_[PB_BRIDGE_HCA_CHSW_CTRL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_BRIDGE_HCA_CHSW_CTRL_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_CHSW_CTRL_REG));
#endif
    return fapi2::putScom(i_target, PB_BRIDGE_HCA_CHSW_CTRL_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_BRIDGE_HCA_CHSW_CTRL_REG]


//>> SET_[PB_BRIDGE_HCA_CHSW_CTRL_REG_TTYPE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_CHSW_CTRL_REG_TTYPE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_CHSW_CTRL_REG));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_CHSW_CTRL_REG_TTYPE_MASK,
           PB_BRIDGE_HCA_CHSW_CTRL_REG_TTYPE_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_CHSW_CTRL_REG_TTYPE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_CHSW_CTRL_REG_TTYPE_MASK]

//>> SET_[PB_BRIDGE_HCA_CHSW_CTRL_REG_TTYPE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_CHSW_CTRL_REG_TTYPE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_CHSW_CTRL_REG));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_CHSW_CTRL_REG_TTYPE_MASK,
           PB_BRIDGE_HCA_CHSW_CTRL_REG_TTYPE_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_CHSW_CTRL_REG_TTYPE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_CHSW_CTRL_REG_TTYPE_MASK]

//>> GET_[PB_BRIDGE_HCA_CHSW_CTRL_REG_TTYPE_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_CHSW_CTRL_REG_TTYPE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_CHSW_CTRL_REG));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_CHSW_CTRL_REG_TTYPE_MASK,
           PB_BRIDGE_HCA_CHSW_CTRL_REG_TTYPE_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_CHSW_CTRL_REG_TTYPE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_CHSW_CTRL_REG_TTYPE_MASK]

//>> SET_[PB_BRIDGE_HCA_CHSW_CTRL_REG_PBIFSM_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_CHSW_CTRL_REG_PBIFSM_LIMIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_CHSW_CTRL_REG));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_CHSW_CTRL_REG_PBIFSM_LIMIT,
           PB_BRIDGE_HCA_CHSW_CTRL_REG_PBIFSM_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_CHSW_CTRL_REG_PBIFSM_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_CHSW_CTRL_REG_PBIFSM_LIMIT]

//>> SET_[PB_BRIDGE_HCA_CHSW_CTRL_REG_PBIFSM_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_CHSW_CTRL_REG_PBIFSM_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_CHSW_CTRL_REG));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_CHSW_CTRL_REG_PBIFSM_LIMIT,
           PB_BRIDGE_HCA_CHSW_CTRL_REG_PBIFSM_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_CHSW_CTRL_REG_PBIFSM_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_CHSW_CTRL_REG_PBIFSM_LIMIT]

//>> GET_[PB_BRIDGE_HCA_CHSW_CTRL_REG_PBIFSM_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_CHSW_CTRL_REG_PBIFSM_LIMIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_CHSW_CTRL_REG));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_CHSW_CTRL_REG_PBIFSM_LIMIT,
           PB_BRIDGE_HCA_CHSW_CTRL_REG_PBIFSM_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_CHSW_CTRL_REG_PBIFSM_LIMIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_CHSW_CTRL_REG_PBIFSM_LIMIT]

//>> PREP_[PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG]

//>> GET_[PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG;
#endif
    return fapi2::getScom(i_target, PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG]

//>> PUT_[PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG));
#endif
    return fapi2::putScom(i_target, PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG]


//>> SET_[PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG_DECAY_0_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG_DECAY_0_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG_DECAY_0_ADDRESS,
           PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG_DECAY_0_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG_DECAY_0_ADDRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG_DECAY_0_ADDRESS]

//>> SET_[PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG_DECAY_0_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG_DECAY_0_ADDRESS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG_DECAY_0_ADDRESS,
           PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG_DECAY_0_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG_DECAY_0_ADDRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG_DECAY_0_ADDRESS]

//>> GET_[PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG_DECAY_0_ADDRESS]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG_DECAY_0_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG_DECAY_0_ADDRESS,
           PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG_DECAY_0_ADDRESS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG_DECAY_0_ADDRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_DECAY_0_ADDRESS_REG_DECAY_0_ADDRESS]

//>> PREP_[PB_BRIDGE_NHTM_SC_HTM1_LAST]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_BRIDGE_NHTM_SC_HTM1_LAST(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_NHTM_SC_HTM1_LAST;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_BRIDGE_NHTM_SC_HTM1_LAST]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM1_LAST]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_BRIDGE_NHTM_SC_HTM1_LAST(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_NHTM_SC_HTM1_LAST;
#endif
    return fapi2::getScom(i_target, PB_BRIDGE_NHTM_SC_HTM1_LAST, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM1_LAST]

//>> PUT_[PB_BRIDGE_NHTM_SC_HTM1_LAST]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_BRIDGE_NHTM_SC_HTM1_LAST(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM1_LAST));
#endif
    return fapi2::putScom(i_target, PB_BRIDGE_NHTM_SC_HTM1_LAST, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_BRIDGE_NHTM_SC_HTM1_LAST]


//>> SET_[PB_BRIDGE_NHTM_SC_HTM1_LAST_HTM1_LAST_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM1_LAST_HTM1_LAST_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM1_LAST));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM1_LAST_HTM1_LAST_ADDRESS,
           PB_BRIDGE_NHTM_SC_HTM1_LAST_HTM1_LAST_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM1_LAST_HTM1_LAST_ADDRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM1_LAST_HTM1_LAST_ADDRESS]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM1_LAST_HTM1_LAST_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM1_LAST_HTM1_LAST_ADDRESS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM1_LAST));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM1_LAST_HTM1_LAST_ADDRESS,
           PB_BRIDGE_NHTM_SC_HTM1_LAST_HTM1_LAST_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM1_LAST_HTM1_LAST_ADDRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM1_LAST_HTM1_LAST_ADDRESS]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM1_LAST_HTM1_LAST_ADDRESS]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM1_LAST_HTM1_LAST_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM1_LAST));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM1_LAST_HTM1_LAST_ADDRESS,
           PB_BRIDGE_NHTM_SC_HTM1_LAST_HTM1_LAST_ADDRESS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM1_LAST_HTM1_LAST_ADDRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM1_LAST_HTM1_LAST_ADDRESS]

//>> PREP_[PB_BRIDGE_NHTM_SC_HTM_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_BRIDGE_NHTM_SC_HTM_CFG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_NHTM_SC_HTM_CFG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_BRIDGE_NHTM_SC_HTM_CFG]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_BRIDGE_NHTM_SC_HTM_CFG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_NHTM_SC_HTM_CFG;
#endif
    return fapi2::getScom(i_target, PB_BRIDGE_NHTM_SC_HTM_CFG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CFG]

//>> PUT_[PB_BRIDGE_NHTM_SC_HTM_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_BRIDGE_NHTM_SC_HTM_CFG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return fapi2::putScom(i_target, PB_BRIDGE_NHTM_SC_HTM_CFG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_BRIDGE_NHTM_SC_HTM_CFG]


//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_OPER_HANG_DIV_RATIO]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_OPER_HANG_DIV_RATIO(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_OPER_HANG_DIV_RATIO,
           PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_OPER_HANG_DIV_RATIO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_OPER_HANG_DIV_RATIO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_OPER_HANG_DIV_RATIO]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_OPER_HANG_DIV_RATIO]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_OPER_HANG_DIV_RATIO(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_OPER_HANG_DIV_RATIO,
           PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_OPER_HANG_DIV_RATIO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_OPER_HANG_DIV_RATIO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_OPER_HANG_DIV_RATIO]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_OPER_HANG_DIV_RATIO]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_OPER_HANG_DIV_RATIO(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_OPER_HANG_DIV_RATIO,
           PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_OPER_HANG_DIV_RATIO_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_OPER_HANG_DIV_RATIO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_OPER_HANG_DIV_RATIO]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_RTY_DRP_COUNT]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_RTY_DRP_COUNT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_RTY_DRP_COUNT,
           PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_RTY_DRP_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_RTY_DRP_COUNT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_RTY_DRP_COUNT]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_RTY_DRP_COUNT]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_RTY_DRP_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_RTY_DRP_COUNT,
           PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_RTY_DRP_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_RTY_DRP_COUNT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_RTY_DRP_COUNT]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_RTY_DRP_COUNT]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_RTY_DRP_COUNT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_RTY_DRP_COUNT,
           PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_RTY_DRP_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_RTY_DRP_COUNT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_RTY_DRP_COUNT]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return o_data.setBit<PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR]

//>> CLEAR_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return o_data.clearBit<PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR]
static inline bool GET_PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return i_data.getBit<PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_DRP_PRIORITY_INCR]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return o_data.setBit<PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE]

//>> CLEAR_[PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return o_data.clearBit<PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE]
static inline bool GET_PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return i_data.getBit<PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CFG_SPARE]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return o_data.setBit<PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG]

//>> CLEAR_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return o_data.clearBit<PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG]
static inline bool GET_PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CFG));
#endif
    return i_data.getBit<PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CFG_HTMSC_CFG_DIS_OPER_HANG]

//>> PREP_[PB_BRIDGE_NHTM_SC_HTM_FLEX]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_BRIDGE_NHTM_SC_HTM_FLEX(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_NHTM_SC_HTM_FLEX;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_BRIDGE_NHTM_SC_HTM_FLEX]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FLEX]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_BRIDGE_NHTM_SC_HTM_FLEX(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_NHTM_SC_HTM_FLEX;
#endif
    return fapi2::getScom(i_target, PB_BRIDGE_NHTM_SC_HTM_FLEX, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FLEX]

//>> PUT_[PB_BRIDGE_NHTM_SC_HTM_FLEX]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_BRIDGE_NHTM_SC_HTM_FLEX(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return fapi2::putScom(i_target, PB_BRIDGE_NHTM_SC_HTM_FLEX, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_BRIDGE_NHTM_SC_HTM_FLEX]


//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL0,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL0]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL0,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL0]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL0]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL0,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL0]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL1,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL1]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL1,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL1]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL1]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL1,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL1]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL2,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL2]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL2,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL2]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL2,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL2]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL3,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL3]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL3,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL3]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL3]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL3,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL3]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL4,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL4]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL4,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL4]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL4]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL4,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL4]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL5,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL5]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL5,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL5]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL5]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL5,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_RGRPSEL5]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL0,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL0]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL0,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL0]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL0]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL0,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL0]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL1,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL1]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL1,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL1]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL1]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL1,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL1]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL2,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL2]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL2,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL2]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL2,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL2]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL3,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL3]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL3,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL3]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL3]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_FLEX));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL3,
           PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_FLEX_CGRPSEL3]

//>> PREP_[PB_BRIDGE_NHTM_SC_HTM_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_BRIDGE_NHTM_SC_HTM_MODE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_NHTM_SC_HTM_MODE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_BRIDGE_NHTM_SC_HTM_MODE]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_BRIDGE_NHTM_SC_HTM_MODE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_NHTM_SC_HTM_MODE;
#endif
    return fapi2::getScom(i_target, PB_BRIDGE_NHTM_SC_HTM_MODE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE]

//>> PUT_[PB_BRIDGE_NHTM_SC_HTM_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_BRIDGE_NHTM_SC_HTM_MODE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return fapi2::putScom(i_target, PB_BRIDGE_NHTM_SC_HTM_MODE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_BRIDGE_NHTM_SC_HTM_MODE]


//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.setBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE]

//>> CLEAR_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.clearBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE]
static inline bool GET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.getBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_HTM_ENABLE]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CONTENT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CONTENT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CONTENT_SEL,
           PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CONTENT_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CONTENT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CONTENT_SEL]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CONTENT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CONTENT_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CONTENT_SEL,
           PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CONTENT_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CONTENT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CONTENT_SEL]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CONTENT_SEL]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CONTENT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CONTENT_SEL,
           PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CONTENT_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CONTENT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CONTENT_SEL]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.setBit<PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW]

//>> CLEAR_[PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.clearBit<PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW]
static inline bool GET_PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.getBit<PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_W511975_CHICKENSW]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CAPTURE]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CAPTURE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CAPTURE,
           PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CAPTURE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CAPTURE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CAPTURE]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CAPTURE]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CAPTURE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CAPTURE,
           PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CAPTURE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CAPTURE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CAPTURE]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CAPTURE]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CAPTURE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CAPTURE,
           PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CAPTURE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CAPTURE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_CAPTURE]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.setBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP]

//>> CLEAR_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.clearBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP]
static inline bool GET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.getBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRAP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.setBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP]

//>> CLEAR_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.clearBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP]
static inline bool GET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.getBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_TSTAMP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.setBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP]

//>> CLEAR_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.clearBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP]
static inline bool GET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.getBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SINGLE_TSTAMP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.setBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16]

//>> CLEAR_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.clearBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16]
static inline bool GET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.getBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE16]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.setBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY]

//>> CLEAR_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.clearBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY]
static inline bool GET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.getBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_MARKERS_ONLY]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.setBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE]

//>> CLEAR_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.clearBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE]
static inline bool GET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.getBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_DIS_FORCE_GROUP_SCOPE]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SYNC_STAMP_FORCE]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SYNC_STAMP_FORCE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SYNC_STAMP_FORCE,
           PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SYNC_STAMP_FORCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SYNC_STAMP_FORCE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SYNC_STAMP_FORCE]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SYNC_STAMP_FORCE]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SYNC_STAMP_FORCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SYNC_STAMP_FORCE,
           PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SYNC_STAMP_FORCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SYNC_STAMP_FORCE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SYNC_STAMP_FORCE]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SYNC_STAMP_FORCE]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SYNC_STAMP_FORCE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SYNC_STAMP_FORCE,
           PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SYNC_STAMP_FORCE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SYNC_STAMP_FORCE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SYNC_STAMP_FORCE]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.setBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO]

//>> CLEAR_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.clearBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO]
static inline bool GET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.getBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_WRITETOIO]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.setBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23]

//>> CLEAR_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.clearBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23]
static inline bool GET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.getBit<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE23]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_VGTARGET]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_VGTARGET(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_VGTARGET,
           PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_VGTARGET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_VGTARGET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_VGTARGET]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_VGTARGET]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_VGTARGET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_VGTARGET,
           PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_VGTARGET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_VGTARGET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_VGTARGET]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_VGTARGET]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_VGTARGET(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_VGTARGET,
           PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_VGTARGET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_VGTARGET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_VGTARGET]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE4043]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE4043(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE4043,
           PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE4043_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE4043 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE4043]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE4043]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE4043(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE4043,
           PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE4043_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE4043 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE4043]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE4043]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE4043(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_MODE));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE4043,
           PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE4043_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE4043 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_MODE_TMSC_MODE_SPARE4043]

//>> PREP_[TP_TCN0_N0_CLOCK_STAT_NSL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_CLOCK_STAT_NSL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_CLOCK_STAT_NSL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_CLOCK_STAT_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_CLOCK_STAT_NSL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_CLOCK_STAT_NSL;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_CLOCK_STAT_NSL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL]

//>> PUT_[TP_TCN0_N0_CLOCK_STAT_NSL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_CLOCK_STAT_NSL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_CLOCK_STAT_NSL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_CLOCK_STAT_NSL]


//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL]

//>> CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL]
static inline bool GET_TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_PERV_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL]

//>> CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL]
static inline bool GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT1_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL]

//>> CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL]
static inline bool GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT2_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL]

//>> CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL]
static inline bool GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT3_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL]

//>> CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL]
static inline bool GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT4_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL]

//>> CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL]
static inline bool GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT5_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL]

//>> CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL]
static inline bool GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT6_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL]

//>> CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL]
static inline bool GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT7_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL]

//>> CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL]
static inline bool GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT8_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL]

//>> CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL]
static inline bool GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT9_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL]

//>> CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL]
static inline bool GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT10_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL]

//>> CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL]
static inline bool GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT11_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL]

//>> CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL]
static inline bool GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT12_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL]

//>> CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL]
static inline bool GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT13_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL]

//>> SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.setBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL]

//>> CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL]

//>> GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL]
static inline bool GET_TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLOCK_STAT_NSL));
#endif
    return i_data.getBit<TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLOCK_STAT_NSL_UNIT14_NSL]

//>> PREP_[TP_TCN0_N0_DBG_CBS_CC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_DBG_CBS_CC(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_DBG_CBS_CC;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_DBG_CBS_CC]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_DBG_CBS_CC(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_DBG_CBS_CC;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_DBG_CBS_CC, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC]

//>> PUT_[TP_TCN0_N0_DBG_CBS_CC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_DBG_CBS_CC(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_DBG_CBS_CC, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_DBG_CBS_CC]


//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.setBit<TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP]

//>> CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.clearBit<TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.extractToRight<TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP]
static inline bool GET_TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.getBit<TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_RESET_EP]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.setBit<TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP]

//>> CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.clearBit<TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.extractToRight<TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP]
static inline bool GET_TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.getBit<TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_OPCG_IP]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.setBit<TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF]

//>> CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.clearBit<TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.extractToRight<TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF]
static inline bool GET_TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.getBit<TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_VITL_CLKOFF]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.setBit<TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE]

//>> CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.clearBit<TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.extractToRight<TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE]
static inline bool GET_TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.getBit<TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_TEST_ENABLE]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.setBit<TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ]

//>> CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.clearBit<TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.extractToRight<TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ]
static inline bool GET_TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.getBit<TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_REQ]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_CMD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_CMD,
           TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_CMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_CMD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_CMD]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_CMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_CMD,
           TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_CMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_CMD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_CMD]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_CMD]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_CMD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.extractToRight<TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_CMD,
           TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_CMD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_CMD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_CMD]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_STATE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_STATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_STATE,
           TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_STATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_STATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_STATE]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_STATE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_STATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_STATE,
           TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_STATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_STATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_STATE]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_STATE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_STATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.extractToRight<TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_STATE,
           TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_STATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_STATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_STATE]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.setBit<TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE]

//>> CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.clearBit<TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.extractToRight<TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE]
static inline bool GET_TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.getBit<TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_SECURITY_DEBUG_MODE]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.setBit<TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR]

//>> CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.clearBit<TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.extractToRight<TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR]
static inline bool GET_TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.getBit<TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CBS_PROTOCOL_ERROR]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.setBit<TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE]

//>> CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.clearBit<TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.extractToRight<TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE]
static inline bool GET_TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.getBit<TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_IDLE]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CURRENT_OPCG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_CURRENT_OPCG_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_CURRENT_OPCG_MODE,
           TP_TCN0_N0_DBG_CBS_CC_DBG_CURRENT_OPCG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CURRENT_OPCG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CURRENT_OPCG_MODE]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CURRENT_OPCG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_CURRENT_OPCG_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_CURRENT_OPCG_MODE,
           TP_TCN0_N0_DBG_CBS_CC_DBG_CURRENT_OPCG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CURRENT_OPCG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CURRENT_OPCG_MODE]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CURRENT_OPCG_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_DBG_CBS_CC_DBG_CURRENT_OPCG_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.extractToRight<TP_TCN0_N0_DBG_CBS_CC_DBG_CURRENT_OPCG_MODE,
           TP_TCN0_N0_DBG_CBS_CC_DBG_CURRENT_OPCG_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CURRENT_OPCG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CURRENT_OPCG_MODE]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_LAST_OPCG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_LAST_OPCG_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_LAST_OPCG_MODE,
           TP_TCN0_N0_DBG_CBS_CC_DBG_LAST_OPCG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_LAST_OPCG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_LAST_OPCG_MODE]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_LAST_OPCG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_LAST_OPCG_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_LAST_OPCG_MODE,
           TP_TCN0_N0_DBG_CBS_CC_DBG_LAST_OPCG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_LAST_OPCG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_LAST_OPCG_MODE]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_LAST_OPCG_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_DBG_CBS_CC_DBG_LAST_OPCG_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.extractToRight<TP_TCN0_N0_DBG_CBS_CC_DBG_LAST_OPCG_MODE,
           TP_TCN0_N0_DBG_CBS_CC_DBG_LAST_OPCG_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_LAST_OPCG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_LAST_OPCG_MODE]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.setBit<TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR]

//>> CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.clearBit<TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.extractToRight<TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR]
static inline bool GET_TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.getBit<TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_ERROR]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.setBit<TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR]

//>> CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.clearBit<TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.extractToRight<TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR]
static inline bool GET_TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.getBit<TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARITY_ERROR]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.setBit<TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR]

//>> CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.clearBit<TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.extractToRight<TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR]
static inline bool GET_TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.getBit<TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CC_ERROR]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.setBit<TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED]

//>> CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.clearBit<TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.extractToRight<TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED]
static inline bool GET_TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.getBit<TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_CHIPLET_IS_ALIGNED]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.setBit<TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET]

//>> CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.clearBit<TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.extractToRight<TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET]
static inline bool GET_TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.getBit<TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PCB_REQUEST_SINCE_RESET]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.setBit<TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE]

//>> CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.clearBit<TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.extractToRight<TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE]
static inline bool GET_TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.getBit<TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_TEST_ENABLE_CHANGE]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.setBit<TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE]

//>> CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.clearBit<TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.extractToRight<TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE]
static inline bool GET_TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.getBit<TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_DBG_PARANOIA_VITL_CLKOFF_CHANGE]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK]

//>> SET_[TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.setBit<TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK]

//>> CLEAR_[TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return o_data.clearBit<TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.extractToRight<TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK]

//>> GET_[TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK]
static inline bool GET_TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_DBG_CBS_CC));
#endif
    return i_data.getBit<TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_DBG_CBS_CC_TP_TPFSI_CBS_ACK]

//>> PREP_[TP_TCN0_N0_OPCG_CAPT3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_OPCG_CAPT3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_OPCG_CAPT3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_OPCG_CAPT3]

//>> GET_[TP_TCN0_N0_OPCG_CAPT3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_OPCG_CAPT3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_OPCG_CAPT3;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_OPCG_CAPT3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_CAPT3]

//>> PUT_[TP_TCN0_N0_OPCG_CAPT3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_OPCG_CAPT3(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_OPCG_CAPT3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_OPCG_CAPT3]


//>> SET_[TP_TCN0_N0_OPCG_CAPT3_07EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_07EVEN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_07EVEN,
           TP_TCN0_N0_OPCG_CAPT3_07EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_07EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_07EVEN]

//>> SET_[TP_TCN0_N0_OPCG_CAPT3_07EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_07EVEN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_07EVEN,
           TP_TCN0_N0_OPCG_CAPT3_07EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_07EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_07EVEN]

//>> GET_[TP_TCN0_N0_OPCG_CAPT3_07EVEN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_CAPT3_07EVEN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_CAPT3_07EVEN,
           TP_TCN0_N0_OPCG_CAPT3_07EVEN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_07EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_CAPT3_07EVEN]

//>> SET_[TP_TCN0_N0_OPCG_CAPT3_07ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_07ODD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_07ODD,
           TP_TCN0_N0_OPCG_CAPT3_07ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_07ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_07ODD]

//>> SET_[TP_TCN0_N0_OPCG_CAPT3_07ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_07ODD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_07ODD,
           TP_TCN0_N0_OPCG_CAPT3_07ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_07ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_07ODD]

//>> GET_[TP_TCN0_N0_OPCG_CAPT3_07ODD]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_CAPT3_07ODD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_CAPT3_07ODD,
           TP_TCN0_N0_OPCG_CAPT3_07ODD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_07ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_CAPT3_07ODD]

//>> SET_[TP_TCN0_N0_OPCG_CAPT3_08EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_08EVEN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_08EVEN,
           TP_TCN0_N0_OPCG_CAPT3_08EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_08EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_08EVEN]

//>> SET_[TP_TCN0_N0_OPCG_CAPT3_08EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_08EVEN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_08EVEN,
           TP_TCN0_N0_OPCG_CAPT3_08EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_08EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_08EVEN]

//>> GET_[TP_TCN0_N0_OPCG_CAPT3_08EVEN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_CAPT3_08EVEN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_CAPT3_08EVEN,
           TP_TCN0_N0_OPCG_CAPT3_08EVEN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_08EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_CAPT3_08EVEN]

//>> SET_[TP_TCN0_N0_OPCG_CAPT3_08ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_08ODD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_08ODD,
           TP_TCN0_N0_OPCG_CAPT3_08ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_08ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_08ODD]

//>> SET_[TP_TCN0_N0_OPCG_CAPT3_08ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_08ODD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_08ODD,
           TP_TCN0_N0_OPCG_CAPT3_08ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_08ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_08ODD]

//>> GET_[TP_TCN0_N0_OPCG_CAPT3_08ODD]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_CAPT3_08ODD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_CAPT3_08ODD,
           TP_TCN0_N0_OPCG_CAPT3_08ODD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_08ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_CAPT3_08ODD]

//>> SET_[TP_TCN0_N0_OPCG_CAPT3_09EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_09EVEN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_09EVEN,
           TP_TCN0_N0_OPCG_CAPT3_09EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_09EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_09EVEN]

//>> SET_[TP_TCN0_N0_OPCG_CAPT3_09EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_09EVEN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_09EVEN,
           TP_TCN0_N0_OPCG_CAPT3_09EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_09EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_09EVEN]

//>> GET_[TP_TCN0_N0_OPCG_CAPT3_09EVEN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_CAPT3_09EVEN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_CAPT3_09EVEN,
           TP_TCN0_N0_OPCG_CAPT3_09EVEN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_09EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_CAPT3_09EVEN]

//>> SET_[TP_TCN0_N0_OPCG_CAPT3_09ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_09ODD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_09ODD,
           TP_TCN0_N0_OPCG_CAPT3_09ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_09ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_09ODD]

//>> SET_[TP_TCN0_N0_OPCG_CAPT3_09ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_09ODD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_09ODD,
           TP_TCN0_N0_OPCG_CAPT3_09ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_09ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_09ODD]

//>> GET_[TP_TCN0_N0_OPCG_CAPT3_09ODD]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_CAPT3_09ODD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_CAPT3_09ODD,
           TP_TCN0_N0_OPCG_CAPT3_09ODD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_09ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_CAPT3_09ODD]

//>> SET_[TP_TCN0_N0_OPCG_CAPT3_10EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_10EVEN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_10EVEN,
           TP_TCN0_N0_OPCG_CAPT3_10EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_10EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_10EVEN]

//>> SET_[TP_TCN0_N0_OPCG_CAPT3_10EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_10EVEN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_10EVEN,
           TP_TCN0_N0_OPCG_CAPT3_10EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_10EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_10EVEN]

//>> GET_[TP_TCN0_N0_OPCG_CAPT3_10EVEN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_CAPT3_10EVEN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_CAPT3_10EVEN,
           TP_TCN0_N0_OPCG_CAPT3_10EVEN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_10EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_CAPT3_10EVEN]

//>> SET_[TP_TCN0_N0_OPCG_CAPT3_10ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_10ODD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_10ODD,
           TP_TCN0_N0_OPCG_CAPT3_10ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_10ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_10ODD]

//>> SET_[TP_TCN0_N0_OPCG_CAPT3_10ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_10ODD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_10ODD,
           TP_TCN0_N0_OPCG_CAPT3_10ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_10ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_10ODD]

//>> GET_[TP_TCN0_N0_OPCG_CAPT3_10ODD]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_CAPT3_10ODD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_CAPT3_10ODD,
           TP_TCN0_N0_OPCG_CAPT3_10ODD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_10ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_CAPT3_10ODD]

//>> SET_[TP_TCN0_N0_OPCG_CAPT3_11EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_11EVEN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_11EVEN,
           TP_TCN0_N0_OPCG_CAPT3_11EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_11EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_11EVEN]

//>> SET_[TP_TCN0_N0_OPCG_CAPT3_11EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_11EVEN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_11EVEN,
           TP_TCN0_N0_OPCG_CAPT3_11EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_11EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_11EVEN]

//>> GET_[TP_TCN0_N0_OPCG_CAPT3_11EVEN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_CAPT3_11EVEN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_CAPT3_11EVEN,
           TP_TCN0_N0_OPCG_CAPT3_11EVEN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_11EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_CAPT3_11EVEN]

//>> SET_[TP_TCN0_N0_OPCG_CAPT3_11ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_11ODD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_11ODD,
           TP_TCN0_N0_OPCG_CAPT3_11ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_11ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_11ODD]

//>> SET_[TP_TCN0_N0_OPCG_CAPT3_11ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_11ODD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_11ODD,
           TP_TCN0_N0_OPCG_CAPT3_11ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_11ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_11ODD]

//>> GET_[TP_TCN0_N0_OPCG_CAPT3_11ODD]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_CAPT3_11ODD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_CAPT3_11ODD,
           TP_TCN0_N0_OPCG_CAPT3_11ODD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_11ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_CAPT3_11ODD]

//>> SET_[TP_TCN0_N0_OPCG_CAPT3_12EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_12EVEN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_12EVEN,
           TP_TCN0_N0_OPCG_CAPT3_12EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_12EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_12EVEN]

//>> SET_[TP_TCN0_N0_OPCG_CAPT3_12EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_12EVEN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_12EVEN,
           TP_TCN0_N0_OPCG_CAPT3_12EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_12EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_12EVEN]

//>> GET_[TP_TCN0_N0_OPCG_CAPT3_12EVEN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_CAPT3_12EVEN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_CAPT3_12EVEN,
           TP_TCN0_N0_OPCG_CAPT3_12EVEN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_12EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_CAPT3_12EVEN]

//>> SET_[TP_TCN0_N0_OPCG_CAPT3_12ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_12ODD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_12ODD,
           TP_TCN0_N0_OPCG_CAPT3_12ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_12ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_12ODD]

//>> SET_[TP_TCN0_N0_OPCG_CAPT3_12ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_CAPT3_12ODD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_CAPT3_12ODD,
           TP_TCN0_N0_OPCG_CAPT3_12ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_12ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_CAPT3_12ODD]

//>> GET_[TP_TCN0_N0_OPCG_CAPT3_12ODD]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_CAPT3_12ODD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_CAPT3));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_CAPT3_12ODD,
           TP_TCN0_N0_OPCG_CAPT3_12ODD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_CAPT3_12ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_CAPT3_12ODD]

//>> PREP_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG]

//>> GET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG]

//>> PUT_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG]


//>> SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LO_DATA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LO_DATA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LO_DATA,
           TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LO_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LO_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LO_DATA]

//>> SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LO_DATA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LO_DATA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LO_DATA,
           TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LO_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LO_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LO_DATA]

//>> GET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LO_DATA]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LO_DATA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LO_DATA,
           TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LO_DATA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LO_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LO_DATA]

//>> SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_ADDRESS,
           TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_ADDRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_ADDRESS]

//>> SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_ADDRESS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_ADDRESS,
           TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_ADDRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_ADDRESS]

//>> GET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_ADDRESS]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_ADDRESS,
           TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_ADDRESS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_ADDRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_ADDRESS]

//>> SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK,
           TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK]

//>> SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK,
           TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK]

//>> GET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK,
           TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK]

//>> SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> CLEAR_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> GET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> GET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline bool GET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> CLEAR_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> GET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> GET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline bool GET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING]

//>> SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING]

//>> SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING]

//>> CLEAR_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING]

//>> GET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING]

//>> GET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING]
static inline bool GET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_RUNNING]

//>> SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS,
           TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS]

//>> SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS,
           TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS]

//>> GET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS,
           TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS]

//>> PREP_[TP_TCN0_N0_TRA0_TR0_CONFIG_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_TRA0_TR0_CONFIG_4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_TRA0_TR0_CONFIG_4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_TRA0_TR0_CONFIG_4]

//>> GET_[TP_TCN0_N0_TRA0_TR0_CONFIG_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_TRA0_TR0_CONFIG_4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_TRA0_TR0_CONFIG_4;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_TRA0_TR0_CONFIG_4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR0_CONFIG_4]

//>> PUT_[TP_TCN0_N0_TRA0_TR0_CONFIG_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_TRA0_TR0_CONFIG_4(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_CONFIG_4));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_TRA0_TR0_CONFIG_4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_TRA0_TR0_CONFIG_4]


//>> SET_[TP_TCN0_N0_TRA0_TR0_CONFIG_4_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_CONFIG_4_A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_CONFIG_4_A,
           TP_TCN0_N0_TRA0_TR0_CONFIG_4_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_CONFIG_4_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_CONFIG_4_A]

//>> SET_[TP_TCN0_N0_TRA0_TR0_CONFIG_4_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_CONFIG_4_A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_CONFIG_4_A,
           TP_TCN0_N0_TRA0_TR0_CONFIG_4_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_CONFIG_4_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_CONFIG_4_A]

//>> GET_[TP_TCN0_N0_TRA0_TR0_CONFIG_4_A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR0_CONFIG_4_A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_CONFIG_4));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR0_CONFIG_4_A,
           TP_TCN0_N0_TRA0_TR0_CONFIG_4_A_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_CONFIG_4_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR0_CONFIG_4_A]

//>> SET_[TP_TCN0_N0_TRA0_TR0_CONFIG_4_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_CONFIG_4_B(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_CONFIG_4_B,
           TP_TCN0_N0_TRA0_TR0_CONFIG_4_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_CONFIG_4_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_CONFIG_4_B]

//>> SET_[TP_TCN0_N0_TRA0_TR0_CONFIG_4_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_CONFIG_4_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_CONFIG_4_B,
           TP_TCN0_N0_TRA0_TR0_CONFIG_4_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_CONFIG_4_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_CONFIG_4_B]

//>> GET_[TP_TCN0_N0_TRA0_TR0_CONFIG_4_B]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR0_CONFIG_4_B(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_CONFIG_4));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR0_CONFIG_4_B,
           TP_TCN0_N0_TRA0_TR0_CONFIG_4_B_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_CONFIG_4_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR0_CONFIG_4_B]

//>> PREP_[TP_TCN1_N1_CPLT_CONF1_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_CPLT_CONF1_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_CPLT_CONF1_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_CPLT_CONF1_RW]

//>> GET_[TP_TCN1_N1_CPLT_CONF1_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_CPLT_CONF1_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_CPLT_CONF1_RW;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_CPLT_CONF1_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CONF1_RW]

//>> PUT_[TP_TCN1_N1_CPLT_CONF1_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_CPLT_CONF1_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_CPLT_CONF1_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_CPLT_CONF1_RW]

//>> PREP_[TP_TCN1_N1_CPLT_CONF1_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_CPLT_CONF1_WO_CLEAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_CPLT_CONF1_WO_CLEAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_CPLT_CONF1_WO_CLEAR]

//>> GET_[TP_TCN1_N1_CPLT_CONF1_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_CPLT_CONF1_WO_CLEAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_CPLT_CONF1_WO_CLEAR;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CONF1_WO_CLEAR]

//>> PUT_[TP_TCN1_N1_CPLT_CONF1_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_CPLT_CONF1_WO_CLEAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_CPLT_CONF1_WO_CLEAR]

//>> PREP_[TP_TCN1_N1_CPLT_CONF1_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_CPLT_CONF1_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_CPLT_CONF1_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_CPLT_CONF1_WO_OR]

//>> GET_[TP_TCN1_N1_CPLT_CONF1_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_CPLT_CONF1_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_CPLT_CONF1_WO_OR;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_CPLT_CONF1_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CONF1_WO_OR]

//>> PUT_[TP_TCN1_N1_CPLT_CONF1_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_CPLT_CONF1_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_CPLT_CONF1_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_CPLT_CONF1_WO_OR]


//>> SET_[TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQ_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQ_DC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQ_DC,
           TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQ_DC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQ_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQ_DC]

//>> SET_[TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQ_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQ_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQ_DC,
           TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQ_DC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQ_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQ_DC]

//>> GET_[TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQ_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQ_DC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQ_DC,
           TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQ_DC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQ_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQ_DC]

//>> SET_[TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQALL_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQALL_DC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQALL_DC,
           TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQALL_DC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQALL_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQALL_DC]

//>> SET_[TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQALL_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQALL_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQALL_DC,
           TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQALL_DC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQALL_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQALL_DC]

//>> GET_[TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQALL_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQALL_DC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQALL_DC,
           TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQALL_DC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQALL_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_EQALL_DC]

//>> SET_[TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_VDN_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_VDN_DC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_VDN_DC,
           TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_VDN_DC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_VDN_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_VDN_DC]

//>> SET_[TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_VDN_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_VDN_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_VDN_DC,
           TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_VDN_DC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_VDN_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_VDN_DC]

//>> GET_[TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_VDN_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_VDN_DC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_VDN_DC,
           TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_VDN_DC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_VDN_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CONF1_C_ANES_AMUX_VSEL_ES_VDN_DC]

//>> SET_[TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC]

//>> SET_[TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC]

//>> SET_[TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC]

//>> CLEAR_[TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC]

//>> GET_[TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC]

//>> GET_[TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC]
static inline bool GET_TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CONF1_P_N1_PSI_IOVALID_DC]

//>> SET_[TP_TCN1_N1_CPLT_CONF1_C_LP_RESET]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CONF1_C_LP_RESET(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CONF1_C_LP_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CONF1_C_LP_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CONF1_C_LP_RESET]

//>> SET_[TP_TCN1_N1_CPLT_CONF1_C_LP_RESET]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CONF1_C_LP_RESET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CONF1_C_LP_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CONF1_C_LP_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CONF1_C_LP_RESET]

//>> SET_[TP_TCN1_N1_CPLT_CONF1_C_LP_RESET]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CONF1_C_LP_RESET(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CONF1_C_LP_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CONF1_C_LP_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CONF1_C_LP_RESET]

//>> CLEAR_[TP_TCN1_N1_CPLT_CONF1_C_LP_RESET]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CONF1_C_LP_RESET(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CONF1_C_LP_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CONF1_C_LP_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CONF1_C_LP_RESET]

//>> GET_[TP_TCN1_N1_CPLT_CONF1_C_LP_RESET]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CONF1_C_LP_RESET(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CONF1_C_LP_RESET,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CONF1_C_LP_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CONF1_C_LP_RESET]

//>> GET_[TP_TCN1_N1_CPLT_CONF1_C_LP_RESET]
static inline bool GET_TP_TCN1_N1_CPLT_CONF1_C_LP_RESET(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CONF1_RW, TP_TCN1_N1_CPLT_CONF1_WO_CLEAR, TP_TCN1_N1_CPLT_CONF1_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CONF1_C_LP_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CONF1_C_LP_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CONF1_C_LP_RESET]

//>> PREP_[TP_TCN1_N1_CPLT_CTRL1_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_CPLT_CTRL1_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_CPLT_CTRL1_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_CPLT_CTRL1_RW]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_CPLT_CTRL1_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_CPLT_CTRL1_RW;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_CPLT_CTRL1_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_RW]

//>> PUT_[TP_TCN1_N1_CPLT_CTRL1_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_CPLT_CTRL1_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_CPLT_CTRL1_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_CPLT_CTRL1_RW]

//>> PREP_[TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR]

//>> PUT_[TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR]

//>> PREP_[TP_TCN1_N1_CPLT_CTRL1_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_CPLT_CTRL1_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_CPLT_CTRL1_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_CPLT_CTRL1_WO_OR]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_CPLT_CTRL1_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_CPLT_CTRL1_WO_OR;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_CPLT_CTRL1_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_WO_OR]

//>> PUT_[TP_TCN1_N1_CPLT_CTRL1_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_CPLT_CTRL1_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_CPLT_CTRL1_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_CPLT_CTRL1_WO_OR]


//>> SET_[TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_UNIT_MULTICYCLE_TEST_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION0_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION1_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION2_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION3_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION4_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION5_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION6_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION7_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION8_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION9_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION10_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION11_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION12_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION13_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_REGION14_FENCE_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC]

//>> SET_[TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC]

//>> CLEAR_[TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC]

//>> GET_[TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC]
static inline bool GET_TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_CPLT_CTRL1_RW, TP_TCN1_N1_CPLT_CTRL1_WO_CLEAR, TP_TCN1_N1_CPLT_CTRL1_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_CPLT_CTRL1_STG_ACT_EN_DC]

//>> PREP_[TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG(const fapi2::Target<K, M, V>&
        i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG]

//>> GET_[TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG]

//>> PUT_[TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG]


//>> SET_[TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG_RING_FENCE_ENABLE_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG_RING_FENCE_ENABLE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG_RING_FENCE_ENABLE_MASK,
           TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG_RING_FENCE_ENABLE_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG_RING_FENCE_ENABLE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG_RING_FENCE_ENABLE_MASK]

//>> SET_[TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG_RING_FENCE_ENABLE_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG_RING_FENCE_ENABLE_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG_RING_FENCE_ENABLE_MASK,
           TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG_RING_FENCE_ENABLE_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG_RING_FENCE_ENABLE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG_RING_FENCE_ENABLE_MASK]

//>> GET_[TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG_RING_FENCE_ENABLE_MASK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG_RING_FENCE_ENABLE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG_RING_FENCE_ENABLE_MASK,
           TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG_RING_FENCE_ENABLE_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG_RING_FENCE_ENABLE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_PSC_RING_FENCE_MASK_LATCH_REG_RING_FENCE_ENABLE_MASK]

//>> PREP_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ(
    const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ]

//>> GET_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ(
    const fapi2::Target<K, M, V>& i_target, fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ]

//>> PUT_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ(
    const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ]


//>> SET_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_VALUE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_VALUE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_VALUE,
           TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_VALUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_VALUE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_VALUE]

//>> SET_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_VALUE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_VALUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_VALUE,
           TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_VALUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_VALUE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_VALUE]

//>> GET_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_VALUE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_VALUE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_VALUE,
           TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_VALUE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_VALUE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_VALUE]

//>> SET_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR]

//>> SET_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR]

//>> SET_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR]

//>> CLEAR_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR]

//>> GET_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR]

//>> GET_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR]
static inline bool GET_TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_THERM_WSUB_TIMESTAMP_COUNTER_READ_OVERFLOW_ERR]

//>> PREP_[TP_TCN1_N1_LOCAL_XSTOP_MASK_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_LOCAL_XSTOP_MASK_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_LOCAL_XSTOP_MASK_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_LOCAL_XSTOP_MASK_RW]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_LOCAL_XSTOP_MASK_RW;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_RW]

//>> PUT_[TP_TCN1_N1_LOCAL_XSTOP_MASK_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_LOCAL_XSTOP_MASK_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_LOCAL_XSTOP_MASK_RW]

//>> PREP_[TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR]

//>> PUT_[TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR]

//>> PREP_[TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR]

//>> PUT_[TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR]


//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_01]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_01(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_01]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_01]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_01(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_01]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_01]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_01]

//>> CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_01]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_LOCAL_XSTOP_MASK_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_01]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_01]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_01(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_01,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_01]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_01]
static inline bool GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_01(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_01]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_02]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_02(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_02]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_02]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_02(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_02]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_02]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_02]

//>> CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_02]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_LOCAL_XSTOP_MASK_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_02]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_02]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_02(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_02,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_02]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_02]
static inline bool GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_02(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_02]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_03]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_03(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_03]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_03]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_03(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_03]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_03]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_03]

//>> CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_03]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_LOCAL_XSTOP_MASK_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_03]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_03]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_03(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_03,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_03]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_03]
static inline bool GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_03(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_03]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_04]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_04(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_04]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_04]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_04(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_04]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_04]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_04(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_04]

//>> CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_04]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_LOCAL_XSTOP_MASK_04(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_04]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_04]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_04(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_04,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_04]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_04]
static inline bool GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_04(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_04]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_05(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_05]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_05(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_05]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_05]

//>> CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_05]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_LOCAL_XSTOP_MASK_05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_05]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_05]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_05(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_05,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_05]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_05]
static inline bool GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_05(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_05]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_06(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_06]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_06(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_06]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_06]

//>> CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_06]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_LOCAL_XSTOP_MASK_06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_06]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_06]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_06(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_06,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_06]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_06]
static inline bool GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_06(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_06]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_07(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_07]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_07(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_07]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_07]

//>> CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_07]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_LOCAL_XSTOP_MASK_07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_07]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_07]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_07(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_07,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_07]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_07]
static inline bool GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_07(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_07]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_08(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_08]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_08(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_08]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_08]

//>> CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_08]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_LOCAL_XSTOP_MASK_08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_08]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_08]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_08(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_08,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_08]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_08]
static inline bool GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_08(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_08]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_09(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_09]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_09(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_09]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_09]

//>> CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_09]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_LOCAL_XSTOP_MASK_09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_09]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_09]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_09(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_09,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_09]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_09]
static inline bool GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_09(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_09]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_10]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_10]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_10]

//>> CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_10]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_LOCAL_XSTOP_MASK_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_10]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_10]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_10]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_10]
static inline bool GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_10]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_11]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_11]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_11]

//>> CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_11]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_LOCAL_XSTOP_MASK_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_11]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_11]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_11]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_11]
static inline bool GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_11]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_12]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_12]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_12]

//>> CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_12]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_LOCAL_XSTOP_MASK_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_12]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_12]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_12]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_12]
static inline bool GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_12]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_13]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_13]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_13]

//>> CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_13]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_LOCAL_XSTOP_MASK_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_13]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_13]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_13]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_13]
static inline bool GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_13]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_14]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_14]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_14]

//>> CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_14]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_LOCAL_XSTOP_MASK_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_14]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_14]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_14]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_14]
static inline bool GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_14]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_15]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_15]

//>> SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_LOCAL_XSTOP_MASK_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_15]

//>> CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_15]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_LOCAL_XSTOP_MASK_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_LOCAL_XSTOP_MASK_15]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_15]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN1_N1_LOCAL_XSTOP_MASK_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_15]

//>> GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_15]
static inline bool GET_TP_TCN1_N1_LOCAL_XSTOP_MASK_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_LOCAL_XSTOP_MASK_RW, TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_CLEAR,
                           TP_TCN1_N1_LOCAL_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN1_N1_LOCAL_XSTOP_MASK_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_LOCAL_XSTOP_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_LOCAL_XSTOP_MASK_15]

//>> PREP_[TP_TCN1_N1_SCAN32]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_SCAN32(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_SCAN32;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_SCAN32]

//>> GET_[TP_TCN1_N1_SCAN32]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_SCAN32(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_SCAN32;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_SCAN32, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_SCAN32]

//>> PUT_[TP_TCN1_N1_SCAN32]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_SCAN32(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_SCAN32));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_SCAN32, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_SCAN32]


//>> SET_[TP_TCN1_N1_SCAN32_SCAN32_REG]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_SCAN32_SCAN32_REG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_SCAN32));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_SCAN32_SCAN32_REG,
           TP_TCN1_N1_SCAN32_SCAN32_REG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_SCAN32_SCAN32_REG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_SCAN32_SCAN32_REG]

//>> SET_[TP_TCN1_N1_SCAN32_SCAN32_REG]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_SCAN32_SCAN32_REG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_SCAN32));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_SCAN32_SCAN32_REG,
           TP_TCN1_N1_SCAN32_SCAN32_REG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_SCAN32_SCAN32_REG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_SCAN32_SCAN32_REG]

//>> GET_[TP_TCN1_N1_SCAN32_SCAN32_REG]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_SCAN32_SCAN32_REG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_SCAN32));
#endif
    return i_data.extractToRight<TP_TCN1_N1_SCAN32_SCAN32_REG,
           TP_TCN1_N1_SCAN32_SCAN32_REG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_SCAN32_SCAN32_REG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_SCAN32_SCAN32_REG]

//>> PREP_[TP_TCN1_N1_SCAN64]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_SCAN64(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_SCAN64;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_SCAN64]

//>> GET_[TP_TCN1_N1_SCAN64]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_SCAN64(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_SCAN64;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_SCAN64, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_SCAN64]

//>> PUT_[TP_TCN1_N1_SCAN64]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_SCAN64(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_SCAN64));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_SCAN64, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_SCAN64]


//>> SET_[TP_TCN1_N1_SCAN64_SCAN64_REG]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_SCAN64_SCAN64_REG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_SCAN64));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_SCAN64_SCAN64_REG,
           TP_TCN1_N1_SCAN64_SCAN64_REG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_SCAN64_SCAN64_REG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_SCAN64_SCAN64_REG]

//>> SET_[TP_TCN1_N1_SCAN64_SCAN64_REG]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_SCAN64_SCAN64_REG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_SCAN64));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_SCAN64_SCAN64_REG,
           TP_TCN1_N1_SCAN64_SCAN64_REG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_SCAN64_SCAN64_REG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_SCAN64_SCAN64_REG]

//>> GET_[TP_TCN1_N1_SCAN64_SCAN64_REG]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_SCAN64_SCAN64_REG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_SCAN64));
#endif
    return i_data.extractToRight<TP_TCN1_N1_SCAN64_SCAN64_REG,
           TP_TCN1_N1_SCAN64_SCAN64_REG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_SCAN64_SCAN64_REG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_SCAN64_SCAN64_REG]

//>> PREP_[TP_TCN1_N1_TRA0_TR1_CONFIG_5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA0_TR1_CONFIG_5(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA0_TR1_CONFIG_5;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA0_TR1_CONFIG_5]

//>> GET_[TP_TCN1_N1_TRA0_TR1_CONFIG_5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA0_TR1_CONFIG_5(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA0_TR1_CONFIG_5;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA0_TR1_CONFIG_5, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA0_TR1_CONFIG_5]

//>> PUT_[TP_TCN1_N1_TRA0_TR1_CONFIG_5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA0_TR1_CONFIG_5(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR1_CONFIG_5));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA0_TR1_CONFIG_5, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA0_TR1_CONFIG_5]


//>> SET_[TP_TCN1_N1_TRA0_TR1_CONFIG_5_C]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA0_TR1_CONFIG_5_C(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR1_CONFIG_5));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA0_TR1_CONFIG_5_C,
           TP_TCN1_N1_TRA0_TR1_CONFIG_5_C_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR1_CONFIG_5_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA0_TR1_CONFIG_5_C]

//>> SET_[TP_TCN1_N1_TRA0_TR1_CONFIG_5_C]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA0_TR1_CONFIG_5_C(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR1_CONFIG_5));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA0_TR1_CONFIG_5_C,
           TP_TCN1_N1_TRA0_TR1_CONFIG_5_C_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR1_CONFIG_5_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA0_TR1_CONFIG_5_C]

//>> GET_[TP_TCN1_N1_TRA0_TR1_CONFIG_5_C]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA0_TR1_CONFIG_5_C(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR1_CONFIG_5));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA0_TR1_CONFIG_5_C,
           TP_TCN1_N1_TRA0_TR1_CONFIG_5_C_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR1_CONFIG_5_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA0_TR1_CONFIG_5_C]

//>> SET_[TP_TCN1_N1_TRA0_TR1_CONFIG_5_D]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA0_TR1_CONFIG_5_D(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR1_CONFIG_5));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA0_TR1_CONFIG_5_D,
           TP_TCN1_N1_TRA0_TR1_CONFIG_5_D_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR1_CONFIG_5_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA0_TR1_CONFIG_5_D]

//>> SET_[TP_TCN1_N1_TRA0_TR1_CONFIG_5_D]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA0_TR1_CONFIG_5_D(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR1_CONFIG_5));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA0_TR1_CONFIG_5_D,
           TP_TCN1_N1_TRA0_TR1_CONFIG_5_D_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR1_CONFIG_5_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA0_TR1_CONFIG_5_D]

//>> GET_[TP_TCN1_N1_TRA0_TR1_CONFIG_5_D]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA0_TR1_CONFIG_5_D(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR1_CONFIG_5));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA0_TR1_CONFIG_5_D,
           TP_TCN1_N1_TRA0_TR1_CONFIG_5_D_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR1_CONFIG_5_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA0_TR1_CONFIG_5_D]

//>> PREP_[TP_TCN1_N1_TRA1_TR0_CONFIG_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA1_TR0_CONFIG_3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA1_TR0_CONFIG_3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA1_TR0_CONFIG_3]

//>> GET_[TP_TCN1_N1_TRA1_TR0_CONFIG_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA1_TR0_CONFIG_3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA1_TR0_CONFIG_3;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA1_TR0_CONFIG_3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA1_TR0_CONFIG_3]

//>> PUT_[TP_TCN1_N1_TRA1_TR0_CONFIG_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA1_TR0_CONFIG_3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR0_CONFIG_3));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA1_TR0_CONFIG_3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA1_TR0_CONFIG_3]


//>> SET_[TP_TCN1_N1_TRA1_TR0_CONFIG_3_C]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA1_TR0_CONFIG_3_C(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR0_CONFIG_3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA1_TR0_CONFIG_3_C,
           TP_TCN1_N1_TRA1_TR0_CONFIG_3_C_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA1_TR0_CONFIG_3_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA1_TR0_CONFIG_3_C]

//>> SET_[TP_TCN1_N1_TRA1_TR0_CONFIG_3_C]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA1_TR0_CONFIG_3_C(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR0_CONFIG_3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA1_TR0_CONFIG_3_C,
           TP_TCN1_N1_TRA1_TR0_CONFIG_3_C_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA1_TR0_CONFIG_3_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA1_TR0_CONFIG_3_C]

//>> GET_[TP_TCN1_N1_TRA1_TR0_CONFIG_3_C]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA1_TR0_CONFIG_3_C(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR0_CONFIG_3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA1_TR0_CONFIG_3_C,
           TP_TCN1_N1_TRA1_TR0_CONFIG_3_C_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA1_TR0_CONFIG_3_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA1_TR0_CONFIG_3_C]

//>> SET_[TP_TCN1_N1_TRA1_TR0_CONFIG_3_D]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA1_TR0_CONFIG_3_D(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR0_CONFIG_3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA1_TR0_CONFIG_3_D,
           TP_TCN1_N1_TRA1_TR0_CONFIG_3_D_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA1_TR0_CONFIG_3_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA1_TR0_CONFIG_3_D]

//>> SET_[TP_TCN1_N1_TRA1_TR0_CONFIG_3_D]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA1_TR0_CONFIG_3_D(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR0_CONFIG_3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA1_TR0_CONFIG_3_D,
           TP_TCN1_N1_TRA1_TR0_CONFIG_3_D_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA1_TR0_CONFIG_3_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA1_TR0_CONFIG_3_D]

//>> GET_[TP_TCN1_N1_TRA1_TR0_CONFIG_3_D]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA1_TR0_CONFIG_3_D(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR0_CONFIG_3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA1_TR0_CONFIG_3_D,
           TP_TCN1_N1_TRA1_TR0_CONFIG_3_D_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA1_TR0_CONFIG_3_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA1_TR0_CONFIG_3_D]


//>>THE END<<

#ifndef __PPE_HCODE__
}
}

#endif
#endif
