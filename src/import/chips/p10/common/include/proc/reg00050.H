/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/proc/reg00050.H $         */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PROC_REG00050_H_
#define __PROC_REG00050_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace proc
{
#endif


//>> PREP_[INT_CQ_CNPM_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_CNPM_SEL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_CNPM_SEL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_CQ_CNPM_SEL]

//>> GET_[INT_CQ_CNPM_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_CNPM_SEL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_CNPM_SEL;
#endif
    return fapi2::getScom(i_target, INT_CQ_CNPM_SEL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_CQ_CNPM_SEL]

//>> PUT_[INT_CQ_CNPM_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_CNPM_SEL(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_CNPM_SEL));
#endif
    return fapi2::putScom(i_target, INT_CQ_CNPM_SEL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_CQ_CNPM_SEL]


//>> SET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE0_0_2]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_CNPM_SEL_PMON_MUX_BYTE0_0_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_CNPM_SEL));
#endif
    return o_data.insertFromRight<INT_CQ_CNPM_SEL_PMON_MUX_BYTE0_0_2,
           INT_CQ_CNPM_SEL_PMON_MUX_BYTE0_0_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_CNPM_SEL_PMON_MUX_BYTE0_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE0_0_2]

//>> SET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE0_0_2]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_CNPM_SEL_PMON_MUX_BYTE0_0_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_CNPM_SEL));
#endif
    return o_data.insertFromRight<INT_CQ_CNPM_SEL_PMON_MUX_BYTE0_0_2,
           INT_CQ_CNPM_SEL_PMON_MUX_BYTE0_0_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_CNPM_SEL_PMON_MUX_BYTE0_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE0_0_2]

//>> GET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE0_0_2]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_CNPM_SEL_PMON_MUX_BYTE0_0_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_CNPM_SEL));
#endif
    return i_data.extractToRight<INT_CQ_CNPM_SEL_PMON_MUX_BYTE0_0_2,
           INT_CQ_CNPM_SEL_PMON_MUX_BYTE0_0_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_CNPM_SEL_PMON_MUX_BYTE0_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE0_0_2]

//>> SET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE1_0_2]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_CNPM_SEL_PMON_MUX_BYTE1_0_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_CNPM_SEL));
#endif
    return o_data.insertFromRight<INT_CQ_CNPM_SEL_PMON_MUX_BYTE1_0_2,
           INT_CQ_CNPM_SEL_PMON_MUX_BYTE1_0_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_CNPM_SEL_PMON_MUX_BYTE1_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE1_0_2]

//>> SET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE1_0_2]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_CNPM_SEL_PMON_MUX_BYTE1_0_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_CNPM_SEL));
#endif
    return o_data.insertFromRight<INT_CQ_CNPM_SEL_PMON_MUX_BYTE1_0_2,
           INT_CQ_CNPM_SEL_PMON_MUX_BYTE1_0_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_CNPM_SEL_PMON_MUX_BYTE1_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE1_0_2]

//>> GET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE1_0_2]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_CNPM_SEL_PMON_MUX_BYTE1_0_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_CNPM_SEL));
#endif
    return i_data.extractToRight<INT_CQ_CNPM_SEL_PMON_MUX_BYTE1_0_2,
           INT_CQ_CNPM_SEL_PMON_MUX_BYTE1_0_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_CNPM_SEL_PMON_MUX_BYTE1_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE1_0_2]

//>> SET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE2_0_2]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_CNPM_SEL_PMON_MUX_BYTE2_0_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_CNPM_SEL));
#endif
    return o_data.insertFromRight<INT_CQ_CNPM_SEL_PMON_MUX_BYTE2_0_2,
           INT_CQ_CNPM_SEL_PMON_MUX_BYTE2_0_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_CNPM_SEL_PMON_MUX_BYTE2_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE2_0_2]

//>> SET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE2_0_2]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_CNPM_SEL_PMON_MUX_BYTE2_0_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_CNPM_SEL));
#endif
    return o_data.insertFromRight<INT_CQ_CNPM_SEL_PMON_MUX_BYTE2_0_2,
           INT_CQ_CNPM_SEL_PMON_MUX_BYTE2_0_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_CNPM_SEL_PMON_MUX_BYTE2_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE2_0_2]

//>> GET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE2_0_2]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_CNPM_SEL_PMON_MUX_BYTE2_0_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_CNPM_SEL));
#endif
    return i_data.extractToRight<INT_CQ_CNPM_SEL_PMON_MUX_BYTE2_0_2,
           INT_CQ_CNPM_SEL_PMON_MUX_BYTE2_0_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_CNPM_SEL_PMON_MUX_BYTE2_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE2_0_2]

//>> SET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE3_0_2]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_CNPM_SEL_PMON_MUX_BYTE3_0_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_CNPM_SEL));
#endif
    return o_data.insertFromRight<INT_CQ_CNPM_SEL_PMON_MUX_BYTE3_0_2,
           INT_CQ_CNPM_SEL_PMON_MUX_BYTE3_0_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_CNPM_SEL_PMON_MUX_BYTE3_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE3_0_2]

//>> SET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE3_0_2]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_CNPM_SEL_PMON_MUX_BYTE3_0_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_CNPM_SEL));
#endif
    return o_data.insertFromRight<INT_CQ_CNPM_SEL_PMON_MUX_BYTE3_0_2,
           INT_CQ_CNPM_SEL_PMON_MUX_BYTE3_0_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_CNPM_SEL_PMON_MUX_BYTE3_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE3_0_2]

//>> GET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE3_0_2]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_CNPM_SEL_PMON_MUX_BYTE3_0_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_CNPM_SEL));
#endif
    return i_data.extractToRight<INT_CQ_CNPM_SEL_PMON_MUX_BYTE3_0_2,
           INT_CQ_CNPM_SEL_PMON_MUX_BYTE3_0_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_CNPM_SEL_PMON_MUX_BYTE3_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_CNPM_SEL_PMON_MUX_BYTE3_0_2]

//>> SET_[INT_CQ_CNPM_SEL_RESERVED_12_23]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_CNPM_SEL_RESERVED_12_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_CNPM_SEL));
#endif
    return o_data.insertFromRight<INT_CQ_CNPM_SEL_RESERVED_12_23,
           INT_CQ_CNPM_SEL_RESERVED_12_23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_CNPM_SEL_RESERVED_12_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_CNPM_SEL_RESERVED_12_23]

//>> SET_[INT_CQ_CNPM_SEL_RESERVED_12_23]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_CNPM_SEL_RESERVED_12_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_CNPM_SEL));
#endif
    return o_data.insertFromRight<INT_CQ_CNPM_SEL_RESERVED_12_23,
           INT_CQ_CNPM_SEL_RESERVED_12_23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_CNPM_SEL_RESERVED_12_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_CNPM_SEL_RESERVED_12_23]

//>> GET_[INT_CQ_CNPM_SEL_RESERVED_12_23]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_CNPM_SEL_RESERVED_12_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_CNPM_SEL));
#endif
    return i_data.extractToRight<INT_CQ_CNPM_SEL_RESERVED_12_23,
           INT_CQ_CNPM_SEL_RESERVED_12_23_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_CNPM_SEL_RESERVED_12_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_CNPM_SEL_RESERVED_12_23]

//>> SET_[INT_CQ_CNPM_SEL_EBUS_ENABLE_0_15]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_CNPM_SEL_EBUS_ENABLE_0_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_CNPM_SEL));
#endif
    return o_data.insertFromRight<INT_CQ_CNPM_SEL_EBUS_ENABLE_0_15,
           INT_CQ_CNPM_SEL_EBUS_ENABLE_0_15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_CNPM_SEL_EBUS_ENABLE_0_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_CNPM_SEL_EBUS_ENABLE_0_15]

//>> SET_[INT_CQ_CNPM_SEL_EBUS_ENABLE_0_15]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_CNPM_SEL_EBUS_ENABLE_0_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_CNPM_SEL));
#endif
    return o_data.insertFromRight<INT_CQ_CNPM_SEL_EBUS_ENABLE_0_15,
           INT_CQ_CNPM_SEL_EBUS_ENABLE_0_15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_CNPM_SEL_EBUS_ENABLE_0_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_CNPM_SEL_EBUS_ENABLE_0_15]

//>> GET_[INT_CQ_CNPM_SEL_EBUS_ENABLE_0_15]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_CNPM_SEL_EBUS_ENABLE_0_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_CNPM_SEL));
#endif
    return i_data.extractToRight<INT_CQ_CNPM_SEL_EBUS_ENABLE_0_15,
           INT_CQ_CNPM_SEL_EBUS_ENABLE_0_15_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_CNPM_SEL_EBUS_ENABLE_0_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_CNPM_SEL_EBUS_ENABLE_0_15]

//>> PREP_[INT_CQ_ERR_INFO1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_ERR_INFO1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_ERR_INFO1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_CQ_ERR_INFO1]

//>> GET_[INT_CQ_ERR_INFO1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_ERR_INFO1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_ERR_INFO1;
#endif
    return fapi2::getScom(i_target, INT_CQ_ERR_INFO1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_CQ_ERR_INFO1]

//>> PUT_[INT_CQ_ERR_INFO1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_ERR_INFO1(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return fapi2::putScom(i_target, INT_CQ_ERR_INFO1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_CQ_ERR_INFO1]


//>> SET_[INT_CQ_ERR_INFO1_INFO_CAPTURED]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ERR_INFO1_INFO_CAPTURED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.insertFromRight<INT_CQ_ERR_INFO1_INFO_CAPTURED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_ERR_INFO1_INFO_CAPTURED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ERR_INFO1_INFO_CAPTURED]

//>> SET_[INT_CQ_ERR_INFO1_INFO_CAPTURED]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ERR_INFO1_INFO_CAPTURED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.insertFromRight<INT_CQ_ERR_INFO1_INFO_CAPTURED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_ERR_INFO1_INFO_CAPTURED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ERR_INFO1_INFO_CAPTURED]

//>> SET_[INT_CQ_ERR_INFO1_INFO_CAPTURED]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ERR_INFO1_INFO_CAPTURED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.setBit<INT_CQ_ERR_INFO1_INFO_CAPTURED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_ERR_INFO1_INFO_CAPTURED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ERR_INFO1_INFO_CAPTURED]

//>> CLEAR_[INT_CQ_ERR_INFO1_INFO_CAPTURED]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_ERR_INFO1_INFO_CAPTURED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.clearBit<INT_CQ_ERR_INFO1_INFO_CAPTURED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_ERR_INFO1_INFO_CAPTURED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_ERR_INFO1_INFO_CAPTURED]

//>> GET_[INT_CQ_ERR_INFO1_INFO_CAPTURED]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_ERR_INFO1_INFO_CAPTURED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return i_data.extractToRight<INT_CQ_ERR_INFO1_INFO_CAPTURED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_ERR_INFO1_INFO_CAPTURED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_ERR_INFO1_INFO_CAPTURED]

//>> GET_[INT_CQ_ERR_INFO1_INFO_CAPTURED]
static inline bool GET_INT_CQ_ERR_INFO1_INFO_CAPTURED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return i_data.getBit<INT_CQ_ERR_INFO1_INFO_CAPTURED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_ERR_INFO1_INFO_CAPTURED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_ERR_INFO1_INFO_CAPTURED]

//>> SET_[INT_CQ_ERR_INFO1_CI_WRITE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ERR_INFO1_CI_WRITE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.insertFromRight<INT_CQ_ERR_INFO1_CI_WRITE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_ERR_INFO1_CI_WRITE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ERR_INFO1_CI_WRITE]

//>> SET_[INT_CQ_ERR_INFO1_CI_WRITE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ERR_INFO1_CI_WRITE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.insertFromRight<INT_CQ_ERR_INFO1_CI_WRITE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_ERR_INFO1_CI_WRITE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ERR_INFO1_CI_WRITE]

//>> SET_[INT_CQ_ERR_INFO1_CI_WRITE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ERR_INFO1_CI_WRITE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.setBit<INT_CQ_ERR_INFO1_CI_WRITE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_ERR_INFO1_CI_WRITE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ERR_INFO1_CI_WRITE]

//>> CLEAR_[INT_CQ_ERR_INFO1_CI_WRITE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_ERR_INFO1_CI_WRITE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.clearBit<INT_CQ_ERR_INFO1_CI_WRITE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_ERR_INFO1_CI_WRITE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_ERR_INFO1_CI_WRITE]

//>> GET_[INT_CQ_ERR_INFO1_CI_WRITE]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_ERR_INFO1_CI_WRITE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return i_data.extractToRight<INT_CQ_ERR_INFO1_CI_WRITE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_ERR_INFO1_CI_WRITE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_ERR_INFO1_CI_WRITE]

//>> GET_[INT_CQ_ERR_INFO1_CI_WRITE]
static inline bool GET_INT_CQ_ERR_INFO1_CI_WRITE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return i_data.getBit<INT_CQ_ERR_INFO1_CI_WRITE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_ERR_INFO1_CI_WRITE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_ERR_INFO1_CI_WRITE]

//>> SET_[INT_CQ_ERR_INFO1_CI_READ]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ERR_INFO1_CI_READ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.insertFromRight<INT_CQ_ERR_INFO1_CI_READ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_ERR_INFO1_CI_READ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ERR_INFO1_CI_READ]

//>> SET_[INT_CQ_ERR_INFO1_CI_READ]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ERR_INFO1_CI_READ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.insertFromRight<INT_CQ_ERR_INFO1_CI_READ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_ERR_INFO1_CI_READ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ERR_INFO1_CI_READ]

//>> SET_[INT_CQ_ERR_INFO1_CI_READ]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ERR_INFO1_CI_READ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.setBit<INT_CQ_ERR_INFO1_CI_READ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_ERR_INFO1_CI_READ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ERR_INFO1_CI_READ]

//>> CLEAR_[INT_CQ_ERR_INFO1_CI_READ]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_ERR_INFO1_CI_READ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.clearBit<INT_CQ_ERR_INFO1_CI_READ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_ERR_INFO1_CI_READ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_ERR_INFO1_CI_READ]

//>> GET_[INT_CQ_ERR_INFO1_CI_READ]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_ERR_INFO1_CI_READ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return i_data.extractToRight<INT_CQ_ERR_INFO1_CI_READ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_ERR_INFO1_CI_READ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_ERR_INFO1_CI_READ]

//>> GET_[INT_CQ_ERR_INFO1_CI_READ]
static inline bool GET_INT_CQ_ERR_INFO1_CI_READ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return i_data.getBit<INT_CQ_ERR_INFO1_CI_READ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_ERR_INFO1_CI_READ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_ERR_INFO1_CI_READ]

//>> SET_[INT_CQ_ERR_INFO1_DMA_WRITE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ERR_INFO1_DMA_WRITE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.insertFromRight<INT_CQ_ERR_INFO1_DMA_WRITE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_ERR_INFO1_DMA_WRITE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ERR_INFO1_DMA_WRITE]

//>> SET_[INT_CQ_ERR_INFO1_DMA_WRITE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ERR_INFO1_DMA_WRITE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.insertFromRight<INT_CQ_ERR_INFO1_DMA_WRITE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_ERR_INFO1_DMA_WRITE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ERR_INFO1_DMA_WRITE]

//>> SET_[INT_CQ_ERR_INFO1_DMA_WRITE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ERR_INFO1_DMA_WRITE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.setBit<INT_CQ_ERR_INFO1_DMA_WRITE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_ERR_INFO1_DMA_WRITE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ERR_INFO1_DMA_WRITE]

//>> CLEAR_[INT_CQ_ERR_INFO1_DMA_WRITE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_ERR_INFO1_DMA_WRITE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.clearBit<INT_CQ_ERR_INFO1_DMA_WRITE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_ERR_INFO1_DMA_WRITE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_ERR_INFO1_DMA_WRITE]

//>> GET_[INT_CQ_ERR_INFO1_DMA_WRITE]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_ERR_INFO1_DMA_WRITE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return i_data.extractToRight<INT_CQ_ERR_INFO1_DMA_WRITE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_ERR_INFO1_DMA_WRITE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_ERR_INFO1_DMA_WRITE]

//>> GET_[INT_CQ_ERR_INFO1_DMA_WRITE]
static inline bool GET_INT_CQ_ERR_INFO1_DMA_WRITE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return i_data.getBit<INT_CQ_ERR_INFO1_DMA_WRITE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_ERR_INFO1_DMA_WRITE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_ERR_INFO1_DMA_WRITE]

//>> SET_[INT_CQ_ERR_INFO1_TSIZE_4_6]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ERR_INFO1_TSIZE_4_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.insertFromRight<INT_CQ_ERR_INFO1_TSIZE_4_6,
           INT_CQ_ERR_INFO1_TSIZE_4_6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_ERR_INFO1_TSIZE_4_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ERR_INFO1_TSIZE_4_6]

//>> SET_[INT_CQ_ERR_INFO1_TSIZE_4_6]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ERR_INFO1_TSIZE_4_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.insertFromRight<INT_CQ_ERR_INFO1_TSIZE_4_6,
           INT_CQ_ERR_INFO1_TSIZE_4_6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_ERR_INFO1_TSIZE_4_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ERR_INFO1_TSIZE_4_6]

//>> GET_[INT_CQ_ERR_INFO1_TSIZE_4_6]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_ERR_INFO1_TSIZE_4_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return i_data.extractToRight<INT_CQ_ERR_INFO1_TSIZE_4_6,
           INT_CQ_ERR_INFO1_TSIZE_4_6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_ERR_INFO1_TSIZE_4_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_ERR_INFO1_TSIZE_4_6]

//>> SET_[INT_CQ_ERR_INFO1_BAR_VEC_0_5]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ERR_INFO1_BAR_VEC_0_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.insertFromRight<INT_CQ_ERR_INFO1_BAR_VEC_0_5,
           INT_CQ_ERR_INFO1_BAR_VEC_0_5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_ERR_INFO1_BAR_VEC_0_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ERR_INFO1_BAR_VEC_0_5]

//>> SET_[INT_CQ_ERR_INFO1_BAR_VEC_0_5]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ERR_INFO1_BAR_VEC_0_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.insertFromRight<INT_CQ_ERR_INFO1_BAR_VEC_0_5,
           INT_CQ_ERR_INFO1_BAR_VEC_0_5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_ERR_INFO1_BAR_VEC_0_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ERR_INFO1_BAR_VEC_0_5]

//>> GET_[INT_CQ_ERR_INFO1_BAR_VEC_0_5]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_ERR_INFO1_BAR_VEC_0_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return i_data.extractToRight<INT_CQ_ERR_INFO1_BAR_VEC_0_5,
           INT_CQ_ERR_INFO1_BAR_VEC_0_5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_ERR_INFO1_BAR_VEC_0_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_ERR_INFO1_BAR_VEC_0_5]

//>> SET_[INT_CQ_ERR_INFO1_TTAG_0_14]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ERR_INFO1_TTAG_0_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.insertFromRight<INT_CQ_ERR_INFO1_TTAG_0_14,
           INT_CQ_ERR_INFO1_TTAG_0_14_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_ERR_INFO1_TTAG_0_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ERR_INFO1_TTAG_0_14]

//>> SET_[INT_CQ_ERR_INFO1_TTAG_0_14]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ERR_INFO1_TTAG_0_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.insertFromRight<INT_CQ_ERR_INFO1_TTAG_0_14,
           INT_CQ_ERR_INFO1_TTAG_0_14_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_ERR_INFO1_TTAG_0_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ERR_INFO1_TTAG_0_14]

//>> GET_[INT_CQ_ERR_INFO1_TTAG_0_14]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_ERR_INFO1_TTAG_0_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return i_data.extractToRight<INT_CQ_ERR_INFO1_TTAG_0_14,
           INT_CQ_ERR_INFO1_TTAG_0_14_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_ERR_INFO1_TTAG_0_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_ERR_INFO1_TTAG_0_14]

//>> SET_[INT_CQ_ERR_INFO1_ADDRESS_28_63]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ERR_INFO1_ADDRESS_28_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.insertFromRight<INT_CQ_ERR_INFO1_ADDRESS_28_63,
           INT_CQ_ERR_INFO1_ADDRESS_28_63_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_ERR_INFO1_ADDRESS_28_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ERR_INFO1_ADDRESS_28_63]

//>> SET_[INT_CQ_ERR_INFO1_ADDRESS_28_63]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_ERR_INFO1_ADDRESS_28_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return o_data.insertFromRight<INT_CQ_ERR_INFO1_ADDRESS_28_63,
           INT_CQ_ERR_INFO1_ADDRESS_28_63_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_ERR_INFO1_ADDRESS_28_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_ERR_INFO1_ADDRESS_28_63]

//>> GET_[INT_CQ_ERR_INFO1_ADDRESS_28_63]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_ERR_INFO1_ADDRESS_28_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_ERR_INFO1));
#endif
    return i_data.extractToRight<INT_CQ_ERR_INFO1_ADDRESS_28_63,
           INT_CQ_ERR_INFO1_ADDRESS_28_63_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_ERR_INFO1_ADDRESS_28_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_ERR_INFO1_ADDRESS_28_63]

//>> PREP_[INT_CQ_PGM_DBG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_PGM_DBG0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_PGM_DBG0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_CQ_PGM_DBG0]

//>> GET_[INT_CQ_PGM_DBG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_PGM_DBG0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_PGM_DBG0;
#endif
    return fapi2::getScom(i_target, INT_CQ_PGM_DBG0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_CQ_PGM_DBG0]

//>> PUT_[INT_CQ_PGM_DBG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_PGM_DBG0(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_PGM_DBG0));
#endif
    return fapi2::putScom(i_target, INT_CQ_PGM_DBG0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_CQ_PGM_DBG0]


//>> PREP_[INT_CQ_SWI_CMD2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_SWI_CMD2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_SWI_CMD2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_CQ_SWI_CMD2]

//>> GET_[INT_CQ_SWI_CMD2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_SWI_CMD2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_SWI_CMD2;
#endif
    return fapi2::getScom(i_target, INT_CQ_SWI_CMD2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_CQ_SWI_CMD2]

//>> PUT_[INT_CQ_SWI_CMD2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_SWI_CMD2(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_SWI_CMD2));
#endif
    return fapi2::putScom(i_target, INT_CQ_SWI_CMD2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_CQ_SWI_CMD2]


//>> PREP_[INT_CQ_TDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_TDR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_TDR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_CQ_TDR]

//>> GET_[INT_CQ_TDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_TDR(const fapi2::Target<K, M, V>& i_target, fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_TDR;
#endif
    return fapi2::getScom(i_target, INT_CQ_TDR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_CQ_TDR]

//>> PUT_[INT_CQ_TDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_TDR(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_TDR));
#endif
    return fapi2::putScom(i_target, INT_CQ_TDR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_CQ_TDR]


//>> PREP_[INT_PC_NXC_REGS_ERR_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_NXC_REGS_ERR_CFG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_ERR_CFG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_NXC_REGS_ERR_CFG1]

//>> GET_[INT_PC_NXC_REGS_ERR_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_NXC_REGS_ERR_CFG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_ERR_CFG1;
#endif
    return fapi2::getScom(i_target, INT_PC_NXC_REGS_ERR_CFG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ERR_CFG1]

//>> PUT_[INT_PC_NXC_REGS_ERR_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_NXC_REGS_ERR_CFG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ERR_CFG1));
#endif
    return fapi2::putScom(i_target, INT_PC_NXC_REGS_ERR_CFG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_NXC_REGS_ERR_CFG1]


//>> SET_[INT_PC_NXC_REGS_ERR_CFG1_INT_PC_NXC_ERR_CFG1_ERROR_CONFIG]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ERR_CFG1_INT_PC_NXC_ERR_CFG1_ERROR_CONFIG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ERR_CFG1));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ERR_CFG1_INT_PC_NXC_ERR_CFG1_ERROR_CONFIG,
           INT_PC_NXC_REGS_ERR_CFG1_INT_PC_NXC_ERR_CFG1_ERROR_CONFIG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ERR_CFG1_INT_PC_NXC_ERR_CFG1_ERROR_CONFIG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ERR_CFG1_INT_PC_NXC_ERR_CFG1_ERROR_CONFIG]

//>> SET_[INT_PC_NXC_REGS_ERR_CFG1_INT_PC_NXC_ERR_CFG1_ERROR_CONFIG]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ERR_CFG1_INT_PC_NXC_ERR_CFG1_ERROR_CONFIG(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ERR_CFG1));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ERR_CFG1_INT_PC_NXC_ERR_CFG1_ERROR_CONFIG,
           INT_PC_NXC_REGS_ERR_CFG1_INT_PC_NXC_ERR_CFG1_ERROR_CONFIG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ERR_CFG1_INT_PC_NXC_ERR_CFG1_ERROR_CONFIG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ERR_CFG1_INT_PC_NXC_ERR_CFG1_ERROR_CONFIG]

//>> GET_[INT_PC_NXC_REGS_ERR_CFG1_INT_PC_NXC_ERR_CFG1_ERROR_CONFIG]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ERR_CFG1_INT_PC_NXC_ERR_CFG1_ERROR_CONFIG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ERR_CFG1));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ERR_CFG1_INT_PC_NXC_ERR_CFG1_ERROR_CONFIG,
           INT_PC_NXC_REGS_ERR_CFG1_INT_PC_NXC_ERR_CFG1_ERROR_CONFIG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ERR_CFG1_INT_PC_NXC_ERR_CFG1_ERROR_CONFIG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ERR_CFG1_INT_PC_NXC_ERR_CFG1_ERROR_CONFIG]

//>> PREP_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD]

//>> GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD;
#endif
    return fapi2::getScom(i_target, INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD]

//>> PUT_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return fapi2::putScom(i_target, INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD]


//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_0_1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_0_1,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_0_1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_0_1]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_0_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_0_1,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_0_1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_0_1]

//>> GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_0_1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_0_1,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_0_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_0_1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_0_1]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CHKOUT_LOAD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CHKOUT_LOAD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CHKOUT_LOAD,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CHKOUT_LOAD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CHKOUT_LOAD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CHKOUT_LOAD]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CHKOUT_LOAD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CHKOUT_LOAD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CHKOUT_LOAD,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CHKOUT_LOAD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CHKOUT_LOAD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CHKOUT_LOAD]

//>> GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CHKOUT_LOAD]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CHKOUT_LOAD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CHKOUT_LOAD,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CHKOUT_LOAD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CHKOUT_LOAD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CHKOUT_LOAD]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_8_9]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_8_9(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_8_9,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_8_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_8_9 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_8_9]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_8_9]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_8_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_8_9,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_8_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_8_9 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_8_9]

//>> GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_8_9]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_8_9(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_8_9,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_8_9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_8_9 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_8_9]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_LCL_VC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_LCL_VC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_LCL_VC,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_LCL_VC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_LCL_VC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_LCL_VC]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_LCL_VC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_LCL_VC(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_LCL_VC,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_LCL_VC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_LCL_VC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_LCL_VC]

//>> GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_LCL_VC]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_LCL_VC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_LCL_VC,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_LCL_VC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_LCL_VC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_LCL_VC]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_16_17]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_16_17(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_16_17,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_16_17_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_16_17 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_16_17]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_16_17]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_16_17(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_16_17,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_16_17_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_16_17 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_16_17]

//>> GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_16_17]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_16_17(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_16_17,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_16_17_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_16_17 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_16_17]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_VC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_VC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_VC,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_VC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_VC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_VC]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_VC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_VC(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_VC,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_VC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_VC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_VC]

//>> GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_VC]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_VC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_VC,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_VC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_VC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_VC]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_24_25]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_24_25(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_24_25,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_24_25_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_24_25 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_24_25]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_24_25]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_24_25(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_24_25,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_24_25_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_24_25 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_24_25]

//>> GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_24_25]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_24_25(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_24_25,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_24_25_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_24_25 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_24_25]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_PC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_PC,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_PC]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_PC(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_PC,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_PC]

//>> GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_PC]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_PC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_PC,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_PC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_PC]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_32_33(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_32_33,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_32_33 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_32_33]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_32_33(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_32_33,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_32_33 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_32_33]

//>> GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_32_33(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_32_33,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_32_33_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_32_33 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_32_33]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_VC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_VC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_VC,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_VC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_VC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_VC]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_VC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_VC(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_VC,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_VC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_VC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_VC]

//>> GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_VC]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_VC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_VC,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_VC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_VC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_STORE_RMT_VC]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_40_41(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_40_41,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_40_41_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_40_41 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_40_41]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_40_41(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_40_41,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_40_41_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_40_41 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_40_41]

//>> GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_40_41(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_40_41,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_40_41_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_40_41 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_40_41]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_PC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_PC,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_PC]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_PC(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_PC,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_PC]

//>> GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_PC]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_PC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_PC,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_PC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_CI_LOAD_RMT_PC]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_48_49]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_48_49(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_48_49,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_48_49_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_48_49 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_48_49]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_48_49]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_48_49(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_48_49,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_48_49_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_48_49 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_48_49]

//>> GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_48_49]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_48_49(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_48_49,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_48_49_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_48_49 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_48_49]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_READ]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_READ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_READ,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_READ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_READ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_READ]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_READ]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_READ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_READ,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_READ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_READ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_READ]

//>> GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_READ]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_READ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_READ,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_READ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_READ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_READ]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_56_57]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_56_57(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_56_57,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_56_57_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_56_57 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_56_57]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_56_57]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_56_57(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_56_57,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_56_57_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_56_57 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_56_57]

//>> GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_56_57]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_56_57(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_56_57,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_56_57_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_56_57 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_RESERVED_56_57]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_WRITE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_WRITE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_WRITE,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_WRITE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_WRITE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_WRITE]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_WRITE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_WRITE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_WRITE,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_WRITE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_WRITE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_WRITE]

//>> GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_WRITE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_WRITE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_WRITE,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_WRITE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_WRITE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD_NVX_DMA_WRITE]

//>> PREP_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2]

//>> GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2;
#endif
    return fapi2::getScom(i_target, INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2]

//>> PUT_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2));
#endif
    return fapi2::putScom(i_target, INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2]


//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_0_1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_0_1,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_0_1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_0_1]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_0_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_0_1,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_0_1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_0_1]

//>> GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_0_1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_0_1,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_0_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_0_1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_0_1]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKI_STORE_RMT_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKI_STORE_RMT_PC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKI_STORE_RMT_PC,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKI_STORE_RMT_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKI_STORE_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKI_STORE_RMT_PC]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKI_STORE_RMT_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKI_STORE_RMT_PC(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKI_STORE_RMT_PC,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKI_STORE_RMT_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKI_STORE_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKI_STORE_RMT_PC]

//>> GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKI_STORE_RMT_PC]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKI_STORE_RMT_PC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKI_STORE_RMT_PC,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKI_STORE_RMT_PC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKI_STORE_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKI_STORE_RMT_PC]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_8_9]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_8_9(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_8_9,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_8_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_8_9 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_8_9]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_8_9]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_8_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_8_9,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_8_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_8_9 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_8_9]

//>> GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_8_9]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_8_9(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_8_9,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_8_9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_8_9 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_RESERVED_8_9]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKO_LOAD_RMT_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKO_LOAD_RMT_PC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKO_LOAD_RMT_PC,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKO_LOAD_RMT_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKO_LOAD_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKO_LOAD_RMT_PC]

//>> SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKO_LOAD_RMT_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKO_LOAD_RMT_PC(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKO_LOAD_RMT_PC,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKO_LOAD_RMT_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKO_LOAD_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKO_LOAD_RMT_PC]

//>> GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKO_LOAD_RMT_PC]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKO_LOAD_RMT_PC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKO_LOAD_RMT_PC,
           INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKO_LOAD_RMT_PC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKO_LOAD_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_MAX_OUTSTANDING_OUTB_CMD2_CI_CHKO_LOAD_RMT_PC]

//>> PREP_[INT_PC_NXC_REGS_WATCH1_DATA2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_NXC_REGS_WATCH1_DATA2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WATCH1_DATA2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_NXC_REGS_WATCH1_DATA2]

//>> GET_[INT_PC_NXC_REGS_WATCH1_DATA2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_NXC_REGS_WATCH1_DATA2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WATCH1_DATA2;
#endif
    return fapi2::getScom(i_target, INT_PC_NXC_REGS_WATCH1_DATA2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WATCH1_DATA2]

//>> PUT_[INT_PC_NXC_REGS_WATCH1_DATA2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_NXC_REGS_WATCH1_DATA2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WATCH1_DATA2));
#endif
    return fapi2::putScom(i_target, INT_PC_NXC_REGS_WATCH1_DATA2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_NXC_REGS_WATCH1_DATA2]


//>> PREP_[INT_PC_REGS_NRQ_NXC_ARB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_NRQ_NXC_ARB(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_NRQ_NXC_ARB;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_NRQ_NXC_ARB]

//>> GET_[INT_PC_REGS_NRQ_NXC_ARB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_NRQ_NXC_ARB(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_NRQ_NXC_ARB;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_NRQ_NXC_ARB, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_ARB]

//>> PUT_[INT_PC_REGS_NRQ_NXC_ARB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_NRQ_NXC_ARB(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_NRQ_NXC_ARB, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_NRQ_NXC_ARB]


//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.setBit<INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0]

//>> CLEAR_[INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.clearBit<INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0]

//>> GET_[INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0]

//>> GET_[INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0]
static inline bool GET_INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return i_data.getBit<INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_ARB_RESERVED_0]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RSVD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RSVD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RSVD,
           INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RSVD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RSVD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RSVD]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RSVD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RSVD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RSVD,
           INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RSVD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RSVD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RSVD]

//>> GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RSVD]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RSVD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RSVD,
           INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RSVD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RSVD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RSVD]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.setBit<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD]

//>> CLEAR_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.clearBit<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD]

//>> GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD]

//>> GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD]
static inline bool GET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return i_data.getBit<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKO_LD]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKO_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKO_LD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKO_LD,
           INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKO_LD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKO_LD]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKO_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKO_LD(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKO_LD,
           INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKO_LD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKO_LD]

//>> GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKO_LD]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKO_LD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKO_LD,
           INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKO_LD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKO_LD]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.setBit<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD]

//>> CLEAR_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.clearBit<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD]

//>> GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD]

//>> GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD]
static inline bool GET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return i_data.getBit<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKO_LD]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKO_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKO_LD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKO_LD,
           INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKO_LD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKO_LD]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKO_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKO_LD(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKO_LD,
           INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKO_LD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKO_LD]

//>> GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKO_LD]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKO_LD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKO_LD,
           INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKO_LD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKO_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKO_LD]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.setBit<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST]

//>> CLEAR_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.clearBit<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST]

//>> GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST]

//>> GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST]
static inline bool GET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return i_data.getBit<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_NCKI_ST]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKI_ST,
           INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKI_ST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKI_ST]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKI_ST(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKI_ST,
           INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKI_ST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKI_ST]

//>> GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKI_ST]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKI_ST,
           INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKI_ST_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_NCKI_ST]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.setBit<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST]

//>> CLEAR_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.clearBit<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST]

//>> GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST]

//>> GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST]
static inline bool GET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return i_data.getBit<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_LCL_CHKI_ST]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKI_ST,
           INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKI_ST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKI_ST]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKI_ST(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKI_ST,
           INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKI_ST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKI_ST]

//>> GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKI_ST]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKI_ST,
           INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKI_ST_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_LCL_CHKI_ST]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.setBit<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST]

//>> CLEAR_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.clearBit<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST]

//>> GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST]

//>> GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST]
static inline bool GET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return i_data.getBit<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_NCKI_ST]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_NCKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_NCKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_NCKI_ST,
           INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_NCKI_ST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_NCKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_NCKI_ST]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_NCKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_NCKI_ST(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_NCKI_ST,
           INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_NCKI_ST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_NCKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_NCKI_ST]

//>> GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_NCKI_ST]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_NCKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_NCKI_ST,
           INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_NCKI_ST_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_NCKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_NCKI_ST]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.setBit<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST]

//>> CLEAR_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.clearBit<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST]

//>> GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST]

//>> GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST]
static inline bool GET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return i_data.getBit<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_STALL_RMT_CHKI_ST]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_CHKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_CHKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_CHKI_ST,
           INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_CHKI_ST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_CHKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_CHKI_ST]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_CHKI_ST]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_CHKI_ST(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_CHKI_ST,
           INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_CHKI_ST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_CHKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_CHKI_ST]

//>> GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_CHKI_ST]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_CHKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_CHKI_ST,
           INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_CHKI_ST_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_CHKI_ST chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_ARB_CFG_NRQ_NXC_ARB_PRIO_RMT_CHKI_ST]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_RESERVED_28_31]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_RESERVED_28_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_RESERVED_28_31,
           INT_PC_REGS_NRQ_NXC_ARB_RESERVED_28_31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_RESERVED_28_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_RESERVED_28_31]

//>> SET_[INT_PC_REGS_NRQ_NXC_ARB_RESERVED_28_31]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_NXC_ARB_RESERVED_28_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_NXC_ARB_RESERVED_28_31,
           INT_PC_REGS_NRQ_NXC_ARB_RESERVED_28_31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_RESERVED_28_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_NRQ_NXC_ARB_RESERVED_28_31]

//>> GET_[INT_PC_REGS_NRQ_NXC_ARB_RESERVED_28_31]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_NXC_ARB_RESERVED_28_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_NXC_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_NXC_ARB_RESERVED_28_31,
           INT_PC_REGS_NRQ_NXC_ARB_RESERVED_28_31_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_NRQ_NXC_ARB_RESERVED_28_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_NRQ_NXC_ARB_RESERVED_28_31]

//>> PREP_[INT_PC_REGS_VSD_TABLE_ADDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_VSD_TABLE_ADDR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_VSD_TABLE_ADDR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_VSD_TABLE_ADDR]

//>> GET_[INT_PC_REGS_VSD_TABLE_ADDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_VSD_TABLE_ADDR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_VSD_TABLE_ADDR;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_VSD_TABLE_ADDR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_VSD_TABLE_ADDR]

//>> PUT_[INT_PC_REGS_VSD_TABLE_ADDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_VSD_TABLE_ADDR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_VSD_TABLE_ADDR));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_VSD_TABLE_ADDR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_VSD_TABLE_ADDR]


//>> SET_[INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_VSD_TABLE_ADDR));
#endif
    return o_data.insertFromRight<INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT]

//>> SET_[INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_VSD_TABLE_ADDR));
#endif
    return o_data.insertFromRight<INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT]

//>> SET_[INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_VSD_TABLE_ADDR));
#endif
    return o_data.setBit<INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT]

//>> CLEAR_[INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_VSD_TABLE_ADDR));
#endif
    return o_data.clearBit<INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT]

//>> GET_[INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_VSD_TABLE_ADDR));
#endif
    return i_data.extractToRight<INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT]

//>> GET_[INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT]
static inline bool GET_INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_VSD_TABLE_ADDR));
#endif
    return i_data.getBit<INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_VSD_TABLE_ADDR_AUTO_INCREMENT]

//>> SET_[INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_1_3]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_1_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_VSD_TABLE_ADDR));
#endif
    return o_data.insertFromRight<INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_1_3,
           INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_1_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_1_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_1_3]

//>> SET_[INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_1_3]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_1_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_VSD_TABLE_ADDR));
#endif
    return o_data.insertFromRight<INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_1_3,
           INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_1_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_1_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_1_3]

//>> GET_[INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_1_3]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_1_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_VSD_TABLE_ADDR));
#endif
    return i_data.extractToRight<INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_1_3,
           INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_1_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_1_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_1_3]

//>> SET_[INT_PC_REGS_VSD_TABLE_ADDR_TABLE_SELECT]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_VSD_TABLE_ADDR_TABLE_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_VSD_TABLE_ADDR));
#endif
    return o_data.insertFromRight<INT_PC_REGS_VSD_TABLE_ADDR_TABLE_SELECT,
           INT_PC_REGS_VSD_TABLE_ADDR_TABLE_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_VSD_TABLE_ADDR_TABLE_SELECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_VSD_TABLE_ADDR_TABLE_SELECT]

//>> SET_[INT_PC_REGS_VSD_TABLE_ADDR_TABLE_SELECT]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_VSD_TABLE_ADDR_TABLE_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_VSD_TABLE_ADDR));
#endif
    return o_data.insertFromRight<INT_PC_REGS_VSD_TABLE_ADDR_TABLE_SELECT,
           INT_PC_REGS_VSD_TABLE_ADDR_TABLE_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_VSD_TABLE_ADDR_TABLE_SELECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_VSD_TABLE_ADDR_TABLE_SELECT]

//>> GET_[INT_PC_REGS_VSD_TABLE_ADDR_TABLE_SELECT]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_VSD_TABLE_ADDR_TABLE_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_VSD_TABLE_ADDR));
#endif
    return i_data.extractToRight<INT_PC_REGS_VSD_TABLE_ADDR_TABLE_SELECT,
           INT_PC_REGS_VSD_TABLE_ADDR_TABLE_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_VSD_TABLE_ADDR_TABLE_SELECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_VSD_TABLE_ADDR_TABLE_SELECT]

//>> SET_[INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_24_27]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_24_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_VSD_TABLE_ADDR));
#endif
    return o_data.insertFromRight<INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_24_27,
           INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_24_27_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_24_27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_24_27]

//>> SET_[INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_24_27]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_24_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_VSD_TABLE_ADDR));
#endif
    return o_data.insertFromRight<INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_24_27,
           INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_24_27_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_24_27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_24_27]

//>> GET_[INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_24_27]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_24_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_VSD_TABLE_ADDR));
#endif
    return i_data.extractToRight<INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_24_27,
           INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_24_27_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_24_27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_VSD_TABLE_ADDR_RESERVED_24_27]

//>> SET_[INT_PC_REGS_VSD_TABLE_ADDR_TABLE_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_VSD_TABLE_ADDR_TABLE_ADDRESS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_VSD_TABLE_ADDR));
#endif
    return o_data.insertFromRight<INT_PC_REGS_VSD_TABLE_ADDR_TABLE_ADDRESS,
           INT_PC_REGS_VSD_TABLE_ADDR_TABLE_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_VSD_TABLE_ADDR_TABLE_ADDRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_VSD_TABLE_ADDR_TABLE_ADDRESS]

//>> SET_[INT_PC_REGS_VSD_TABLE_ADDR_TABLE_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_VSD_TABLE_ADDR_TABLE_ADDRESS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_VSD_TABLE_ADDR));
#endif
    return o_data.insertFromRight<INT_PC_REGS_VSD_TABLE_ADDR_TABLE_ADDRESS,
           INT_PC_REGS_VSD_TABLE_ADDR_TABLE_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_VSD_TABLE_ADDR_TABLE_ADDRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_VSD_TABLE_ADDR_TABLE_ADDRESS]

//>> GET_[INT_PC_REGS_VSD_TABLE_ADDR_TABLE_ADDRESS]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_VSD_TABLE_ADDR_TABLE_ADDRESS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_VSD_TABLE_ADDR));
#endif
    return i_data.extractToRight<INT_PC_REGS_VSD_TABLE_ADDR_TABLE_ADDRESS,
           INT_PC_REGS_VSD_TABLE_ADDR_TABLE_ADDRESS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_VSD_TABLE_ADDR_TABLE_ADDRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_VSD_TABLE_ADDR_TABLE_ADDRESS]

//>> PREP_[INT_PC_REGS_TCTXT_LSI_SET_10]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_TCTXT_LSI_SET_10(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_TCTXT_LSI_SET_10;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_TCTXT_LSI_SET_10]

//>> GET_[INT_PC_REGS_TCTXT_LSI_SET_10]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_TCTXT_LSI_SET_10(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_TCTXT_LSI_SET_10;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_TCTXT_LSI_SET_10, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_TCTXT_LSI_SET_10]

//>> PUT_[INT_PC_REGS_TCTXT_LSI_SET_10]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_TCTXT_LSI_SET_10(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_LSI_SET_10));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_TCTXT_LSI_SET_10, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_TCTXT_LSI_SET_10]


//>> PREP_[INT_VC_ATX_PERF_EVENT_SEL_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ATX_PERF_EVENT_SEL_2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ATX_PERF_EVENT_SEL_2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ATX_PERF_EVENT_SEL_2]

//>> GET_[INT_VC_ATX_PERF_EVENT_SEL_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ATX_PERF_EVENT_SEL_2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ATX_PERF_EVENT_SEL_2;
#endif
    return fapi2::getScom(i_target, INT_VC_ATX_PERF_EVENT_SEL_2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ATX_PERF_EVENT_SEL_2]

//>> PUT_[INT_VC_ATX_PERF_EVENT_SEL_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ATX_PERF_EVENT_SEL_2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return fapi2::putScom(i_target, INT_VC_ATX_PERF_EVENT_SEL_2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ATX_PERF_EVENT_SEL_2]


//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_0]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_0,
           INT_VC_ATX_PERF_EVENT_SEL_2_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_0]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_0]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_0,
           INT_VC_ATX_PERF_EVENT_SEL_2_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_0]

//>> GET_[INT_VC_ATX_PERF_EVENT_SEL_2_0]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_PERF_EVENT_SEL_2_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_ATX_PERF_EVENT_SEL_2_0,
           INT_VC_ATX_PERF_EVENT_SEL_2_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_PERF_EVENT_SEL_2_0]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_1R]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_1R(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_1R,
           INT_VC_ATX_PERF_EVENT_SEL_2_1R_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_1R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_1R]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_1R]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_1R(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_1R,
           INT_VC_ATX_PERF_EVENT_SEL_2_1R_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_1R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_1R]

//>> GET_[INT_VC_ATX_PERF_EVENT_SEL_2_1R]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_PERF_EVENT_SEL_2_1R(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_ATX_PERF_EVENT_SEL_2_1R,
           INT_VC_ATX_PERF_EVENT_SEL_2_1R_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_1R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_PERF_EVENT_SEL_2_1R]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_1W]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_1W(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_1W,
           INT_VC_ATX_PERF_EVENT_SEL_2_1W_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_1W chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_1W]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_1W]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_1W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_1W,
           INT_VC_ATX_PERF_EVENT_SEL_2_1W_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_1W chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_1W]

//>> GET_[INT_VC_ATX_PERF_EVENT_SEL_2_1W]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_PERF_EVENT_SEL_2_1W(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_ATX_PERF_EVENT_SEL_2_1W,
           INT_VC_ATX_PERF_EVENT_SEL_2_1W_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_1W chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_PERF_EVENT_SEL_2_1W]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_2]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_2,
           INT_VC_ATX_PERF_EVENT_SEL_2_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_2]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_2]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_2,
           INT_VC_ATX_PERF_EVENT_SEL_2_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_2]

//>> GET_[INT_VC_ATX_PERF_EVENT_SEL_2_2]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_PERF_EVENT_SEL_2_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_ATX_PERF_EVENT_SEL_2_2,
           INT_VC_ATX_PERF_EVENT_SEL_2_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_PERF_EVENT_SEL_2_2]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_3]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_3,
           INT_VC_ATX_PERF_EVENT_SEL_2_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_3]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_3]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_3,
           INT_VC_ATX_PERF_EVENT_SEL_2_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_3]

//>> GET_[INT_VC_ATX_PERF_EVENT_SEL_2_3]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_PERF_EVENT_SEL_2_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_ATX_PERF_EVENT_SEL_2_3,
           INT_VC_ATX_PERF_EVENT_SEL_2_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_PERF_EVENT_SEL_2_3]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_4]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_4,
           INT_VC_ATX_PERF_EVENT_SEL_2_4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_4]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_4]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_4,
           INT_VC_ATX_PERF_EVENT_SEL_2_4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_4]

//>> GET_[INT_VC_ATX_PERF_EVENT_SEL_2_4]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_PERF_EVENT_SEL_2_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_ATX_PERF_EVENT_SEL_2_4,
           INT_VC_ATX_PERF_EVENT_SEL_2_4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_PERF_EVENT_SEL_2_4]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_5R]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_5R(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_5R,
           INT_VC_ATX_PERF_EVENT_SEL_2_5R_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_5R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_5R]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_5R]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_5R(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_5R,
           INT_VC_ATX_PERF_EVENT_SEL_2_5R_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_5R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_5R]

//>> GET_[INT_VC_ATX_PERF_EVENT_SEL_2_5R]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_PERF_EVENT_SEL_2_5R(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_ATX_PERF_EVENT_SEL_2_5R,
           INT_VC_ATX_PERF_EVENT_SEL_2_5R_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_5R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_PERF_EVENT_SEL_2_5R]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_5W]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_5W(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_5W,
           INT_VC_ATX_PERF_EVENT_SEL_2_5W_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_5W chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_5W]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_5W]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_5W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_5W,
           INT_VC_ATX_PERF_EVENT_SEL_2_5W_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_5W chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_5W]

//>> GET_[INT_VC_ATX_PERF_EVENT_SEL_2_5W]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_PERF_EVENT_SEL_2_5W(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_ATX_PERF_EVENT_SEL_2_5W,
           INT_VC_ATX_PERF_EVENT_SEL_2_5W_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_5W chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_PERF_EVENT_SEL_2_5W]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_6]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_6,
           INT_VC_ATX_PERF_EVENT_SEL_2_6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_6]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_6]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_6,
           INT_VC_ATX_PERF_EVENT_SEL_2_6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_6]

//>> GET_[INT_VC_ATX_PERF_EVENT_SEL_2_6]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_PERF_EVENT_SEL_2_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_ATX_PERF_EVENT_SEL_2_6,
           INT_VC_ATX_PERF_EVENT_SEL_2_6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_PERF_EVENT_SEL_2_6]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_7RSP]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_7RSP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_7RSP,
           INT_VC_ATX_PERF_EVENT_SEL_2_7RSP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_7RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_7RSP]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_7RSP]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_7RSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_7RSP,
           INT_VC_ATX_PERF_EVENT_SEL_2_7RSP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_7RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_7RSP]

//>> GET_[INT_VC_ATX_PERF_EVENT_SEL_2_7RSP]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_PERF_EVENT_SEL_2_7RSP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_ATX_PERF_EVENT_SEL_2_7RSP,
           INT_VC_ATX_PERF_EVENT_SEL_2_7RSP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_7RSP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_PERF_EVENT_SEL_2_7RSP]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_7INT]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_7INT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_7INT,
           INT_VC_ATX_PERF_EVENT_SEL_2_7INT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_7INT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_7INT]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_7INT]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_7INT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_7INT,
           INT_VC_ATX_PERF_EVENT_SEL_2_7INT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_7INT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_7INT]

//>> GET_[INT_VC_ATX_PERF_EVENT_SEL_2_7INT]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_PERF_EVENT_SEL_2_7INT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_ATX_PERF_EVENT_SEL_2_7INT,
           INT_VC_ATX_PERF_EVENT_SEL_2_7INT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_7INT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_PERF_EVENT_SEL_2_7INT]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_7EQP]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_7EQP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_7EQP,
           INT_VC_ATX_PERF_EVENT_SEL_2_7EQP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_7EQP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_7EQP]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_7EQP]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_7EQP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_7EQP,
           INT_VC_ATX_PERF_EVENT_SEL_2_7EQP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_7EQP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_7EQP]

//>> GET_[INT_VC_ATX_PERF_EVENT_SEL_2_7EQP]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_PERF_EVENT_SEL_2_7EQP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_ATX_PERF_EVENT_SEL_2_7EQP,
           INT_VC_ATX_PERF_EVENT_SEL_2_7EQP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_7EQP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_PERF_EVENT_SEL_2_7EQP]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_8]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_8,
           INT_VC_ATX_PERF_EVENT_SEL_2_8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_8]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_8]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_8,
           INT_VC_ATX_PERF_EVENT_SEL_2_8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_8]

//>> GET_[INT_VC_ATX_PERF_EVENT_SEL_2_8]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_PERF_EVENT_SEL_2_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_ATX_PERF_EVENT_SEL_2_8,
           INT_VC_ATX_PERF_EVENT_SEL_2_8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_PERF_EVENT_SEL_2_8]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_9]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_9,
           INT_VC_ATX_PERF_EVENT_SEL_2_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_9]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_9]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_9,
           INT_VC_ATX_PERF_EVENT_SEL_2_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_9]

//>> GET_[INT_VC_ATX_PERF_EVENT_SEL_2_9]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_PERF_EVENT_SEL_2_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_ATX_PERF_EVENT_SEL_2_9,
           INT_VC_ATX_PERF_EVENT_SEL_2_9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_PERF_EVENT_SEL_2_9]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_10R]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_10R(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_10R,
           INT_VC_ATX_PERF_EVENT_SEL_2_10R_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_10R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_10R]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_10R]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_10R(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_10R,
           INT_VC_ATX_PERF_EVENT_SEL_2_10R_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_10R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_10R]

//>> GET_[INT_VC_ATX_PERF_EVENT_SEL_2_10R]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_PERF_EVENT_SEL_2_10R(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_ATX_PERF_EVENT_SEL_2_10R,
           INT_VC_ATX_PERF_EVENT_SEL_2_10R_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_10R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_PERF_EVENT_SEL_2_10R]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_10W]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_10W(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_10W,
           INT_VC_ATX_PERF_EVENT_SEL_2_10W_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_10W chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_10W]

//>> SET_[INT_VC_ATX_PERF_EVENT_SEL_2_10W]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ATX_PERF_EVENT_SEL_2_10W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_ATX_PERF_EVENT_SEL_2_10W,
           INT_VC_ATX_PERF_EVENT_SEL_2_10W_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_10W chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ATX_PERF_EVENT_SEL_2_10W]

//>> GET_[INT_VC_ATX_PERF_EVENT_SEL_2_10W]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ATX_PERF_EVENT_SEL_2_10W(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ATX_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_ATX_PERF_EVENT_SEL_2_10W,
           INT_VC_ATX_PERF_EVENT_SEL_2_10W_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ATX_PERF_EVENT_SEL_2_10W chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ATX_PERF_EVENT_SEL_2_10W]

//>> PREP_[INT_VC_AT_MACRO_KILL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_AT_MACRO_KILL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_AT_MACRO_KILL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_AT_MACRO_KILL]

//>> GET_[INT_VC_AT_MACRO_KILL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_AT_MACRO_KILL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_AT_MACRO_KILL;
#endif
    return fapi2::getScom(i_target, INT_VC_AT_MACRO_KILL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_AT_MACRO_KILL]

//>> PUT_[INT_VC_AT_MACRO_KILL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_AT_MACRO_KILL(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL));
#endif
    return fapi2::putScom(i_target, INT_VC_AT_MACRO_KILL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_AT_MACRO_KILL]


//>> SET_[INT_VC_AT_MACRO_KILL_VALID]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AT_MACRO_KILL_VALID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL));
#endif
    return o_data.insertFromRight<INT_VC_AT_MACRO_KILL_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AT_MACRO_KILL_VALID]

//>> SET_[INT_VC_AT_MACRO_KILL_VALID]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AT_MACRO_KILL_VALID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL));
#endif
    return o_data.insertFromRight<INT_VC_AT_MACRO_KILL_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AT_MACRO_KILL_VALID]

//>> SET_[INT_VC_AT_MACRO_KILL_VALID]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AT_MACRO_KILL_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL));
#endif
    return o_data.setBit<INT_VC_AT_MACRO_KILL_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AT_MACRO_KILL_VALID]

//>> CLEAR_[INT_VC_AT_MACRO_KILL_VALID]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_AT_MACRO_KILL_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL));
#endif
    return o_data.clearBit<INT_VC_AT_MACRO_KILL_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_AT_MACRO_KILL_VALID]

//>> GET_[INT_VC_AT_MACRO_KILL_VALID]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AT_MACRO_KILL_VALID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL));
#endif
    return i_data.extractToRight<INT_VC_AT_MACRO_KILL_VALID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AT_MACRO_KILL_VALID]

//>> GET_[INT_VC_AT_MACRO_KILL_VALID]
static inline bool GET_INT_VC_AT_MACRO_KILL_VALID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL));
#endif
    return i_data.getBit<INT_VC_AT_MACRO_KILL_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AT_MACRO_KILL_VALID]

//>> SET_[INT_VC_AT_MACRO_KILL_VSD_TYPE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AT_MACRO_KILL_VSD_TYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL));
#endif
    return o_data.insertFromRight<INT_VC_AT_MACRO_KILL_VSD_TYPE,
           INT_VC_AT_MACRO_KILL_VSD_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_VSD_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AT_MACRO_KILL_VSD_TYPE]

//>> SET_[INT_VC_AT_MACRO_KILL_VSD_TYPE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AT_MACRO_KILL_VSD_TYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL));
#endif
    return o_data.insertFromRight<INT_VC_AT_MACRO_KILL_VSD_TYPE,
           INT_VC_AT_MACRO_KILL_VSD_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_VSD_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AT_MACRO_KILL_VSD_TYPE]

//>> GET_[INT_VC_AT_MACRO_KILL_VSD_TYPE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AT_MACRO_KILL_VSD_TYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL));
#endif
    return i_data.extractToRight<INT_VC_AT_MACRO_KILL_VSD_TYPE,
           INT_VC_AT_MACRO_KILL_VSD_TYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_VSD_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AT_MACRO_KILL_VSD_TYPE]

//>> SET_[INT_VC_AT_MACRO_KILL_BLOCKID]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AT_MACRO_KILL_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL));
#endif
    return o_data.insertFromRight<INT_VC_AT_MACRO_KILL_BLOCKID,
           INT_VC_AT_MACRO_KILL_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AT_MACRO_KILL_BLOCKID]

//>> SET_[INT_VC_AT_MACRO_KILL_BLOCKID]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AT_MACRO_KILL_BLOCKID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL));
#endif
    return o_data.insertFromRight<INT_VC_AT_MACRO_KILL_BLOCKID,
           INT_VC_AT_MACRO_KILL_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AT_MACRO_KILL_BLOCKID]

//>> GET_[INT_VC_AT_MACRO_KILL_BLOCKID]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AT_MACRO_KILL_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL));
#endif
    return i_data.extractToRight<INT_VC_AT_MACRO_KILL_BLOCKID,
           INT_VC_AT_MACRO_KILL_BLOCKID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AT_MACRO_KILL_BLOCKID]

//>> SET_[INT_VC_AT_MACRO_KILL_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AT_MACRO_KILL_OFFSET(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL));
#endif
    return o_data.insertFromRight<INT_VC_AT_MACRO_KILL_OFFSET,
           INT_VC_AT_MACRO_KILL_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AT_MACRO_KILL_OFFSET]

//>> SET_[INT_VC_AT_MACRO_KILL_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AT_MACRO_KILL_OFFSET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL));
#endif
    return o_data.insertFromRight<INT_VC_AT_MACRO_KILL_OFFSET,
           INT_VC_AT_MACRO_KILL_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AT_MACRO_KILL_OFFSET]

//>> GET_[INT_VC_AT_MACRO_KILL_OFFSET]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AT_MACRO_KILL_OFFSET(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL));
#endif
    return i_data.extractToRight<INT_VC_AT_MACRO_KILL_OFFSET,
           INT_VC_AT_MACRO_KILL_OFFSET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AT_MACRO_KILL_OFFSET]

//>> PREP_[INT_VC_AT_MACRO_KILL_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_AT_MACRO_KILL_MASK(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_AT_MACRO_KILL_MASK;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_AT_MACRO_KILL_MASK]

//>> GET_[INT_VC_AT_MACRO_KILL_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_AT_MACRO_KILL_MASK(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_AT_MACRO_KILL_MASK;
#endif
    return fapi2::getScom(i_target, INT_VC_AT_MACRO_KILL_MASK, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_AT_MACRO_KILL_MASK]

//>> PUT_[INT_VC_AT_MACRO_KILL_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_AT_MACRO_KILL_MASK(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL_MASK));
#endif
    return fapi2::putScom(i_target, INT_VC_AT_MACRO_KILL_MASK, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_AT_MACRO_KILL_MASK]


//>> SET_[INT_VC_AT_MACRO_KILL_MASK_VSD_TYPE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AT_MACRO_KILL_MASK_VSD_TYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL_MASK));
#endif
    return o_data.insertFromRight<INT_VC_AT_MACRO_KILL_MASK_VSD_TYPE,
           INT_VC_AT_MACRO_KILL_MASK_VSD_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_MASK_VSD_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AT_MACRO_KILL_MASK_VSD_TYPE]

//>> SET_[INT_VC_AT_MACRO_KILL_MASK_VSD_TYPE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AT_MACRO_KILL_MASK_VSD_TYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL_MASK));
#endif
    return o_data.insertFromRight<INT_VC_AT_MACRO_KILL_MASK_VSD_TYPE,
           INT_VC_AT_MACRO_KILL_MASK_VSD_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_MASK_VSD_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AT_MACRO_KILL_MASK_VSD_TYPE]

//>> GET_[INT_VC_AT_MACRO_KILL_MASK_VSD_TYPE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AT_MACRO_KILL_MASK_VSD_TYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL_MASK));
#endif
    return i_data.extractToRight<INT_VC_AT_MACRO_KILL_MASK_VSD_TYPE,
           INT_VC_AT_MACRO_KILL_MASK_VSD_TYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_MASK_VSD_TYPE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AT_MACRO_KILL_MASK_VSD_TYPE]

//>> SET_[INT_VC_AT_MACRO_KILL_MASK_BLOCKID]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AT_MACRO_KILL_MASK_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL_MASK));
#endif
    return o_data.insertFromRight<INT_VC_AT_MACRO_KILL_MASK_BLOCKID,
           INT_VC_AT_MACRO_KILL_MASK_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_MASK_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AT_MACRO_KILL_MASK_BLOCKID]

//>> SET_[INT_VC_AT_MACRO_KILL_MASK_BLOCKID]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AT_MACRO_KILL_MASK_BLOCKID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL_MASK));
#endif
    return o_data.insertFromRight<INT_VC_AT_MACRO_KILL_MASK_BLOCKID,
           INT_VC_AT_MACRO_KILL_MASK_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_MASK_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AT_MACRO_KILL_MASK_BLOCKID]

//>> GET_[INT_VC_AT_MACRO_KILL_MASK_BLOCKID]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AT_MACRO_KILL_MASK_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL_MASK));
#endif
    return i_data.extractToRight<INT_VC_AT_MACRO_KILL_MASK_BLOCKID,
           INT_VC_AT_MACRO_KILL_MASK_BLOCKID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_MASK_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AT_MACRO_KILL_MASK_BLOCKID]

//>> SET_[INT_VC_AT_MACRO_KILL_MASK_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AT_MACRO_KILL_MASK_OFFSET(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL_MASK));
#endif
    return o_data.insertFromRight<INT_VC_AT_MACRO_KILL_MASK_OFFSET,
           INT_VC_AT_MACRO_KILL_MASK_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_MASK_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AT_MACRO_KILL_MASK_OFFSET]

//>> SET_[INT_VC_AT_MACRO_KILL_MASK_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AT_MACRO_KILL_MASK_OFFSET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL_MASK));
#endif
    return o_data.insertFromRight<INT_VC_AT_MACRO_KILL_MASK_OFFSET,
           INT_VC_AT_MACRO_KILL_MASK_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_MASK_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AT_MACRO_KILL_MASK_OFFSET]

//>> GET_[INT_VC_AT_MACRO_KILL_MASK_OFFSET]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AT_MACRO_KILL_MASK_OFFSET(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AT_MACRO_KILL_MASK));
#endif
    return i_data.extractToRight<INT_VC_AT_MACRO_KILL_MASK_OFFSET,
           INT_VC_AT_MACRO_KILL_MASK_OFFSET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AT_MACRO_KILL_MASK_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AT_MACRO_KILL_MASK_OFFSET]

//>> PREP_[INT_VC_ENDC_SYNC_DONE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ENDC_SYNC_DONE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_SYNC_DONE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ENDC_SYNC_DONE]

//>> GET_[INT_VC_ENDC_SYNC_DONE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ENDC_SYNC_DONE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_SYNC_DONE;
#endif
    return fapi2::getScom(i_target, INT_VC_ENDC_SYNC_DONE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ENDC_SYNC_DONE]

//>> PUT_[INT_VC_ENDC_SYNC_DONE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ENDC_SYNC_DONE(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_SYNC_DONE));
#endif
    return fapi2::putScom(i_target, INT_VC_ENDC_SYNC_DONE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ENDC_SYNC_DONE]


//>> SET_[INT_VC_ENDC_SYNC_DONE_SYNC_POLL_DONE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_SYNC_DONE_SYNC_POLL_DONE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_SYNC_DONE));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_SYNC_DONE_SYNC_POLL_DONE,
           INT_VC_ENDC_SYNC_DONE_SYNC_POLL_DONE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_SYNC_DONE_SYNC_POLL_DONE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_SYNC_DONE_SYNC_POLL_DONE]

//>> SET_[INT_VC_ENDC_SYNC_DONE_SYNC_POLL_DONE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_SYNC_DONE_SYNC_POLL_DONE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_SYNC_DONE));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_SYNC_DONE_SYNC_POLL_DONE,
           INT_VC_ENDC_SYNC_DONE_SYNC_POLL_DONE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_SYNC_DONE_SYNC_POLL_DONE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_SYNC_DONE_SYNC_POLL_DONE]

//>> GET_[INT_VC_ENDC_SYNC_DONE_SYNC_POLL_DONE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_SYNC_DONE_SYNC_POLL_DONE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_SYNC_DONE));
#endif
    return i_data.extractToRight<INT_VC_ENDC_SYNC_DONE_SYNC_POLL_DONE,
           INT_VC_ENDC_SYNC_DONE_SYNC_POLL_DONE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_SYNC_DONE_SYNC_POLL_DONE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_SYNC_DONE_SYNC_POLL_DONE]

//>> PREP_[INT_VC_ENDC_WATCH0_SPEC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ENDC_WATCH0_SPEC(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_WATCH0_SPEC;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ENDC_WATCH0_SPEC]

//>> GET_[INT_VC_ENDC_WATCH0_SPEC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ENDC_WATCH0_SPEC(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_WATCH0_SPEC;
#endif
    return fapi2::getScom(i_target, INT_VC_ENDC_WATCH0_SPEC, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH0_SPEC]

//>> PUT_[INT_VC_ENDC_WATCH0_SPEC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ENDC_WATCH0_SPEC(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return fapi2::putScom(i_target, INT_VC_ENDC_WATCH0_SPEC, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ENDC_WATCH0_SPEC]


//>> SET_[INT_VC_ENDC_WATCH0_SPEC_CONFLICT]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH0_SPEC_CONFLICT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH0_SPEC_CONFLICT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_CONFLICT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH0_SPEC_CONFLICT]

//>> SET_[INT_VC_ENDC_WATCH0_SPEC_CONFLICT]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH0_SPEC_CONFLICT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH0_SPEC_CONFLICT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_CONFLICT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH0_SPEC_CONFLICT]

//>> SET_[INT_VC_ENDC_WATCH0_SPEC_CONFLICT]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH0_SPEC_CONFLICT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return o_data.setBit<INT_VC_ENDC_WATCH0_SPEC_CONFLICT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_CONFLICT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH0_SPEC_CONFLICT]

//>> CLEAR_[INT_VC_ENDC_WATCH0_SPEC_CONFLICT]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ENDC_WATCH0_SPEC_CONFLICT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return o_data.clearBit<INT_VC_ENDC_WATCH0_SPEC_CONFLICT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_CONFLICT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_ENDC_WATCH0_SPEC_CONFLICT]

//>> GET_[INT_VC_ENDC_WATCH0_SPEC_CONFLICT]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_WATCH0_SPEC_CONFLICT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return i_data.extractToRight<INT_VC_ENDC_WATCH0_SPEC_CONFLICT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_CONFLICT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH0_SPEC_CONFLICT]

//>> GET_[INT_VC_ENDC_WATCH0_SPEC_CONFLICT]
static inline bool GET_INT_VC_ENDC_WATCH0_SPEC_CONFLICT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return i_data.getBit<INT_VC_ENDC_WATCH0_SPEC_CONFLICT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_CONFLICT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH0_SPEC_CONFLICT]

//>> SET_[INT_VC_ENDC_WATCH0_SPEC_RESERVED_1_7]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH0_SPEC_RESERVED_1_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH0_SPEC_RESERVED_1_7,
           INT_VC_ENDC_WATCH0_SPEC_RESERVED_1_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_RESERVED_1_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH0_SPEC_RESERVED_1_7]

//>> SET_[INT_VC_ENDC_WATCH0_SPEC_RESERVED_1_7]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH0_SPEC_RESERVED_1_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH0_SPEC_RESERVED_1_7,
           INT_VC_ENDC_WATCH0_SPEC_RESERVED_1_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_RESERVED_1_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH0_SPEC_RESERVED_1_7]

//>> GET_[INT_VC_ENDC_WATCH0_SPEC_RESERVED_1_7]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_WATCH0_SPEC_RESERVED_1_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return i_data.extractToRight<INT_VC_ENDC_WATCH0_SPEC_RESERVED_1_7,
           INT_VC_ENDC_WATCH0_SPEC_RESERVED_1_7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_RESERVED_1_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH0_SPEC_RESERVED_1_7]

//>> SET_[INT_VC_ENDC_WATCH0_SPEC_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH0_SPEC_FULL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH0_SPEC_FULL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH0_SPEC_FULL]

//>> SET_[INT_VC_ENDC_WATCH0_SPEC_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH0_SPEC_FULL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH0_SPEC_FULL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH0_SPEC_FULL]

//>> SET_[INT_VC_ENDC_WATCH0_SPEC_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH0_SPEC_FULL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return o_data.setBit<INT_VC_ENDC_WATCH0_SPEC_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH0_SPEC_FULL]

//>> CLEAR_[INT_VC_ENDC_WATCH0_SPEC_FULL]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ENDC_WATCH0_SPEC_FULL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return o_data.clearBit<INT_VC_ENDC_WATCH0_SPEC_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_ENDC_WATCH0_SPEC_FULL]

//>> GET_[INT_VC_ENDC_WATCH0_SPEC_FULL]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_WATCH0_SPEC_FULL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return i_data.extractToRight<INT_VC_ENDC_WATCH0_SPEC_FULL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH0_SPEC_FULL]

//>> GET_[INT_VC_ENDC_WATCH0_SPEC_FULL]
static inline bool GET_INT_VC_ENDC_WATCH0_SPEC_FULL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return i_data.getBit<INT_VC_ENDC_WATCH0_SPEC_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH0_SPEC_FULL]

//>> SET_[INT_VC_ENDC_WATCH0_SPEC_RESERVED_9_27]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH0_SPEC_RESERVED_9_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH0_SPEC_RESERVED_9_27,
           INT_VC_ENDC_WATCH0_SPEC_RESERVED_9_27_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_RESERVED_9_27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH0_SPEC_RESERVED_9_27]

//>> SET_[INT_VC_ENDC_WATCH0_SPEC_RESERVED_9_27]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH0_SPEC_RESERVED_9_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH0_SPEC_RESERVED_9_27,
           INT_VC_ENDC_WATCH0_SPEC_RESERVED_9_27_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_RESERVED_9_27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH0_SPEC_RESERVED_9_27]

//>> GET_[INT_VC_ENDC_WATCH0_SPEC_RESERVED_9_27]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_WATCH0_SPEC_RESERVED_9_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return i_data.extractToRight<INT_VC_ENDC_WATCH0_SPEC_RESERVED_9_27,
           INT_VC_ENDC_WATCH0_SPEC_RESERVED_9_27_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_RESERVED_9_27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH0_SPEC_RESERVED_9_27]

//>> SET_[INT_VC_ENDC_WATCH0_SPEC_BLOCKID]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH0_SPEC_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH0_SPEC_BLOCKID,
           INT_VC_ENDC_WATCH0_SPEC_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH0_SPEC_BLOCKID]

//>> SET_[INT_VC_ENDC_WATCH0_SPEC_BLOCKID]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH0_SPEC_BLOCKID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH0_SPEC_BLOCKID,
           INT_VC_ENDC_WATCH0_SPEC_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH0_SPEC_BLOCKID]

//>> GET_[INT_VC_ENDC_WATCH0_SPEC_BLOCKID]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_WATCH0_SPEC_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return i_data.extractToRight<INT_VC_ENDC_WATCH0_SPEC_BLOCKID,
           INT_VC_ENDC_WATCH0_SPEC_BLOCKID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH0_SPEC_BLOCKID]

//>> SET_[INT_VC_ENDC_WATCH0_SPEC_RESERVED_32_39]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH0_SPEC_RESERVED_32_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH0_SPEC_RESERVED_32_39,
           INT_VC_ENDC_WATCH0_SPEC_RESERVED_32_39_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_RESERVED_32_39 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH0_SPEC_RESERVED_32_39]

//>> SET_[INT_VC_ENDC_WATCH0_SPEC_RESERVED_32_39]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH0_SPEC_RESERVED_32_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH0_SPEC_RESERVED_32_39,
           INT_VC_ENDC_WATCH0_SPEC_RESERVED_32_39_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_RESERVED_32_39 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH0_SPEC_RESERVED_32_39]

//>> GET_[INT_VC_ENDC_WATCH0_SPEC_RESERVED_32_39]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_WATCH0_SPEC_RESERVED_32_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return i_data.extractToRight<INT_VC_ENDC_WATCH0_SPEC_RESERVED_32_39,
           INT_VC_ENDC_WATCH0_SPEC_RESERVED_32_39_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_RESERVED_32_39 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH0_SPEC_RESERVED_32_39]

//>> SET_[INT_VC_ENDC_WATCH0_SPEC_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH0_SPEC_OFFSET(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH0_SPEC_OFFSET,
           INT_VC_ENDC_WATCH0_SPEC_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH0_SPEC_OFFSET]

//>> SET_[INT_VC_ENDC_WATCH0_SPEC_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_WATCH0_SPEC_OFFSET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_WATCH0_SPEC_OFFSET,
           INT_VC_ENDC_WATCH0_SPEC_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_WATCH0_SPEC_OFFSET]

//>> GET_[INT_VC_ENDC_WATCH0_SPEC_OFFSET]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_WATCH0_SPEC_OFFSET(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_SPEC));
#endif
    return i_data.extractToRight<INT_VC_ENDC_WATCH0_SPEC_OFFSET,
           INT_VC_ENDC_WATCH0_SPEC_OFFSET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_WATCH0_SPEC_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH0_SPEC_OFFSET]

//>> PREP_[INT_VC_ENDC_WATCH2_DATA0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ENDC_WATCH2_DATA0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_WATCH2_DATA0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ENDC_WATCH2_DATA0]

//>> GET_[INT_VC_ENDC_WATCH2_DATA0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ENDC_WATCH2_DATA0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_WATCH2_DATA0;
#endif
    return fapi2::getScom(i_target, INT_VC_ENDC_WATCH2_DATA0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH2_DATA0]

//>> PUT_[INT_VC_ENDC_WATCH2_DATA0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ENDC_WATCH2_DATA0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH2_DATA0));
#endif
    return fapi2::putScom(i_target, INT_VC_ENDC_WATCH2_DATA0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ENDC_WATCH2_DATA0]


//>> PREP_[INT_VC_INFO_ERR_G0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_INFO_ERR_G0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_INFO_ERR_G0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_INFO_ERR_G0]

//>> GET_[INT_VC_INFO_ERR_G0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_INFO_ERR_G0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_INFO_ERR_G0;
#endif
    return fapi2::getScom(i_target, INT_VC_INFO_ERR_G0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_INFO_ERR_G0]

//>> PUT_[INT_VC_INFO_ERR_G0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_INFO_ERR_G0(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_INFO_ERR_G0));
#endif
    return fapi2::putScom(i_target, INT_VC_INFO_ERR_G0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_INFO_ERR_G0]


//>> SET_[INT_VC_INFO_ERR_G0_INT_VC_INFO_ERR_G0_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_INFO_ERR_G0_INT_VC_INFO_ERR_G0_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_INFO_ERR_G0));
#endif
    return o_data.insertFromRight<INT_VC_INFO_ERR_G0_INT_VC_INFO_ERR_G0_ERROR,
           INT_VC_INFO_ERR_G0_INT_VC_INFO_ERR_G0_ERROR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_INFO_ERR_G0_INT_VC_INFO_ERR_G0_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_INFO_ERR_G0_INT_VC_INFO_ERR_G0_ERROR]

//>> SET_[INT_VC_INFO_ERR_G0_INT_VC_INFO_ERR_G0_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_INFO_ERR_G0_INT_VC_INFO_ERR_G0_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_INFO_ERR_G0));
#endif
    return o_data.insertFromRight<INT_VC_INFO_ERR_G0_INT_VC_INFO_ERR_G0_ERROR,
           INT_VC_INFO_ERR_G0_INT_VC_INFO_ERR_G0_ERROR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_INFO_ERR_G0_INT_VC_INFO_ERR_G0_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_INFO_ERR_G0_INT_VC_INFO_ERR_G0_ERROR]

//>> GET_[INT_VC_INFO_ERR_G0_INT_VC_INFO_ERR_G0_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_INFO_ERR_G0_INT_VC_INFO_ERR_G0_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_INFO_ERR_G0));
#endif
    return i_data.extractToRight<INT_VC_INFO_ERR_G0_INT_VC_INFO_ERR_G0_ERROR,
           INT_VC_INFO_ERR_G0_INT_VC_INFO_ERR_G0_ERROR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_INFO_ERR_G0_INT_VC_INFO_ERR_G0_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_INFO_ERR_G0_INT_VC_INFO_ERR_G0_ERROR]

//>> PREP_[INT_VC_NVC_BLOCK_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_NVC_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_NVC_BLOCK_MODE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_NVC_BLOCK_MODE]

//>> GET_[INT_VC_NVC_BLOCK_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_NVC_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_NVC_BLOCK_MODE;
#endif
    return fapi2::getScom(i_target, INT_VC_NVC_BLOCK_MODE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_NVC_BLOCK_MODE]

//>> PUT_[INT_VC_NVC_BLOCK_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_NVC_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_NVC_BLOCK_MODE));
#endif
    return fapi2::putScom(i_target, INT_VC_NVC_BLOCK_MODE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_NVC_BLOCK_MODE]


//>> SET_[INT_VC_NVC_BLOCK_MODE_INT_VC_NVC_BLOCK_MODE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_NVC_BLOCK_MODE_INT_VC_NVC_BLOCK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_NVC_BLOCK_MODE));
#endif
    return o_data.insertFromRight<INT_VC_NVC_BLOCK_MODE_INT_VC_NVC_BLOCK_MODE,
           INT_VC_NVC_BLOCK_MODE_INT_VC_NVC_BLOCK_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_NVC_BLOCK_MODE_INT_VC_NVC_BLOCK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_NVC_BLOCK_MODE_INT_VC_NVC_BLOCK_MODE]

//>> SET_[INT_VC_NVC_BLOCK_MODE_INT_VC_NVC_BLOCK_MODE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_NVC_BLOCK_MODE_INT_VC_NVC_BLOCK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_NVC_BLOCK_MODE));
#endif
    return o_data.insertFromRight<INT_VC_NVC_BLOCK_MODE_INT_VC_NVC_BLOCK_MODE,
           INT_VC_NVC_BLOCK_MODE_INT_VC_NVC_BLOCK_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_NVC_BLOCK_MODE_INT_VC_NVC_BLOCK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_NVC_BLOCK_MODE_INT_VC_NVC_BLOCK_MODE]

//>> GET_[INT_VC_NVC_BLOCK_MODE_INT_VC_NVC_BLOCK_MODE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_NVC_BLOCK_MODE_INT_VC_NVC_BLOCK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_NVC_BLOCK_MODE));
#endif
    return i_data.extractToRight<INT_VC_NVC_BLOCK_MODE_INT_VC_NVC_BLOCK_MODE,
           INT_VC_NVC_BLOCK_MODE_INT_VC_NVC_BLOCK_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_NVC_BLOCK_MODE_INT_VC_NVC_BLOCK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_NVC_BLOCK_MODE_INT_VC_NVC_BLOCK_MODE]

//>> PREP_[INT_VC_WOF_ERR_G2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_WOF_ERR_G2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_WOF_ERR_G2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_WOF_ERR_G2]

//>> GET_[INT_VC_WOF_ERR_G2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_WOF_ERR_G2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_WOF_ERR_G2;
#endif
    return fapi2::getScom(i_target, INT_VC_WOF_ERR_G2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2]

//>> PUT_[INT_VC_WOF_ERR_G2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_WOF_ERR_G2(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return fapi2::putScom(i_target, INT_VC_WOF_ERR_G2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_WOF_ERR_G2]


//>> SET_[INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_EQA_SLOT_OVERFLOW]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_CRD_OR_RESP_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PTAG_ASSIGN_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PTAG_RELEASE_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_REPLAY_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PARITY_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_UE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_UNLOCK_FIFO_OVERFLOW]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_LOAD_OVERFLOW]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_LOAD_TAG_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_RSD_CI_STR_CRD_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_RESPONSE_FIFO_OVERFLOW]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_19]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_19]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_19]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_19]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_19]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_RESERVED_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_19]

//>> CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_19]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_RESERVED_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_RESERVED_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_19]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_19]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_RESERVED_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_RESERVED_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_19]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_19]
static inline bool GET_INT_VC_WOF_ERR_G2_RESERVED_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_RESERVED_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_19]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_TAG_SRAM_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_STATE_SRAM_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_SRAM_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_DATA_SRAM_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_CTRL_SRAM_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_REM_RSP_SRAM_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_REM_LOC_SRAM_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_ARX_DATA_ECC_CE]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_28]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_28]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_28]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_28]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_28]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_RESERVED_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_28]

//>> CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_28]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_RESERVED_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_RESERVED_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_28]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_28]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_RESERVED_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_RESERVED_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_28]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_28]
static inline bool GET_INT_VC_WOF_ERR_G2_RESERVED_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_RESERVED_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_28]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_29]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_29]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_29]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_29]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_29]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_RESERVED_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_29]

//>> CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_29]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_RESERVED_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_RESERVED_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_29]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_29]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_RESERVED_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_RESERVED_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_29]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_29]
static inline bool GET_INT_VC_WOF_ERR_G2_RESERVED_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_RESERVED_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_29]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_30]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_30]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_30]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_30]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_30]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_RESERVED_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_30]

//>> CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_30]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_RESERVED_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_RESERVED_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_30]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_30]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_RESERVED_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_RESERVED_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_30]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_30]
static inline bool GET_INT_VC_WOF_ERR_G2_RESERVED_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_RESERVED_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_30]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_31]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_31]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_31]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_31]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_31]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_RESERVED_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_31]

//>> CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_31]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_RESERVED_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_RESERVED_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_31]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_31]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_RESERVED_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_RESERVED_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_31]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_31]
static inline bool GET_INT_VC_WOF_ERR_G2_RESERVED_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_RESERVED_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_31]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_WATCH_ERROR]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_33]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_33]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_33]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_33]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_33]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_RESERVED_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_33]

//>> CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_33]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_RESERVED_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_RESERVED_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_33]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_33]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_RESERVED_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_RESERVED_33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_33]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_33]
static inline bool GET_INT_VC_WOF_ERR_G2_RESERVED_33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_RESERVED_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_33]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_34]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_34]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_34]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_34]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_34]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_RESERVED_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_34]

//>> CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_34]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_RESERVED_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_RESERVED_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_34]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_34]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_RESERVED_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_RESERVED_34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_34]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_34]
static inline bool GET_INT_VC_WOF_ERR_G2_RESERVED_34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_RESERVED_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_34]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_35]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_35]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_35]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_35]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_35]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_RESERVED_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_35]

//>> CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_35]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_RESERVED_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_RESERVED_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_35]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_35]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_RESERVED_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_RESERVED_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_35]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_35]
static inline bool GET_INT_VC_WOF_ERR_G2_RESERVED_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_RESERVED_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_35]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_36]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_36]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_36]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_36]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_36]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_RESERVED_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_36]

//>> CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_36]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_RESERVED_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_RESERVED_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_36]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_36]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_RESERVED_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_RESERVED_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_36]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_36]
static inline bool GET_INT_VC_WOF_ERR_G2_RESERVED_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_RESERVED_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_36]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_MULTISYNC]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_MULTISYNC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_MULTISYNC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_MULTISYNC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_MULTISYNC]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_MULTISYNC]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_MULTISYNC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_MULTISYNC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_MULTISYNC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_MULTISYNC]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_MULTISYNC]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_MULTISYNC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_MULTISYNC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_MULTISYNC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_MULTISYNC]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_MULTISYNC]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_MULTISYNC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_MULTISYNC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_MULTISYNC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_MULTISYNC]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_MULTISYNC]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_MULTISYNC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_MULTISYNC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_MULTISYNC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_MULTISYNC]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_MULTISYNC]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_MULTISYNC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_MULTISYNC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_MULTISYNC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_MULTISYNC]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_38]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_38]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_38]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_38]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_38]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_RESERVED_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_38]

//>> CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_38]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_RESERVED_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_RESERVED_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_38]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_38]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_RESERVED_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_RESERVED_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_38]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_38]
static inline bool GET_INT_VC_WOF_ERR_G2_RESERVED_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_RESERVED_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_38]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_0]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_1]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_2]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_3]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_4]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_5]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_6]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_7]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_8]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_9]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_10]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_11]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_12]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_13]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_14]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_15]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_16]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_17]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_18]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_19]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_20]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_21]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22]

//>> SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22]

//>> CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22]

//>> GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22]
static inline bool GET_INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_ENDC_PROC_ERROR_22]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_62]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_62(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_62]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_62]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_62(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_62]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_62]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_RESERVED_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_62]

//>> CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_62]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_RESERVED_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_RESERVED_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_62]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_62]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_RESERVED_62(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_RESERVED_62,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_62]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_62]
static inline bool GET_INT_VC_WOF_ERR_G2_RESERVED_62(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_RESERVED_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_62]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_63]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_63]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_63]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G2_RESERVED_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_63]

//>> SET_[INT_VC_WOF_ERR_G2_RESERVED_63]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G2_RESERVED_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.setBit<INT_VC_WOF_ERR_G2_RESERVED_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G2_RESERVED_63]

//>> CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_63]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_WOF_ERR_G2_RESERVED_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return o_data.clearBit<INT_VC_WOF_ERR_G2_RESERVED_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_WOF_ERR_G2_RESERVED_63]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_63]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G2_RESERVED_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G2_RESERVED_63,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_63]

//>> GET_[INT_VC_WOF_ERR_G2_RESERVED_63]
static inline bool GET_INT_VC_WOF_ERR_G2_RESERVED_63(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G2));
#endif
    return i_data.getBit<INT_VC_WOF_ERR_G2_RESERVED_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_WOF_ERR_G2_RESERVED_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G2_RESERVED_63]

//>> PREP_[MCD_BANK0_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MCD_BANK0_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MCD_BANK0_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MCD_BANK0_RW]

//>> GET_[MCD_BANK0_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MCD_BANK0_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MCD_BANK0_RW;
#endif
    return fapi2::getScom(i_target, MCD_BANK0_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MCD_BANK0_RW]

//>> PUT_[MCD_BANK0_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MCD_BANK0_RW(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return fapi2::putScom(i_target, MCD_BANK0_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MCD_BANK0_RW]


//>> SET_[MCD_BANK0_RW_ACCESS_EN]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_RW_ACCESS_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.insertFromRight<MCD_BANK0_RW_ACCESS_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_RW_ACCESS_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_RW_ACCESS_EN]

//>> SET_[MCD_BANK0_RW_ACCESS_EN]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_RW_ACCESS_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.insertFromRight<MCD_BANK0_RW_ACCESS_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_RW_ACCESS_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_RW_ACCESS_EN]

//>> SET_[MCD_BANK0_RW_ACCESS_EN]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_RW_ACCESS_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.setBit<MCD_BANK0_RW_ACCESS_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_BANK0_RW_ACCESS_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_RW_ACCESS_EN]

//>> CLEAR_[MCD_BANK0_RW_ACCESS_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_RW_ACCESS_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.clearBit<MCD_BANK0_RW_ACCESS_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_BANK0_RW_ACCESS_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_BANK0_RW_ACCESS_EN]

//>> GET_[MCD_BANK0_RW_ACCESS_EN]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_RW_ACCESS_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return i_data.extractToRight<MCD_BANK0_RW_ACCESS_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_RW_ACCESS_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_RW_ACCESS_EN]

//>> GET_[MCD_BANK0_RW_ACCESS_EN]
static inline bool GET_MCD_BANK0_RW_ACCESS_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return i_data.getBit<MCD_BANK0_RW_ACCESS_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_BANK0_RW_ACCESS_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_RW_ACCESS_EN]

//>> SET_[MCD_BANK0_RW_WR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_RW_WR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.insertFromRight<MCD_BANK0_RW_WR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_RW_WR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_RW_WR_ENABLE]

//>> SET_[MCD_BANK0_RW_WR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_RW_WR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.insertFromRight<MCD_BANK0_RW_WR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_RW_WR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_RW_WR_ENABLE]

//>> SET_[MCD_BANK0_RW_WR_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_RW_WR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.setBit<MCD_BANK0_RW_WR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_BANK0_RW_WR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_RW_WR_ENABLE]

//>> CLEAR_[MCD_BANK0_RW_WR_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_RW_WR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.clearBit<MCD_BANK0_RW_WR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_BANK0_RW_WR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_BANK0_RW_WR_ENABLE]

//>> GET_[MCD_BANK0_RW_WR_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_RW_WR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return i_data.extractToRight<MCD_BANK0_RW_WR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_RW_WR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_RW_WR_ENABLE]

//>> GET_[MCD_BANK0_RW_WR_ENABLE]
static inline bool GET_MCD_BANK0_RW_WR_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return i_data.getBit<MCD_BANK0_RW_WR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_BANK0_RW_WR_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_RW_WR_ENABLE]

//>> SET_[MCD_BANK0_RW_REQ_PEND]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_RW_REQ_PEND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.insertFromRight<MCD_BANK0_RW_REQ_PEND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_RW_REQ_PEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_RW_REQ_PEND]

//>> SET_[MCD_BANK0_RW_REQ_PEND]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_RW_REQ_PEND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.insertFromRight<MCD_BANK0_RW_REQ_PEND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_RW_REQ_PEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_RW_REQ_PEND]

//>> SET_[MCD_BANK0_RW_REQ_PEND]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_RW_REQ_PEND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.setBit<MCD_BANK0_RW_REQ_PEND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_BANK0_RW_REQ_PEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_RW_REQ_PEND]

//>> CLEAR_[MCD_BANK0_RW_REQ_PEND]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_RW_REQ_PEND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.clearBit<MCD_BANK0_RW_REQ_PEND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_BANK0_RW_REQ_PEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_BANK0_RW_REQ_PEND]

//>> GET_[MCD_BANK0_RW_REQ_PEND]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_RW_REQ_PEND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return i_data.extractToRight<MCD_BANK0_RW_REQ_PEND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_RW_REQ_PEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_RW_REQ_PEND]

//>> GET_[MCD_BANK0_RW_REQ_PEND]
static inline bool GET_MCD_BANK0_RW_REQ_PEND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return i_data.getBit<MCD_BANK0_RW_REQ_PEND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_BANK0_RW_REQ_PEND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_RW_REQ_PEND]

//>> SET_[MCD_BANK0_RW_READ_STATUS]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_RW_READ_STATUS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.insertFromRight<MCD_BANK0_RW_READ_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_RW_READ_STATUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_RW_READ_STATUS]

//>> SET_[MCD_BANK0_RW_READ_STATUS]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_RW_READ_STATUS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.insertFromRight<MCD_BANK0_RW_READ_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_RW_READ_STATUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_RW_READ_STATUS]

//>> SET_[MCD_BANK0_RW_READ_STATUS]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_RW_READ_STATUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.setBit<MCD_BANK0_RW_READ_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_BANK0_RW_READ_STATUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_RW_READ_STATUS]

//>> CLEAR_[MCD_BANK0_RW_READ_STATUS]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_RW_READ_STATUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.clearBit<MCD_BANK0_RW_READ_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_BANK0_RW_READ_STATUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_BANK0_RW_READ_STATUS]

//>> GET_[MCD_BANK0_RW_READ_STATUS]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_RW_READ_STATUS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return i_data.extractToRight<MCD_BANK0_RW_READ_STATUS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_RW_READ_STATUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_RW_READ_STATUS]

//>> GET_[MCD_BANK0_RW_READ_STATUS]
static inline bool GET_MCD_BANK0_RW_READ_STATUS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return i_data.getBit<MCD_BANK0_RW_READ_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_BANK0_RW_READ_STATUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_RW_READ_STATUS]

//>> SET_[MCD_BANK0_RW_WRITE_MODE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_RW_WRITE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.insertFromRight<MCD_BANK0_RW_WRITE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_RW_WRITE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_RW_WRITE_MODE]

//>> SET_[MCD_BANK0_RW_WRITE_MODE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_RW_WRITE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.insertFromRight<MCD_BANK0_RW_WRITE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_RW_WRITE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_RW_WRITE_MODE]

//>> SET_[MCD_BANK0_RW_WRITE_MODE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_RW_WRITE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.setBit<MCD_BANK0_RW_WRITE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_BANK0_RW_WRITE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_RW_WRITE_MODE]

//>> CLEAR_[MCD_BANK0_RW_WRITE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_RW_WRITE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.clearBit<MCD_BANK0_RW_WRITE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_BANK0_RW_WRITE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_BANK0_RW_WRITE_MODE]

//>> GET_[MCD_BANK0_RW_WRITE_MODE]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_RW_WRITE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return i_data.extractToRight<MCD_BANK0_RW_WRITE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_RW_WRITE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_RW_WRITE_MODE]

//>> GET_[MCD_BANK0_RW_WRITE_MODE]
static inline bool GET_MCD_BANK0_RW_WRITE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return i_data.getBit<MCD_BANK0_RW_WRITE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_BANK0_RW_WRITE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_RW_WRITE_MODE]

//>> SET_[MCD_BANK0_RW_WRITE_STATUS]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_RW_WRITE_STATUS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.insertFromRight<MCD_BANK0_RW_WRITE_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_RW_WRITE_STATUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_RW_WRITE_STATUS]

//>> SET_[MCD_BANK0_RW_WRITE_STATUS]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_RW_WRITE_STATUS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.insertFromRight<MCD_BANK0_RW_WRITE_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_RW_WRITE_STATUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_RW_WRITE_STATUS]

//>> SET_[MCD_BANK0_RW_WRITE_STATUS]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_RW_WRITE_STATUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.setBit<MCD_BANK0_RW_WRITE_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_BANK0_RW_WRITE_STATUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_RW_WRITE_STATUS]

//>> CLEAR_[MCD_BANK0_RW_WRITE_STATUS]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_RW_WRITE_STATUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.clearBit<MCD_BANK0_RW_WRITE_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_BANK0_RW_WRITE_STATUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_BANK0_RW_WRITE_STATUS]

//>> GET_[MCD_BANK0_RW_WRITE_STATUS]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_RW_WRITE_STATUS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return i_data.extractToRight<MCD_BANK0_RW_WRITE_STATUS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_RW_WRITE_STATUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_RW_WRITE_STATUS]

//>> GET_[MCD_BANK0_RW_WRITE_STATUS]
static inline bool GET_MCD_BANK0_RW_WRITE_STATUS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return i_data.getBit<MCD_BANK0_RW_WRITE_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_BANK0_RW_WRITE_STATUS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_RW_WRITE_STATUS]

//>> SET_[MCD_BANK0_RW_ADDR]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_RW_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.insertFromRight<MCD_BANK0_RW_ADDR,
           MCD_BANK0_RW_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_RW_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_RW_ADDR]

//>> SET_[MCD_BANK0_RW_ADDR]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_RW_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.insertFromRight<MCD_BANK0_RW_ADDR,
           MCD_BANK0_RW_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_RW_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_RW_ADDR]

//>> GET_[MCD_BANK0_RW_ADDR]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_RW_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return i_data.extractToRight<MCD_BANK0_RW_ADDR,
           MCD_BANK0_RW_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_RW_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_RW_ADDR]

//>> SET_[MCD_BANK0_RW_RDWR_DATA]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_RW_RDWR_DATA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.insertFromRight<MCD_BANK0_RW_RDWR_DATA,
           MCD_BANK0_RW_RDWR_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_RW_RDWR_DATA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_RW_RDWR_DATA]

//>> SET_[MCD_BANK0_RW_RDWR_DATA]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_RW_RDWR_DATA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return o_data.insertFromRight<MCD_BANK0_RW_RDWR_DATA,
           MCD_BANK0_RW_RDWR_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_RW_RDWR_DATA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_RW_RDWR_DATA]

//>> GET_[MCD_BANK0_RW_RDWR_DATA]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_RW_RDWR_DATA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_RW));
#endif
    return i_data.extractToRight<MCD_BANK0_RW_RDWR_DATA,
           MCD_BANK0_RW_RDWR_DATA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_RW_RDWR_DATA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_RW_RDWR_DATA]

//>> PREP_[MCD_ECAP]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MCD_ECAP(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MCD_ECAP;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MCD_ECAP]

//>> GET_[MCD_ECAP]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MCD_ECAP(const fapi2::Target<K, M, V>& i_target, fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MCD_ECAP;
#endif
    return fapi2::getScom(i_target, MCD_ECAP, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MCD_ECAP]

//>> PUT_[MCD_ECAP]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MCD_ECAP(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return fapi2::putScom(i_target, MCD_ECAP, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MCD_ECAP]


//>> SET_[MCD_ECAP_ECAP_ECC_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_ECC_CLEAR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_ECC_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_ECC_CLEAR]

//>> SET_[MCD_ECAP_ECAP_ECC_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_ECC_CLEAR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_ECC_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_ECC_CLEAR]

//>> SET_[MCD_ECAP_ECAP_ECC_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_ECC_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_ECAP_ECC_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_ECC_CLEAR]

//>> CLEAR_[MCD_ECAP_ECAP_ECC_CLEAR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_ECAP_ECC_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_ECAP_ECC_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_ECAP_ECC_CLEAR]

//>> GET_[MCD_ECAP_ECAP_ECC_CLEAR]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_ECC_CLEAR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_ECC_CLEAR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_ECC_CLEAR]

//>> GET_[MCD_ECAP_ECAP_ECC_CLEAR]
static inline bool GET_MCD_ECAP_ECAP_ECC_CLEAR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_ECAP_ECC_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_ECC_CLEAR]

//>> SET_[MCD_ECAP_ECAP_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_ECC_UE]

//>> SET_[MCD_ECAP_ECAP_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_ECC_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_ECC_UE]

//>> SET_[MCD_ECAP_ECAP_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_ECAP_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_ECC_UE]

//>> CLEAR_[MCD_ECAP_ECAP_ECC_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_ECAP_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_ECAP_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_ECAP_ECC_UE]

//>> GET_[MCD_ECAP_ECAP_ECC_UE]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_ECC_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_ECC_UE]

//>> GET_[MCD_ECAP_ECAP_ECC_UE]
static inline bool GET_MCD_ECAP_ECAP_ECC_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_ECAP_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_ECC_UE]

//>> SET_[MCD_ECAP_ECAP_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_ECC_CE]

//>> SET_[MCD_ECAP_ECAP_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_ECC_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_ECC_CE]

//>> SET_[MCD_ECAP_ECAP_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_ECAP_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_ECC_CE]

//>> CLEAR_[MCD_ECAP_ECAP_ECC_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_ECAP_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_ECAP_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_ECAP_ECC_CE]

//>> GET_[MCD_ECAP_ECAP_ECC_CE]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_ECC_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_ECC_CE]

//>> GET_[MCD_ECAP_ECAP_ECC_CE]
static inline bool GET_MCD_ECAP_ECAP_ECC_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_ECAP_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_ECC_CE]

//>> SET_[MCD_ECAP_ECAP_ECC_ERROR_COUNT]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_ECC_ERROR_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_ECC_ERROR_COUNT,
           MCD_ECAP_ECAP_ECC_ERROR_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_ERROR_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_ECC_ERROR_COUNT]

//>> SET_[MCD_ECAP_ECAP_ECC_ERROR_COUNT]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_ECC_ERROR_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_ECC_ERROR_COUNT,
           MCD_ECAP_ECAP_ECC_ERROR_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_ERROR_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_ECC_ERROR_COUNT]

//>> GET_[MCD_ECAP_ECAP_ECC_ERROR_COUNT]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_ECC_ERROR_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_ECC_ERROR_COUNT,
           MCD_ECAP_ECAP_ECC_ERROR_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_ERROR_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_ECC_ERROR_COUNT]

//>> SET_[MCD_ECAP_ECAP_ECC_ERROR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_ECC_ERROR_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_ECC_ERROR_ADDR,
           MCD_ECAP_ECAP_ECC_ERROR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_ERROR_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_ECC_ERROR_ADDR]

//>> SET_[MCD_ECAP_ECAP_ECC_ERROR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_ECC_ERROR_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_ECC_ERROR_ADDR,
           MCD_ECAP_ECAP_ECC_ERROR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_ERROR_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_ECC_ERROR_ADDR]

//>> GET_[MCD_ECAP_ECAP_ECC_ERROR_ADDR]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_ECC_ERROR_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_ECC_ERROR_ADDR,
           MCD_ECAP_ECAP_ECC_ERROR_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_ERROR_ADDR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_ECC_ERROR_ADDR]

//>> SET_[MCD_ECAP_ECAP_ECC_SYNDROME]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_ECC_SYNDROME(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_ECC_SYNDROME,
           MCD_ECAP_ECAP_ECC_SYNDROME_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_SYNDROME chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_ECC_SYNDROME]

//>> SET_[MCD_ECAP_ECAP_ECC_SYNDROME]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_ECC_SYNDROME(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_ECC_SYNDROME,
           MCD_ECAP_ECAP_ECC_SYNDROME_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_SYNDROME chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_ECC_SYNDROME]

//>> GET_[MCD_ECAP_ECAP_ECC_SYNDROME]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_ECC_SYNDROME(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_ECC_SYNDROME,
           MCD_ECAP_ECAP_ECC_SYNDROME_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_ECC_SYNDROME chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_ECC_SYNDROME]

//>> SET_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR]

//>> SET_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR]

//>> SET_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR]

//>> CLEAR_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR]

//>> GET_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR]

//>> GET_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR]
static inline bool GET_MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_UE_ERR]

//>> SET_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR]

//>> SET_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR]

//>> SET_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR]

//>> CLEAR_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR]

//>> GET_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR]

//>> GET_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR]
static inline bool GET_MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_SLICE0_CFG_ECC_CE_ERR]

//>> SET_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR]

//>> SET_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR]

//>> SET_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR]

//>> CLEAR_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR]

//>> GET_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR]

//>> GET_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR]
static inline bool GET_MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_UE_ERR]

//>> SET_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR]

//>> SET_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR]

//>> SET_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR]

//>> CLEAR_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR]

//>> GET_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR]

//>> GET_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR]
static inline bool GET_MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_SLICE1_CFG_ECC_CE_ERR]

//>> SET_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR]

//>> SET_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR]

//>> SET_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR]

//>> CLEAR_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR]

//>> GET_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR]

//>> GET_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR]
static inline bool GET_MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_UE_ERR]

//>> SET_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR]

//>> SET_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR]

//>> SET_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR]

//>> CLEAR_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR]

//>> GET_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR]

//>> GET_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR]
static inline bool GET_MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_SLICE2_CFG_ECC_CE_ERR]

//>> SET_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR]

//>> SET_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR]

//>> SET_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR]

//>> CLEAR_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR]

//>> GET_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR]

//>> GET_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR]
static inline bool GET_MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_UE_ERR]

//>> SET_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR]

//>> SET_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR]

//>> SET_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR]

//>> CLEAR_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR]

//>> GET_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR]

//>> GET_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR]
static inline bool GET_MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_SLICE3_CFG_ECC_CE_ERR]

//>> SET_[MCD_ECAP_ECAP_PRESP_RTY_OTHER]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_PRESP_RTY_OTHER(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_PRESP_RTY_OTHER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_PRESP_RTY_OTHER chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_PRESP_RTY_OTHER]

//>> SET_[MCD_ECAP_ECAP_PRESP_RTY_OTHER]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_PRESP_RTY_OTHER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_PRESP_RTY_OTHER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_PRESP_RTY_OTHER chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_PRESP_RTY_OTHER]

//>> SET_[MCD_ECAP_ECAP_PRESP_RTY_OTHER]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_PRESP_RTY_OTHER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_ECAP_PRESP_RTY_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_ECAP_PRESP_RTY_OTHER chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_PRESP_RTY_OTHER]

//>> CLEAR_[MCD_ECAP_ECAP_PRESP_RTY_OTHER]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_ECAP_PRESP_RTY_OTHER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_ECAP_PRESP_RTY_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_ECAP_PRESP_RTY_OTHER chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_ECAP_PRESP_RTY_OTHER]

//>> GET_[MCD_ECAP_ECAP_PRESP_RTY_OTHER]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_PRESP_RTY_OTHER(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_PRESP_RTY_OTHER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_PRESP_RTY_OTHER chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_PRESP_RTY_OTHER]

//>> GET_[MCD_ECAP_ECAP_PRESP_RTY_OTHER]
static inline bool GET_MCD_ECAP_ECAP_PRESP_RTY_OTHER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_ECAP_PRESP_RTY_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_ECAP_PRESP_RTY_OTHER chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_PRESP_RTY_OTHER]

//>> SET_[MCD_ECAP_ECAP_REC_SM_ERROR_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_REC_SM_ERROR_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_REC_SM_ERROR_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_REC_SM_ERROR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_REC_SM_ERROR_ERR]

//>> SET_[MCD_ECAP_ECAP_REC_SM_ERROR_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_REC_SM_ERROR_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_REC_SM_ERROR_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_REC_SM_ERROR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_REC_SM_ERROR_ERR]

//>> SET_[MCD_ECAP_ECAP_REC_SM_ERROR_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_REC_SM_ERROR_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_ECAP_REC_SM_ERROR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_ECAP_REC_SM_ERROR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_REC_SM_ERROR_ERR]

//>> CLEAR_[MCD_ECAP_ECAP_REC_SM_ERROR_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_ECAP_REC_SM_ERROR_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_ECAP_REC_SM_ERROR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_ECAP_REC_SM_ERROR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_ECAP_REC_SM_ERROR_ERR]

//>> GET_[MCD_ECAP_ECAP_REC_SM_ERROR_ERR]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_REC_SM_ERROR_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_REC_SM_ERROR_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_REC_SM_ERROR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_REC_SM_ERROR_ERR]

//>> GET_[MCD_ECAP_ECAP_REC_SM_ERROR_ERR]
static inline bool GET_MCD_ECAP_ECAP_REC_SM_ERROR_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_ECAP_REC_SM_ERROR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_ECAP_REC_SM_ERROR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_REC_SM_ERROR_ERR]

//>> SET_[MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR]

//>> SET_[MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR]

//>> SET_[MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR]

//>> CLEAR_[MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR]

//>> GET_[MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR]

//>> GET_[MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR]
static inline bool GET_MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_REC_PB_SM_ERROR_ERR]

//>> SET_[MCD_ECAP_ECAP_ADDR_ERROR_PULSE]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_ADDR_ERROR_PULSE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_ADDR_ERROR_PULSE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_ADDR_ERROR_PULSE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_ADDR_ERROR_PULSE]

//>> SET_[MCD_ECAP_ECAP_ADDR_ERROR_PULSE]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_ADDR_ERROR_PULSE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_ADDR_ERROR_PULSE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_ADDR_ERROR_PULSE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_ADDR_ERROR_PULSE]

//>> SET_[MCD_ECAP_ECAP_ADDR_ERROR_PULSE]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_ADDR_ERROR_PULSE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_ECAP_ADDR_ERROR_PULSE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_ECAP_ADDR_ERROR_PULSE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_ADDR_ERROR_PULSE]

//>> CLEAR_[MCD_ECAP_ECAP_ADDR_ERROR_PULSE]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_ECAP_ADDR_ERROR_PULSE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_ECAP_ADDR_ERROR_PULSE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_ECAP_ADDR_ERROR_PULSE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_ECAP_ADDR_ERROR_PULSE]

//>> GET_[MCD_ECAP_ECAP_ADDR_ERROR_PULSE]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_ADDR_ERROR_PULSE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_ADDR_ERROR_PULSE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_ADDR_ERROR_PULSE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_ADDR_ERROR_PULSE]

//>> GET_[MCD_ECAP_ECAP_ADDR_ERROR_PULSE]
static inline bool GET_MCD_ECAP_ECAP_ADDR_ERROR_PULSE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_ECAP_ADDR_ERROR_PULSE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_ECAP_ADDR_ERROR_PULSE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_ADDR_ERROR_PULSE]

//>> SET_[MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR]

//>> SET_[MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR]

//>> SET_[MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR]

//>> CLEAR_[MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR]

//>> GET_[MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR]

//>> GET_[MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR]
static inline bool GET_MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_RCMD0_ADDR_PARITY_ERROR]

//>> SET_[MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR]

//>> SET_[MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR]

//>> SET_[MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR]

//>> CLEAR_[MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR]

//>> GET_[MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR]

//>> GET_[MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR]
static inline bool GET_MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_RCMD1_ADDR_PARITY_ERROR]

//>> SET_[MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR]

//>> SET_[MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR]

//>> SET_[MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR]

//>> CLEAR_[MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR]

//>> GET_[MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR]

//>> GET_[MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR]
static inline bool GET_MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_RCMD2_ADDR_PARITY_ERROR]

//>> SET_[MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR]

//>> SET_[MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR]

//>> SET_[MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR]

//>> CLEAR_[MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR]

//>> GET_[MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR]

//>> GET_[MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR]
static inline bool GET_MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_RCMD3_ADDR_PARITY_ERROR]

//>> SET_[MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR]

//>> SET_[MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR]

//>> SET_[MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR]

//>> CLEAR_[MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR]

//>> GET_[MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR]

//>> GET_[MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR]
static inline bool GET_MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_WARB_INVALID_CASE_ERROR]

//>> SET_[MCD_ECAP_ECAP_INVALID_CRESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_INVALID_CRESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_INVALID_CRESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_INVALID_CRESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_INVALID_CRESP_ERROR]

//>> SET_[MCD_ECAP_ECAP_INVALID_CRESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_INVALID_CRESP_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_INVALID_CRESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_INVALID_CRESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_INVALID_CRESP_ERROR]

//>> SET_[MCD_ECAP_ECAP_INVALID_CRESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_INVALID_CRESP_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_ECAP_INVALID_CRESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_ECAP_INVALID_CRESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_INVALID_CRESP_ERROR]

//>> CLEAR_[MCD_ECAP_ECAP_INVALID_CRESP_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_ECAP_INVALID_CRESP_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_ECAP_INVALID_CRESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_ECAP_INVALID_CRESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_ECAP_INVALID_CRESP_ERROR]

//>> GET_[MCD_ECAP_ECAP_INVALID_CRESP_ERROR]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_INVALID_CRESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_INVALID_CRESP_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_INVALID_CRESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_INVALID_CRESP_ERROR]

//>> GET_[MCD_ECAP_ECAP_INVALID_CRESP_ERROR]
static inline bool GET_MCD_ECAP_ECAP_INVALID_CRESP_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_ECAP_INVALID_CRESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_ECAP_INVALID_CRESP_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_INVALID_CRESP_ERROR]

//>> SET_[MCD_ECAP_ECAP_TTAG_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_TTAG_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_TTAG_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_TTAG_PARITY_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_TTAG_PARITY_ERROR]

//>> SET_[MCD_ECAP_ECAP_TTAG_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_TTAG_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_TTAG_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_TTAG_PARITY_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_TTAG_PARITY_ERROR]

//>> SET_[MCD_ECAP_ECAP_TTAG_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_TTAG_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_ECAP_TTAG_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_ECAP_TTAG_PARITY_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_TTAG_PARITY_ERROR]

//>> CLEAR_[MCD_ECAP_ECAP_TTAG_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_ECAP_TTAG_PARITY_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_ECAP_TTAG_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_ECAP_TTAG_PARITY_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_ECAP_TTAG_PARITY_ERROR]

//>> GET_[MCD_ECAP_ECAP_TTAG_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_TTAG_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_TTAG_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_TTAG_PARITY_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_TTAG_PARITY_ERROR]

//>> GET_[MCD_ECAP_ECAP_TTAG_PARITY_ERROR]
static inline bool GET_MCD_ECAP_ECAP_TTAG_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_ECAP_TTAG_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_ECAP_TTAG_PARITY_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_TTAG_PARITY_ERROR]

//>> SET_[MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND]

//>> SET_[MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND]

//>> SET_[MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND]

//>> CLEAR_[MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND]

//>> GET_[MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND]

//>> GET_[MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND]
static inline bool GET_MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_ECAP_RDADDR_ARB_BAD_HAND]

//>> SET_[MCD_ECAP_RDWR_UPDATE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_RDWR_UPDATE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_RDWR_UPDATE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_RDWR_UPDATE_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_RDWR_UPDATE_ERROR]

//>> SET_[MCD_ECAP_RDWR_UPDATE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_RDWR_UPDATE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_RDWR_UPDATE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_RDWR_UPDATE_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_RDWR_UPDATE_ERROR]

//>> SET_[MCD_ECAP_RDWR_UPDATE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_RDWR_UPDATE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_RDWR_UPDATE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_RDWR_UPDATE_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_RDWR_UPDATE_ERROR]

//>> CLEAR_[MCD_ECAP_RDWR_UPDATE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_RDWR_UPDATE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_RDWR_UPDATE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_RDWR_UPDATE_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_RDWR_UPDATE_ERROR]

//>> GET_[MCD_ECAP_RDWR_UPDATE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_RDWR_UPDATE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_RDWR_UPDATE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_RDWR_UPDATE_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_RDWR_UPDATE_ERROR]

//>> GET_[MCD_ECAP_RDWR_UPDATE_ERROR]
static inline bool GET_MCD_ECAP_RDWR_UPDATE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_RDWR_UPDATE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_RDWR_UPDATE_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_RDWR_UPDATE_ERROR]

//>> SET_[MCD_ECAP_REC_UPDATE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_REC_UPDATE_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_REC_UPDATE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_REC_UPDATE_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_REC_UPDATE_ERROR]

//>> SET_[MCD_ECAP_REC_UPDATE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_REC_UPDATE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_REC_UPDATE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_REC_UPDATE_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_REC_UPDATE_ERROR]

//>> SET_[MCD_ECAP_REC_UPDATE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_REC_UPDATE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_REC_UPDATE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_REC_UPDATE_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_REC_UPDATE_ERROR]

//>> CLEAR_[MCD_ECAP_REC_UPDATE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_REC_UPDATE_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_REC_UPDATE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_REC_UPDATE_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_REC_UPDATE_ERROR]

//>> GET_[MCD_ECAP_REC_UPDATE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_REC_UPDATE_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_REC_UPDATE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_REC_UPDATE_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_REC_UPDATE_ERROR]

//>> GET_[MCD_ECAP_REC_UPDATE_ERROR]
static inline bool GET_MCD_ECAP_REC_UPDATE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_REC_UPDATE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_REC_UPDATE_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_REC_UPDATE_ERROR]

//>> SET_[MCD_ECAP_REC_ACK_DEAD_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_REC_ACK_DEAD_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_REC_ACK_DEAD_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_ECAP_REC_ACK_DEAD_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_REC_ACK_DEAD_ERROR]

//>> SET_[MCD_ECAP_REC_ACK_DEAD_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_REC_ACK_DEAD_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.insertFromRight<MCD_ECAP_REC_ACK_DEAD_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_ECAP_REC_ACK_DEAD_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_REC_ACK_DEAD_ERROR]

//>> SET_[MCD_ECAP_REC_ACK_DEAD_ERROR]
static inline fapi2::buffer<uint64_t>& SET_MCD_ECAP_REC_ACK_DEAD_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.setBit<MCD_ECAP_REC_ACK_DEAD_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_ECAP_REC_ACK_DEAD_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_ECAP_REC_ACK_DEAD_ERROR]

//>> CLEAR_[MCD_ECAP_REC_ACK_DEAD_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_ECAP_REC_ACK_DEAD_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return o_data.clearBit<MCD_ECAP_REC_ACK_DEAD_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_ECAP_REC_ACK_DEAD_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_ECAP_REC_ACK_DEAD_ERROR]

//>> GET_[MCD_ECAP_REC_ACK_DEAD_ERROR]
static inline fapi2::buffer<uint64_t>& GET_MCD_ECAP_REC_ACK_DEAD_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.extractToRight<MCD_ECAP_REC_ACK_DEAD_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_ECAP_REC_ACK_DEAD_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_REC_ACK_DEAD_ERROR]

//>> GET_[MCD_ECAP_REC_ACK_DEAD_ERROR]
static inline bool GET_MCD_ECAP_REC_ACK_DEAD_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_ECAP));
#endif
    return i_data.getBit<MCD_ECAP_REC_ACK_DEAD_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_ECAP_REC_ACK_DEAD_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_ECAP_REC_ACK_DEAD_ERROR]

//>> PREP_[NX_DMA_SU_INBOUND_WRITE_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_DMA_SU_INBOUND_WRITE_CONTROL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DMA_SU_INBOUND_WRITE_CONTROL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_DMA_SU_INBOUND_WRITE_CONTROL]

//>> GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_DMA_SU_INBOUND_WRITE_CONTROL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DMA_SU_INBOUND_WRITE_CONTROL;
#endif
    return fapi2::getScom(i_target, NX_DMA_SU_INBOUND_WRITE_CONTROL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL]

//>> PUT_[NX_DMA_SU_INBOUND_WRITE_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_DMA_SU_INBOUND_WRITE_CONTROL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return fapi2::putScom(i_target, NX_DMA_SU_INBOUND_WRITE_CONTROL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_DMA_SU_INBOUND_WRITE_CONTROL]


//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPCOMP_MAX_INRD]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPCOMP_MAX_INRD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.insertFromRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPCOMP_MAX_INRD,
           NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPCOMP_MAX_INRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPCOMP_MAX_INRD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPCOMP_MAX_INRD]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPCOMP_MAX_INRD]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPCOMP_MAX_INRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.insertFromRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPCOMP_MAX_INRD,
           NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPCOMP_MAX_INRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPCOMP_MAX_INRD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPCOMP_MAX_INRD]

//>> GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPCOMP_MAX_INRD]
static inline fapi2::buffer<uint64_t>& GET_NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPCOMP_MAX_INRD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return i_data.extractToRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPCOMP_MAX_INRD,
           NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPCOMP_MAX_INRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPCOMP_MAX_INRD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPCOMP_MAX_INRD]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPDECOMP_MAX_INRD]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPDECOMP_MAX_INRD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.insertFromRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPDECOMP_MAX_INRD,
           NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPDECOMP_MAX_INRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPDECOMP_MAX_INRD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPDECOMP_MAX_INRD]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPDECOMP_MAX_INRD]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPDECOMP_MAX_INRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.insertFromRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPDECOMP_MAX_INRD,
           NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPDECOMP_MAX_INRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPDECOMP_MAX_INRD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPDECOMP_MAX_INRD]

//>> GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPDECOMP_MAX_INRD]
static inline fapi2::buffer<uint64_t>& GET_NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPDECOMP_MAX_INRD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return i_data.extractToRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPDECOMP_MAX_INRD,
           NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPDECOMP_MAX_INRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPDECOMP_MAX_INRD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIPDECOMP_MAX_INRD]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.insertFromRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.insertFromRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.setBit<NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE]

//>> CLEAR_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.clearBit<NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE]

//>> GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return i_data.extractToRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE]

//>> GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE]
static inline bool GET_NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return i_data.getBit<NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_COMP_PREFETCH_ENABLE]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.insertFromRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.insertFromRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.setBit<NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE]

//>> CLEAR_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.clearBit<NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE]

//>> GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return i_data.extractToRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE]

//>> GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE]
static inline bool GET_NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return i_data.getBit<NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_GZIP_DECOMP_PREFETCH_ENABLE]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.insertFromRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.insertFromRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.setBit<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE]

//>> CLEAR_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.clearBit<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE]

//>> GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return i_data.extractToRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE]

//>> GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE]
static inline bool GET_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return i_data.getBit<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_COMP_PREFETCH_ENABLE]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.insertFromRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.insertFromRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.setBit<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE]

//>> CLEAR_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.clearBit<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE]

//>> GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return i_data.extractToRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE]

//>> GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE]
static inline bool GET_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return i_data.getBit<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_DECOMP_PREFETCH_ENABLE]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_MAX_INRD]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_MAX_INRD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.insertFromRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_MAX_INRD,
           NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_MAX_INRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_MAX_INRD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_MAX_INRD]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_MAX_INRD]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_MAX_INRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.insertFromRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_MAX_INRD,
           NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_MAX_INRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_MAX_INRD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_MAX_INRD]

//>> GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_MAX_INRD]
static inline fapi2::buffer<uint64_t>& GET_NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_MAX_INRD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return i_data.extractToRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_MAX_INRD,
           NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_MAX_INRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_MAX_INRD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_MAX_INRD]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTCOMP_MAX_INRD]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTCOMP_MAX_INRD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.insertFromRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTCOMP_MAX_INRD,
           NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTCOMP_MAX_INRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTCOMP_MAX_INRD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTCOMP_MAX_INRD]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTCOMP_MAX_INRD]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTCOMP_MAX_INRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.insertFromRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTCOMP_MAX_INRD,
           NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTCOMP_MAX_INRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTCOMP_MAX_INRD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTCOMP_MAX_INRD]

//>> GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTCOMP_MAX_INRD]
static inline fapi2::buffer<uint64_t>& GET_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTCOMP_MAX_INRD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return i_data.extractToRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTCOMP_MAX_INRD,
           NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTCOMP_MAX_INRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTCOMP_MAX_INRD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTCOMP_MAX_INRD]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTDECOMP_MAX_INRD]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTDECOMP_MAX_INRD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.insertFromRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTDECOMP_MAX_INRD,
           NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTDECOMP_MAX_INRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTDECOMP_MAX_INRD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTDECOMP_MAX_INRD]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTDECOMP_MAX_INRD]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTDECOMP_MAX_INRD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.insertFromRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTDECOMP_MAX_INRD,
           NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTDECOMP_MAX_INRD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTDECOMP_MAX_INRD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTDECOMP_MAX_INRD]

//>> GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTDECOMP_MAX_INRD]
static inline fapi2::buffer<uint64_t>& GET_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTDECOMP_MAX_INRD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return i_data.extractToRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTDECOMP_MAX_INRD,
           NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTDECOMP_MAX_INRD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTDECOMP_MAX_INRD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFTDECOMP_MAX_INRD]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.insertFromRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.insertFromRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.setBit<NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE]

//>> CLEAR_[NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.clearBit<NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE]

//>> GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return i_data.extractToRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE]

//>> GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE]
static inline bool GET_NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return i_data.getBit<NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_SYM_CPB_CHECK_DISABLE]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.insertFromRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.insertFromRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE]

//>> SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.setBit<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE]

//>> CLEAR_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return o_data.clearBit<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE]

//>> GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return i_data.extractToRight<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE]

//>> GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE]
static inline bool GET_NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_INBOUND_WRITE_CONTROL));
#endif
    return i_data.getBit<NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_SU_INBOUND_WRITE_CONTROL_EFT_SPBC_WRITE_ENABLE]

//>> PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG;
#endif
    return fapi2::getScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG]

//>> PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return fapi2::putScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG]


//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_LN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_GROUP]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_VG_NOT_SYS]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_DISABLE_NN_RN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_LN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_GROUP]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_VG_NOT_SYS]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_DISABLE_NN_RN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_LN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_GROUP]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_VG_NOT_SYS]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_WR_DISABLE_NN_RN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_LN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_GROUP]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_VG_NOT_SYS]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_UMAC_RD_DISABLE_NN_RN]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NX_FREEZE_MODES]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NX_FREEZE_MODES(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NX_FREEZE_MODES,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NX_FREEZE_MODES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NX_FREEZE_MODES chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NX_FREEZE_MODES]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NX_FREEZE_MODES]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NX_FREEZE_MODES(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NX_FREEZE_MODES,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NX_FREEZE_MODES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NX_FREEZE_MODES chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NX_FREEZE_MODES]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NX_FREEZE_MODES]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NX_FREEZE_MODES(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NX_FREEZE_MODES,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NX_FREEZE_MODES_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NX_FREEZE_MODES chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NX_FREEZE_MODES]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_18_19]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_18_19(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_18_19,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_18_19_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_18_19 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_18_19]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_18_19]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_18_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_18_19,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_18_19_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_18_19 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_18_19]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_18_19]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_18_19(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_18_19,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_18_19_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_18_19 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_18_19]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_NOT_INJECT]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_PARTIAL_WRT_NOT_INJECT]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RD_GO_M_QOS]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_23]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SKIP_G]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DATA_ARB_LFSR_CONFIG]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DATA_ARB_LFSR_CONFIG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DATA_ARB_LFSR_CONFIG,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DATA_ARB_LFSR_CONFIG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DATA_ARB_LFSR_CONFIG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DATA_ARB_LFSR_CONFIG]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DATA_ARB_LFSR_CONFIG]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DATA_ARB_LFSR_CONFIG(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DATA_ARB_LFSR_CONFIG,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DATA_ARB_LFSR_CONFIG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DATA_ARB_LFSR_CONFIG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DATA_ARB_LFSR_CONFIG]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DATA_ARB_LFSR_CONFIG]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DATA_ARB_LFSR_CONFIG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DATA_ARB_LFSR_CONFIG,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DATA_ARB_LFSR_CONFIG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DATA_ARB_LFSR_CONFIG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DATA_ARB_LFSR_CONFIG]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_NXCQ_HANG_SM_ON_ARE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_28]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_CFG_PUMP_MODE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_FLOW_SCOPE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_PMU_SNOOPING]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_ENABLE_PMU_CNT_RESET]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DISABLE_WRP]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_SMF_DISABLE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_35_39]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_35_39(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_35_39,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_35_39_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_35_39 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_35_39]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_35_39]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_35_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_35_39,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_35_39_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_35_39 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_35_39]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_35_39]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_35_39(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_35_39,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_35_39_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_35_39 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_35_39]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_VG_RESET_TIMER_MASK]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_VG_RESET_TIMER_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_VG_RESET_TIMER_MASK,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_VG_RESET_TIMER_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_VG_RESET_TIMER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_VG_RESET_TIMER_MASK]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_VG_RESET_TIMER_MASK]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_VG_RESET_TIMER_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_VG_RESET_TIMER_MASK,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_VG_RESET_TIMER_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_VG_RESET_TIMER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_VG_RESET_TIMER_MASK]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_VG_RESET_TIMER_MASK]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_VG_RESET_TIMER_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_VG_RESET_TIMER_MASK,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_VG_RESET_TIMER_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_VG_RESET_TIMER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_RD_VG_RESET_TIMER_MASK]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_VG_RESET_TIMER_MASK]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_VG_RESET_TIMER_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_VG_RESET_TIMER_MASK,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_VG_RESET_TIMER_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_VG_RESET_TIMER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_VG_RESET_TIMER_MASK]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_VG_RESET_TIMER_MASK]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_VG_RESET_TIMER_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_VG_RESET_TIMER_MASK,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_VG_RESET_TIMER_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_VG_RESET_TIMER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_VG_RESET_TIMER_MASK]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_VG_RESET_TIMER_MASK]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_VG_RESET_TIMER_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_VG_RESET_TIMER_MASK,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_VG_RESET_TIMER_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_VG_RESET_TIMER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_DMA_WR_VG_RESET_TIMER_MASK]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_56_62]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_56_62(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_56_62,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_56_62_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_56_62 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_56_62]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_56_62]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_56_62(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_56_62,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_56_62_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_56_62 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_56_62]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_56_62]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_56_62(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_56_62,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_56_62_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_56_62 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PB_MODE_REG_RESERVED_56_62]

//>> PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG;
#endif
    return fapi2::getScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG]

//>> PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG));
#endif
    return fapi2::putScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG]


//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_POLL_SCALE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_POLL_SCALE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_POLL_SCALE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_POLL_SCALE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_POLL_SCALE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_POLL_SCALE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_POLL_SCALE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_POLL_SCALE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_POLL_SCALE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_POLL_SCALE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_POLL_SCALE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_POLL_SCALE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_POLL_SCALE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_POLL_SCALE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_POLL_SCALE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_POLL_SCALE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_POLL_SCALE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_POLL_SCALE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_DATA_SCALE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_DATA_SCALE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_DATA_SCALE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_DATA_SCALE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_DATA_SCALE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_DATA_SCALE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_DATA_SCALE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_DATA_SCALE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_DATA_SCALE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_DATA_SCALE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_DATA_SCALE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_DATA_SCALE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_DATA_SCALE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_DATA_SCALE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_DATA_SCALE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_DATA_SCALE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_DATA_SCALE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_DATA_SCALE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_SHM_SCALE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_SHM_SCALE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_SHM_SCALE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_SHM_SCALE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_SHM_SCALE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_SHM_SCALE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_SHM_SCALE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_SHM_SCALE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_SHM_SCALE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_SHM_SCALE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_SHM_SCALE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_SHM_SCALE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_SHM_SCALE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_SHM_SCALE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_SHM_SCALE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_SHM_SCALE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_SHM_SCALE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_HANG_SHM_SCALE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_ERAT_DATA_POLL_SCALE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_ERAT_DATA_POLL_SCALE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_ERAT_DATA_POLL_SCALE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_ERAT_DATA_POLL_SCALE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_ERAT_DATA_POLL_SCALE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_ERAT_DATA_POLL_SCALE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_ERAT_DATA_POLL_SCALE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_ERAT_DATA_POLL_SCALE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_ERAT_DATA_POLL_SCALE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_ERAT_DATA_POLL_SCALE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_ERAT_DATA_POLL_SCALE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_ERAT_DATA_POLL_SCALE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_ERAT_DATA_POLL_SCALE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_ERAT_DATA_POLL_SCALE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_ERAT_DATA_POLL_SCALE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_ERAT_DATA_POLL_SCALE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_ERAT_DATA_POLL_SCALE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_MISC_CONTROL_REG_ERAT_DATA_POLL_SCALE]

//>> PREP_[NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1]

//>> GET_[NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1;
#endif
    return fapi2::getScom(i_target, NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1]

//>> PUT_[NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1));
#endif
    return fapi2::putScom(i_target, NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1]


//>> SET_[NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1_NX_DEBUG_SNAPSHOT_B64_87]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1_NX_DEBUG_SNAPSHOT_B64_87(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1_NX_DEBUG_SNAPSHOT_B64_87,
           NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1_NX_DEBUG_SNAPSHOT_B64_87_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1_NX_DEBUG_SNAPSHOT_B64_87 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1_NX_DEBUG_SNAPSHOT_B64_87]

//>> SET_[NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1_NX_DEBUG_SNAPSHOT_B64_87]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1_NX_DEBUG_SNAPSHOT_B64_87(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1_NX_DEBUG_SNAPSHOT_B64_87,
           NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1_NX_DEBUG_SNAPSHOT_B64_87_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1_NX_DEBUG_SNAPSHOT_B64_87 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1_NX_DEBUG_SNAPSHOT_B64_87]

//>> GET_[NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1_NX_DEBUG_SNAPSHOT_B64_87]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1_NX_DEBUG_SNAPSHOT_B64_87(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1_NX_DEBUG_SNAPSHOT_B64_87,
           NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1_NX_DEBUG_SNAPSHOT_B64_87_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1_NX_DEBUG_SNAPSHOT_B64_87 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_DEBUG_SNAPSHOT_1_NX_DEBUG_SNAPSHOT_B64_87]

//>> PREP_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN1_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_EVENT_COMPA;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_EVENT_COMPA;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN1_STATION_EVENT_COMPA, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA]

//>> PUT_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN1_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN1_STATION_EVENT_COMPA, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA]


//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_MASK_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_MASK_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_MASK_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_MASK_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_MASK_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_MASK_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_MASK_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_MASK_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_MASK_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_MASK_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_MASK_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTYPE_MASK_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_MASK_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_MASK_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_MASK_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_MASK_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_MASK_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_MASK_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_MASK_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_MASK_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_MASK_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_MASK_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_MASK_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TSIZE_MASK_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_EN1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_EN1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_MASK_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_MASK_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_MASK_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_MASK_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_MASK_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_MASK_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_MASK_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_MASK_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_MASK_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_MASK_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_MASK_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_TTAG_MASK_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_MASK_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_MASK_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_MASK_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_MASK_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_MASK_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_MASK_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_MASK_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_MASK_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_MASK_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_MASK_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_MASK_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_MASK_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_CRESP_POLARITY_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_SCOPE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_SCOPE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_SCOPE_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_SCOPE_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_SCOPE_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_SCOPE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_SCOPE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_SCOPE_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_SCOPE_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_SCOPE_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_SCOPE_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_SCOPE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_SCOPE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_COMPA_SCOPE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPA_SCOPE_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPA_SCOPE_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPA_SCOPE_EN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPA_SCOPE_EN1]

//>> PREP_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN1_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_EVENT_COMPX;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_EVENT_COMPX;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN1_STATION_EVENT_COMPX, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX]

//>> PUT_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN1_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN1_STATION_EVENT_COMPX, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX]


//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_SCOPE_MASK_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_SCOPE_MASK_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_SCOPE_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_SCOPE_MASK_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_SCOPE_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_SCOPE_MASK_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_SCOPE_MASK_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_SCOPE_MASK_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_SCOPE_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_SCOPE_MASK_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_SCOPE_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_SCOPE_MASK_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_SCOPE_MASK_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_SCOPE_MASK_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_SCOPE_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_SCOPE_MASK_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_SCOPE_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_SCOPE_MASK_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_MASK_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_MASK_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_MASK_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_MASK_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_MASK_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_MASK_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_MASK_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_MASK_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_MASK_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_MASK_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_MASK_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_A_PRESP_MASK_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_SCOPE_MASK_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_SCOPE_MASK_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_SCOPE_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_SCOPE_MASK_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_SCOPE_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_SCOPE_MASK_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_SCOPE_MASK_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_SCOPE_MASK_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_SCOPE_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_SCOPE_MASK_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_SCOPE_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_SCOPE_MASK_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_SCOPE_MASK_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_SCOPE_MASK_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_SCOPE_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_SCOPE_MASK_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_SCOPE_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_SCOPE_MASK_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_MASK_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_MASK_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_MASK_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_MASK_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_MASK_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_MASK_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_MASK_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_MASK_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_MASK_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_MASK_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_MASK_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_MASK_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_MASK_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_B_PRESP_MASK_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_COMPX));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN1]

//>> PREP_[PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG]

//>> GET_[PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG]

//>> PUT_[PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG]


//>> SET_[PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]

//>> SET_[PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]

//>> GET_[PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]

//>> PREP_[PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG]

//>> GET_[PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG]

//>> PUT_[PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG]


//>> SET_[PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]

//>> SET_[PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]

//>> GET_[PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]

//>> PREP_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT]

//>> PUT_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT]


//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN1]

//>> PREP_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT]

//>> PUT_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT]


//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EN2]

//>> PREP_[PB_COM_SCOM_EN3_STATION_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN3_STATION_CFG2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN3_STATION_CFG2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN3_STATION_CFG2]

//>> GET_[PB_COM_SCOM_EN3_STATION_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN3_STATION_CFG2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN3_STATION_CFG2;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN3_STATION_CFG2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_CFG2]

//>> PUT_[PB_COM_SCOM_EN3_STATION_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN3_STATION_CFG2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN3_STATION_CFG2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN3_STATION_CFG2]


//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]

//>> GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]

//>> GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]

//>> GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]

//>> GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN3,
           PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EN3]

//>> PREP_[PB_COM_SCOM_EN3_STATION_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN3_STATION_MODE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN3_STATION_MODE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN3_STATION_MODE]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN3_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN3_STATION_MODE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN3_STATION_MODE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE]

//>> PUT_[PB_COM_SCOM_EN3_STATION_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN3_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN3_STATION_MODE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN3_STATION_MODE]


//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline bool GET_PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HOP_MODE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PUMP_MODE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REPRO_MODE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline bool GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline bool GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SW_AB_WAIT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SW_AB_WAIT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SW_AB_WAIT_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SW_AB_WAIT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SW_AB_WAIT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SW_AB_WAIT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SW_AB_WAIT_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SW_AB_WAIT_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SW_AB_WAIT_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SW_AB_WAIT_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SW_AB_WAIT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SW_AB_WAIT_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SW_AB_WAIT_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SW_AB_WAIT_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SW_AB_WAIT_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SW_AB_WAIT_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SW_AB_WAIT_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SW_AB_WAIT_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SP_HW_MARK_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SP_HW_MARK_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SP_HW_MARK_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SP_HW_MARK_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SP_HW_MARK_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SP_HW_MARK_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SP_HW_MARK_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SP_HW_MARK_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SP_HW_MARK_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SP_HW_MARK_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SP_HW_MARK_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SP_HW_MARK_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SP_HW_MARK_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SP_HW_MARK_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SP_HW_MARK_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SP_HW_MARK_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SP_HW_MARK_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SP_HW_MARK_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_GP_HW_MARK_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_GP_HW_MARK_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_GP_HW_MARK_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_GP_HW_MARK_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_GP_HW_MARK_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_GP_HW_MARK_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_GP_HW_MARK_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_GP_HW_MARK_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_GP_HW_MARK_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_GP_HW_MARK_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_GP_HW_MARK_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_GP_HW_MARK_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_GP_HW_MARK_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_GP_HW_MARK_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_GP_HW_MARK_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_GP_HW_MARK_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_GP_HW_MARK_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_GP_HW_MARK_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NP_HW_MARK_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NP_HW_MARK_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NP_HW_MARK_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NP_HW_MARK_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NP_HW_MARK_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NP_HW_MARK_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NP_HW_MARK_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NP_HW_MARK_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NP_HW_MARK_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NP_HW_MARK_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NP_HW_MARK_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NP_HW_MARK_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NP_HW_MARK_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NP_HW_MARK_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NP_HW_MARK_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NP_HW_MARK_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NP_HW_MARK_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_NP_HW_MARK_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN3,
           PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EN3]

//>> PREP_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR]

//>> PUT_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR]


//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0,
           PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0,
           PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0,
           PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1,
           PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1,
           PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1,
           PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2,
           PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2,
           PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2,
           PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3,
           PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3,
           PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3,
           PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]

//>> PREP_[PB_COM_SCOM_EQ1_STATION_CR_ERROR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ1_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_CR_ERROR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ1_STATION_CR_ERROR]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ1_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_CR_ERROR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ1_STATION_CR_ERROR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR]

//>> PUT_[PB_COM_SCOM_EQ1_STATION_CR_ERROR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ1_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ1_STATION_CR_ERROR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ1_STATION_CR_ERROR]


//>> SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ERROR]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTYPE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTYPE,
           PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTYPE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTYPE,
           PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTYPE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTYPE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTYPE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTYPE,
           PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTYPE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TSIZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TSIZE,
           PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TSIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TSIZE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TSIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TSIZE,
           PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TSIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TSIZE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TSIZE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TSIZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TSIZE,
           PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TSIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TSIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TSIZE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTAG]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTAG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTAG,
           PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTAG]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTAG]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTAG,
           PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTAG]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTAG]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTAG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTAG,
           PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_TTAG]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_SCOPE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_SCOPE,
           PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_SCOPE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_SCOPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_SCOPE,
           PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_SCOPE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_SCOPE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_SCOPE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_SCOPE,
           PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_SCOPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_SCOPE]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP,
           PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP,
           PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP,
           PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_CRESP]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_PRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_PRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_PRESP,
           PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_PRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_PRESP]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_PRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_PRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_PRESP,
           PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_PRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_PRESP]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_PRESP]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_PRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_PRESP,
           PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_PRESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CR_ERROR_FG_PRESP]

//>> PREP_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR]

//>> PUT_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR]


//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0,
           PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0,
           PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0,
           PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3,
           PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3,
           PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3,
           PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]

//>> PREP_[PB_COM_SCOM_EQ3_STATION_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ3_STATION_CFG2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_CFG2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ3_STATION_CFG2]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ3_STATION_CFG2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_CFG2;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ3_STATION_CFG2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CFG2]

//>> PUT_[PB_COM_SCOM_EQ3_STATION_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ3_STATION_CFG2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ3_STATION_CFG2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ3_STATION_CFG2]


//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_AGG_THRESH_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_AGG_THRESH_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_G_IND_THRESH_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_R_IND_THRESH_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_USE_BURST_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_RATE_THRESH_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_REQ_HOLD_CNT_THRESHOLD_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC0_LIMIT]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK0_DOB_VC1_LIMIT]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC0_LIMIT]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_LINK1_DOB_VC1_LIMIT]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_TOK_INIT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_DAT_HORIZONTAL_DISABLE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_XLINK_MAX_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ3,
           PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CFG2_PB_CFG_COM_CR_ALINK_MAX_EQ3]

//>> PREP_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG]

//>> PUT_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG]


//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]

//>> PREP_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG]

//>> PUT_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG]


//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]

//>> PREP_[PB_COM_SCOM_EQ3_STATION_FIR_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ3_STATION_FIR_REG_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_FIR_REG_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ3_STATION_FIR_REG_RW]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_FIR_REG_RW;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_RW]

//>> PUT_[PB_COM_SCOM_EQ3_STATION_FIR_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ3_STATION_FIR_REG_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ3_STATION_FIR_REG_RW]

//>> PREP_[PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND]

//>> PUT_[PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND]

//>> PREP_[PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR]

//>> PUT_[PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR]


//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_COHERENCY_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_CRESP_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_LIMIT_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_SPARE_8]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_HANG_RECOVERY_GTE_LEVEL1]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FORCE_MP_IPL]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_PB_CMD_SNOOPER_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_DATA_ROUTE_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_FIR_COMPAB_TRIGGER]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK0_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_PROTOCOL_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_OVERFLOW_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_FIR_REG_RW, PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_AND,
                           PB_COM_SCOM_EQ3_STATION_FIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_FIR_REG_LINK1_HW_PARITY_ERROR]

//>> PREP_[PB_COM_SCOM_EQ3_STATION_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ3_STATION_MODE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_MODE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ3_STATION_MODE]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ3_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_MODE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ3_STATION_MODE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE]

//>> PUT_[PB_COM_SCOM_EQ3_STATION_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ3_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ3_STATION_MODE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ3_STATION_MODE]


//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_PBIXXX_INIT]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_STATION_DBG_MAX_HANG_STAGE_REACHED]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HOP_MODE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PUMP_MODE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REPRO_MODE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SL_DOMAIN_SIZE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_HNG_CHK_DISABLE]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_DBG_CLR_MAX_HANG_STAGE]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_REQ_GATHER_ENABLE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NHTM_EVENT_COMP_EN_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_OPTION_AB_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SW_AB_WAIT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SP_HW_MARK_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SP_HW_MARK_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SP_HW_MARK_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SP_HW_MARK_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SP_HW_MARK_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SP_HW_MARK_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SP_HW_MARK_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SP_HW_MARK_EQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SP_HW_MARK_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SP_HW_MARK_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SP_HW_MARK_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SP_HW_MARK_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SP_HW_MARK_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SP_HW_MARK_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SP_HW_MARK_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SP_HW_MARK_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SP_HW_MARK_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SP_HW_MARK_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_GP_HW_MARK_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_GP_HW_MARK_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_GP_HW_MARK_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_GP_HW_MARK_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_GP_HW_MARK_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_GP_HW_MARK_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_GP_HW_MARK_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_GP_HW_MARK_EQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_GP_HW_MARK_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_GP_HW_MARK_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_GP_HW_MARK_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_GP_HW_MARK_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_GP_HW_MARK_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_GP_HW_MARK_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_GP_HW_MARK_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_GP_HW_MARK_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_GP_HW_MARK_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_GP_HW_MARK_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NP_HW_MARK_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NP_HW_MARK_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NP_HW_MARK_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NP_HW_MARK_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NP_HW_MARK_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NP_HW_MARK_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NP_HW_MARK_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NP_HW_MARK_EQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NP_HW_MARK_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NP_HW_MARK_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NP_HW_MARK_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NP_HW_MARK_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NP_HW_MARK_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NP_HW_MARK_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NP_HW_MARK_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NP_HW_MARK_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NP_HW_MARK_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_NP_HW_MARK_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_OVERRIDE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_MCA_RATIO_SEL_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_OVERRIDE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_STEP_SEL_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_SWITCH_CD_GATE_ENABLE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_PAU_RATIO_INTERNAL]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_OP2_OVERLAP_DISABLE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_SERIES_ID_DISABLE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_TOKEN_ID_RANGE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_TLBI_TOKENS_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ3,
           PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_TMGR_MAX_SLBI_TOKENS_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_MODE_PB_CFG_RESET_ERROR_CAPTURE_EQ3]

//>> PREP_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT]

//>> PUT_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT]


//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ4]

//>> PREP_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR]

//>> PUT_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR]


//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_SPARE,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_SPARE]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_SPARE,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_SPARE]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_SPARE,
           PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE2_CURR_PB_CFG_SPARE]

//>> PREP_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT]

//>> PUT_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT]


//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ7]

//>> PREP_[PB_COM_SCOM_ES1_STATION_CR_ERROR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES1_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_CR_ERROR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES1_STATION_CR_ERROR]

//>> GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES1_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_CR_ERROR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES1_STATION_CR_ERROR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR]

//>> PUT_[PB_COM_SCOM_ES1_STATION_CR_ERROR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES1_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES1_STATION_CR_ERROR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES1_STATION_CR_ERROR]


//>> SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR]

//>> SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR]

//>> SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR]

//>> GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR]

//>> GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR]
static inline bool GET_PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ERROR]

//>> SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline bool GET_PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline bool GET_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTYPE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTYPE,
           PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTYPE]

//>> SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTYPE,
           PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTYPE]

//>> GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTYPE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTYPE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTYPE,
           PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTYPE]

//>> SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TSIZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TSIZE,
           PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TSIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TSIZE]

//>> SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TSIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TSIZE,
           PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TSIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TSIZE]

//>> GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TSIZE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TSIZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TSIZE,
           PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TSIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TSIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TSIZE]

//>> SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTAG]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTAG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTAG,
           PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTAG]

//>> SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTAG]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTAG,
           PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTAG]

//>> GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTAG]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTAG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTAG,
           PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_TTAG]

//>> SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_SCOPE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_SCOPE,
           PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_SCOPE]

//>> SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_SCOPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_SCOPE,
           PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_SCOPE]

//>> GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_SCOPE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_SCOPE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_SCOPE,
           PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_SCOPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_SCOPE]

//>> SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP,
           PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP]

//>> SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP,
           PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP]

//>> GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP,
           PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_CRESP]

//>> SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_PRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_PRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_PRESP,
           PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_PRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_PRESP]

//>> SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_PRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_PRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_PRESP,
           PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_PRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_PRESP]

//>> GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_PRESP]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_PRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_PRESP,
           PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_PRESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_CR_ERROR_FG_PRESP]

//>> PREP_[PB_COM_SCOM_ES1_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES1_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_EVENT_SEL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES1_STATION_EVENT_SEL]

//>> GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES1_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_EVENT_SEL;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES1_STATION_EVENT_SEL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL]

//>> PUT_[PB_COM_SCOM_ES1_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES1_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES1_STATION_EVENT_SEL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES1_STATION_EVENT_SEL]


//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES1,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES1,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES1,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES1,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES1,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES1,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline bool GET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline bool GET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> PREP_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT]

//>> PUT_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT]


//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0,
           PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0,
           PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0,
           PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1,
           PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1,
           PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1,
           PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2,
           PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2,
           PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2,
           PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3,
           PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3,
           PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3,
           PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]

//>> PREP_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_SP_CMD_RATE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE]

//>> GET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_SP_CMD_RATE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES1_STATION_SP_CMD_RATE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE]

//>> PUT_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES1_STATION_SP_CMD_RATE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE]


//>> SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_0_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_0_ES1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_0_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_0_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_0_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_0_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_0_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_0_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_0_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_0_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_0_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_0_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_0_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_0_ES1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_0_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_0_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_0_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_0_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_1_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_1_ES1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_1_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_1_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_1_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_1_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_1_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_1_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_1_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_1_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_1_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_1_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_1_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_1_ES1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_1_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_1_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_1_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_1_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_2_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_2_ES1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_2_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_2_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_2_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_2_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_2_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_2_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_2_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_2_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_2_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_2_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_2_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_2_ES1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_2_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_2_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_2_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_2_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_3_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_3_ES1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_3_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_3_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_3_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_3_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_3_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_3_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_3_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_3_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_3_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_3_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_3_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_3_ES1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_3_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_3_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_3_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_3_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_4_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_4_ES1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_4_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_4_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_4_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_4_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_4_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_4_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_4_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_4_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_4_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_4_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_4_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_4_ES1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_4_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_4_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_4_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_4_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_5_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_5_ES1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_5_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_5_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_5_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_5_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_5_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_5_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_5_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_5_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_5_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_5_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_5_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_5_ES1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_5_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_5_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_5_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_5_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_6_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_6_ES1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_6_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_6_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_6_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_6_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_6_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_6_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_6_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_6_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_6_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_6_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_6_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_6_ES1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_6_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_6_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_6_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_6_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_7_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_7_ES1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_7_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_7_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_7_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_7_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_7_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_7_ES1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_7_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_7_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_7_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_7_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_7_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_7_ES1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_7_ES1,
           PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_7_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_7_ES1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_SP_CMD_RATE_7_ES1]


//>>THE END<<

#ifndef __PPE_HCODE__
}
}

#endif
#endif
