/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/proc/reg00032.H $         */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PROC_REG00032_H_
#define __PROC_REG00032_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace proc
{
#endif


//>> PREP_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR]

//>> PUT_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR]


//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1]

//>> CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1]
static inline bool GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES1]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES1,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_ES1]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_SPARE,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_SPARE]

//>> SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_SPARE,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_SPARE]

//>> GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_SPARE,
           PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES1_STATION_HP_MODE2_CURR_PB_CFG_SPARE]

//>> PREP_[PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG]

//>> GET_[PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG]

//>> PUT_[PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG]


//>> SET_[PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG_EXTFIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG_EXTFIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG_EXTFIR_ACTION0,
           PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG_EXTFIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG_EXTFIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG_EXTFIR_ACTION0]

//>> SET_[PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG_EXTFIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG_EXTFIR_ACTION0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG_EXTFIR_ACTION0,
           PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG_EXTFIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG_EXTFIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG_EXTFIR_ACTION0]

//>> GET_[PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG_EXTFIR_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG_EXTFIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG_EXTFIR_ACTION0,
           PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG_EXTFIR_ACTION0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG_EXTFIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_EXTFIR_ACTION0_REG_EXTFIR_ACTION0]

//>> PREP_[PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG]

//>> GET_[PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG]

//>> PUT_[PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG]


//>> SET_[PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG_EXTFIR_ACTION1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG_EXTFIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG_EXTFIR_ACTION1,
           PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG_EXTFIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG_EXTFIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG_EXTFIR_ACTION1]

//>> SET_[PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG_EXTFIR_ACTION1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG_EXTFIR_ACTION1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG_EXTFIR_ACTION1,
           PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG_EXTFIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG_EXTFIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG_EXTFIR_ACTION1]

//>> GET_[PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG_EXTFIR_ACTION1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG_EXTFIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG_EXTFIR_ACTION1,
           PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG_EXTFIR_ACTION1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG_EXTFIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_EXTFIR_ACTION1_REG_EXTFIR_ACTION1]

//>> PREP_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT]

//>> PUT_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT]


//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3]
static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3]
static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3]
static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3]
static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3]
static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3]
static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3]
static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3]
static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3]
static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3]
static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3]
static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3]
static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3]
static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3]
static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3]
static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3]
static inline bool GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_VALID_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES3,
           PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_ES3]

//>> PREP_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2]

//>> PUT_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2]


//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_GP_RTY_THRESHOLD_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CHG_RATE_SP_RTY_THRESHOLD_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_JUMP_LEVEL_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_CPO_RTY_LEVEL_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SLEEP_BACKOFF_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SLEEP_BACKOFF_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SLEEP_BACKOFF_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SLEEP_BACKOFF_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SLEEP_BACKOFF_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SLEEP_BACKOFF_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SLEEP_BACKOFF_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SLEEP_BACKOFF_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SLEEP_BACKOFF_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SLEEP_BACKOFF_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SLEEP_BACKOFF_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SLEEP_BACKOFF_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SLEEP_BACKOFF_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SLEEP_BACKOFF_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SLEEP_BACKOFF_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SLEEP_BACKOFF_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SLEEP_BACKOFF_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SLEEP_BACKOFF_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE_ES3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE_ES3,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE_ES3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_RTY_PERCENTAGE_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3]

//>> CLEAR_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3]
static inline bool GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_INCLUDE_LPC_RTY_ES3]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SPARE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SPARE]

//>> SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SPARE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SPARE]

//>> GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SPARE,
           PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_ES3_STATION_SNOOPER_CFG2_PB_CFG_SPARE]

//>> PREP_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG]

//>> PUT_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG]


//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_RTAG_PERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_MISC_PERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_EVENPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_ODDPERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC0_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_VC1_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_EVN1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_PERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_MISC_PERR]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_ODD1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_RTAG_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_DATA_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_IB01_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F0VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_DOB01_DIB01_INT_ERR_REG_OB01_F1VC1_OVER_UNDERFLOW]

//>> PREP_[PB_PTLSCOM10_MAILBOX_00_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM10_MAILBOX_00_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_MAILBOX_00_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM10_MAILBOX_00_REG]

//>> GET_[PB_PTLSCOM10_MAILBOX_00_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM10_MAILBOX_00_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_MAILBOX_00_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM10_MAILBOX_00_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_00_REG]

//>> PUT_[PB_PTLSCOM10_MAILBOX_00_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM10_MAILBOX_00_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_00_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM10_MAILBOX_00_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM10_MAILBOX_00_REG]


//>> PREP_[PB_PTLSCOM10_MAILBOX_01_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM10_MAILBOX_01_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_MAILBOX_01_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM10_MAILBOX_01_REG]

//>> GET_[PB_PTLSCOM10_MAILBOX_01_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM10_MAILBOX_01_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_MAILBOX_01_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM10_MAILBOX_01_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM10_MAILBOX_01_REG]

//>> PUT_[PB_PTLSCOM10_MAILBOX_01_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM10_MAILBOX_01_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_MAILBOX_01_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM10_MAILBOX_01_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM10_MAILBOX_01_REG]


//>> PREP_[PB_PTLSCOM10_PMU0_CNPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM10_PMU0_CNPM_COUNTER(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_PMU0_CNPM_COUNTER;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM10_PMU0_CNPM_COUNTER]

//>> GET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM10_PMU0_CNPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_PMU0_CNPM_COUNTER;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM10_PMU0_CNPM_COUNTER, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER]

//>> PUT_[PB_PTLSCOM10_PMU0_CNPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM10_PMU0_CNPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU0_CNPM_COUNTER));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM10_PMU0_CNPM_COUNTER, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM10_PMU0_CNPM_COUNTER]


//>> SET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU0_CNPM_COUNTER_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU0_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU0_CNPM_COUNTER_0,
           PB_PTLSCOM10_PMU0_CNPM_COUNTER_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PMU0_CNPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_0]

//>> SET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU0_CNPM_COUNTER_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU0_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU0_CNPM_COUNTER_0,
           PB_PTLSCOM10_PMU0_CNPM_COUNTER_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PMU0_CNPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_0]

//>> GET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PMU0_CNPM_COUNTER_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU0_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PMU0_CNPM_COUNTER_0,
           PB_PTLSCOM10_PMU0_CNPM_COUNTER_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PMU0_CNPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_0]

//>> SET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU0_CNPM_COUNTER_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU0_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU0_CNPM_COUNTER_1,
           PB_PTLSCOM10_PMU0_CNPM_COUNTER_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PMU0_CNPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_1]

//>> SET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU0_CNPM_COUNTER_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU0_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU0_CNPM_COUNTER_1,
           PB_PTLSCOM10_PMU0_CNPM_COUNTER_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PMU0_CNPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_1]

//>> GET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PMU0_CNPM_COUNTER_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU0_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PMU0_CNPM_COUNTER_1,
           PB_PTLSCOM10_PMU0_CNPM_COUNTER_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PMU0_CNPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_1]

//>> SET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU0_CNPM_COUNTER_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU0_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU0_CNPM_COUNTER_2,
           PB_PTLSCOM10_PMU0_CNPM_COUNTER_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PMU0_CNPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_2]

//>> SET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU0_CNPM_COUNTER_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU0_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU0_CNPM_COUNTER_2,
           PB_PTLSCOM10_PMU0_CNPM_COUNTER_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PMU0_CNPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_2]

//>> GET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PMU0_CNPM_COUNTER_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU0_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PMU0_CNPM_COUNTER_2,
           PB_PTLSCOM10_PMU0_CNPM_COUNTER_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PMU0_CNPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_2]

//>> SET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU0_CNPM_COUNTER_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU0_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU0_CNPM_COUNTER_3,
           PB_PTLSCOM10_PMU0_CNPM_COUNTER_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PMU0_CNPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_3]

//>> SET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PMU0_CNPM_COUNTER_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU0_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PMU0_CNPM_COUNTER_3,
           PB_PTLSCOM10_PMU0_CNPM_COUNTER_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PMU0_CNPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_3]

//>> GET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PMU0_CNPM_COUNTER_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU0_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PMU0_CNPM_COUNTER_3,
           PB_PTLSCOM10_PMU0_CNPM_COUNTER_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PMU0_CNPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PMU0_CNPM_COUNTER_3]

//>> PREP_[PB_PTLSCOM10_PTL_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM10_PTL_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_PTL_FIR_MASK_REG_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM10_PTL_FIR_MASK_REG_RW]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_PTL_FIR_MASK_REG_RW;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_RW]

//>> PUT_[PB_PTLSCOM10_PTL_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM10_PTL_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM10_PTL_FIR_MASK_REG_RW]

//>> PREP_[PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND]

//>> PUT_[PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND]

//>> PREP_[PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR]

//>> PUT_[PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR]


//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR00_TRAINED_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR01_TRAINED_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR02_TRAINED_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FMR03_TRAINED_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_UE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_CE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_SUE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB01_ERR_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_UE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_CE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_SUE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DOB23_ERR_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER00_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB01_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER01_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER02_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_CROB23_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_FRAMER03_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER00_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER01_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER02_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PARSER03_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_0_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_1_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_2_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_LINK_DOWN_3_ATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB01_ERR_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_DIB23_ERR_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB00_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB01_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB10_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB11_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB20_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB21_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB30_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_MB31_SPATTN_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL0_SPARE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL1_SPARE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL2_SPARE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]

//>> SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]

//>> CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]

//>> GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]
static inline bool GET_PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PTL_FIR_MASK_REG_RW, PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_AND,
                           PB_PTLSCOM10_PTL_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_PTL_FIR_MASK_REG_PTL3_SPARE_MASK]

//>> PREP_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG]

//>> GET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG]

//>> PUT_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG]


//>> SET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET,
           PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET]

//>> SET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET,
           PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET]

//>> GET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET,
           PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET]

//>> SET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET,
           PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET]

//>> SET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET,
           PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET]

//>> GET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET,
           PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET]

//>> SET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT,
           PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT]

//>> SET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT,
           PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT]

//>> GET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT,
           PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT]

//>> SET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT,
           PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT]

//>> SET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT,
           PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT]

//>> GET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT,
           PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT]

//>> PREP_[PB_PTLSCOM10_TL_LINK_SYN_23_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM10_TL_LINK_SYN_23_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_TL_LINK_SYN_23_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM10_TL_LINK_SYN_23_REG]

//>> GET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM10_TL_LINK_SYN_23_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_TL_LINK_SYN_23_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM10_TL_LINK_SYN_23_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG]

//>> PUT_[PB_PTLSCOM10_TL_LINK_SYN_23_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM10_TL_LINK_SYN_23_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM10_TL_LINK_SYN_23_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM10_TL_LINK_SYN_23_REG]


//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN0,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN0]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN0,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN0]

//>> GET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN0,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN0]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN1,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN1]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN1,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN1]

//>> GET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN1,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN1]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN2,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN2]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN2,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN2]

//>> GET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN2,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN2]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN3,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN3]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN3,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN3]

//>> GET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN3,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_2_SCOM_SYN3]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN0,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN0]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN0,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN0]

//>> GET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN0,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN0]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN1,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN1]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN1,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN1]

//>> GET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN1,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN1]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN2,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN2]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN2,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN2]

//>> GET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN2,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN2]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN3,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN3]

//>> SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN3,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN3]

//>> GET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_TL_LINK_SYN_23_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN3,
           PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM10_TL_LINK_SYN_23_REG_3_SCOM_SYN3]

//>> PREP_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG]

//>> PUT_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG]


//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_RTAG_PERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_MISC_PERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_EVENPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_ODDPERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F0VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_F1VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC0_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_VC1_PREFETCH_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_EVN1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PBITERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_PERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_MISC_PERR]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_ODD1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_RTAG_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_DATA_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC0_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_IB23_VC1_OVERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF0VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC0_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]

//>> SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]

//>> CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]

//>> GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]
static inline bool GET_PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_DOB23_DIB23_INT_ERR_REG_OB23_DIBF1VC1_OVER_UNDERFLOW]

//>> PREP_[PB_PTLSCOM23_PMU2_CNPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM23_PMU2_CNPM_COUNTER(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_PMU2_CNPM_COUNTER;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM23_PMU2_CNPM_COUNTER]

//>> GET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM23_PMU2_CNPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_PMU2_CNPM_COUNTER;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM23_PMU2_CNPM_COUNTER, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER]

//>> PUT_[PB_PTLSCOM23_PMU2_CNPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM23_PMU2_CNPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU2_CNPM_COUNTER));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM23_PMU2_CNPM_COUNTER, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM23_PMU2_CNPM_COUNTER]


//>> SET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU2_CNPM_COUNTER_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU2_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU2_CNPM_COUNTER_0,
           PB_PTLSCOM23_PMU2_CNPM_COUNTER_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_PMU2_CNPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_0]

//>> SET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU2_CNPM_COUNTER_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU2_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU2_CNPM_COUNTER_0,
           PB_PTLSCOM23_PMU2_CNPM_COUNTER_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_PMU2_CNPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_0]

//>> GET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_PMU2_CNPM_COUNTER_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU2_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_PMU2_CNPM_COUNTER_0,
           PB_PTLSCOM23_PMU2_CNPM_COUNTER_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_PMU2_CNPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_0]

//>> SET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU2_CNPM_COUNTER_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU2_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU2_CNPM_COUNTER_1,
           PB_PTLSCOM23_PMU2_CNPM_COUNTER_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_PMU2_CNPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_1]

//>> SET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU2_CNPM_COUNTER_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU2_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU2_CNPM_COUNTER_1,
           PB_PTLSCOM23_PMU2_CNPM_COUNTER_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_PMU2_CNPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_1]

//>> GET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_PMU2_CNPM_COUNTER_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU2_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_PMU2_CNPM_COUNTER_1,
           PB_PTLSCOM23_PMU2_CNPM_COUNTER_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_PMU2_CNPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_1]

//>> SET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU2_CNPM_COUNTER_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU2_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU2_CNPM_COUNTER_2,
           PB_PTLSCOM23_PMU2_CNPM_COUNTER_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_PMU2_CNPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_2]

//>> SET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU2_CNPM_COUNTER_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU2_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU2_CNPM_COUNTER_2,
           PB_PTLSCOM23_PMU2_CNPM_COUNTER_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_PMU2_CNPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_2]

//>> GET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_PMU2_CNPM_COUNTER_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU2_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_PMU2_CNPM_COUNTER_2,
           PB_PTLSCOM23_PMU2_CNPM_COUNTER_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_PMU2_CNPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_2]

//>> SET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU2_CNPM_COUNTER_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU2_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU2_CNPM_COUNTER_3,
           PB_PTLSCOM23_PMU2_CNPM_COUNTER_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_PMU2_CNPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_3]

//>> SET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU2_CNPM_COUNTER_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU2_CNPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU2_CNPM_COUNTER_3,
           PB_PTLSCOM23_PMU2_CNPM_COUNTER_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_PMU2_CNPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_3]

//>> GET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_PMU2_CNPM_COUNTER_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU2_CNPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_PMU2_CNPM_COUNTER_3,
           PB_PTLSCOM23_PMU2_CNPM_COUNTER_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_PMU2_CNPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_PMU2_CNPM_COUNTER_3]

//>> PREP_[PB_PTLSCOM23_PTL_FIR_WOF_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM23_PTL_FIR_WOF_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_PTL_FIR_WOF_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM23_PTL_FIR_WOF_REG]

//>> GET_[PB_PTLSCOM23_PTL_FIR_WOF_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM23_PTL_FIR_WOF_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_PTL_FIR_WOF_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM23_PTL_FIR_WOF_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM23_PTL_FIR_WOF_REG]

//>> PUT_[PB_PTLSCOM23_PTL_FIR_WOF_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM23_PTL_FIR_WOF_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PTL_FIR_WOF_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM23_PTL_FIR_WOF_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM23_PTL_FIR_WOF_REG]


//>> SET_[PB_PTLSCOM23_PTL_FIR_WOF_REG_PB_PTL_FIR_WOF]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PTL_FIR_WOF_REG_PB_PTL_FIR_WOF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PTL_FIR_WOF_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PTL_FIR_WOF_REG_PB_PTL_FIR_WOF,
           PB_PTLSCOM23_PTL_FIR_WOF_REG_PB_PTL_FIR_WOF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_PTL_FIR_WOF_REG_PB_PTL_FIR_WOF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PTL_FIR_WOF_REG_PB_PTL_FIR_WOF]

//>> SET_[PB_PTLSCOM23_PTL_FIR_WOF_REG_PB_PTL_FIR_WOF]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PTL_FIR_WOF_REG_PB_PTL_FIR_WOF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PTL_FIR_WOF_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PTL_FIR_WOF_REG_PB_PTL_FIR_WOF,
           PB_PTLSCOM23_PTL_FIR_WOF_REG_PB_PTL_FIR_WOF_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_PTL_FIR_WOF_REG_PB_PTL_FIR_WOF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PTL_FIR_WOF_REG_PB_PTL_FIR_WOF]

//>> GET_[PB_PTLSCOM23_PTL_FIR_WOF_REG_PB_PTL_FIR_WOF]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_PTL_FIR_WOF_REG_PB_PTL_FIR_WOF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PTL_FIR_WOF_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_PTL_FIR_WOF_REG_PB_PTL_FIR_WOF,
           PB_PTLSCOM23_PTL_FIR_WOF_REG_PB_PTL_FIR_WOF_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_PTL_FIR_WOF_REG_PB_PTL_FIR_WOF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_PTL_FIR_WOF_REG_PB_PTL_FIR_WOF]

//>> PREP_[PB_PTLSCOM45_MAILBOX_10_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM45_MAILBOX_10_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_MAILBOX_10_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM45_MAILBOX_10_REG]

//>> GET_[PB_PTLSCOM45_MAILBOX_10_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM45_MAILBOX_10_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_MAILBOX_10_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM45_MAILBOX_10_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM45_MAILBOX_10_REG]

//>> PUT_[PB_PTLSCOM45_MAILBOX_10_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM45_MAILBOX_10_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_MAILBOX_10_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM45_MAILBOX_10_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM45_MAILBOX_10_REG]


//>> PREP_[PB_PTLSCOM45_MAILBOX_11_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM45_MAILBOX_11_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_MAILBOX_11_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM45_MAILBOX_11_REG]

//>> GET_[PB_PTLSCOM45_MAILBOX_11_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM45_MAILBOX_11_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_MAILBOX_11_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM45_MAILBOX_11_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM45_MAILBOX_11_REG]

//>> PUT_[PB_PTLSCOM45_MAILBOX_11_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM45_MAILBOX_11_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_MAILBOX_11_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM45_MAILBOX_11_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM45_MAILBOX_11_REG]


//>> PREP_[PB_PTLSCOM67_MAILBOX_CTL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM67_MAILBOX_CTL_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM67_MAILBOX_CTL_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM67_MAILBOX_CTL_REG]

//>> GET_[PB_PTLSCOM67_MAILBOX_CTL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM67_MAILBOX_CTL_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM67_MAILBOX_CTL_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM67_MAILBOX_CTL_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM67_MAILBOX_CTL_REG]

//>> PUT_[PB_PTLSCOM67_MAILBOX_CTL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM67_MAILBOX_CTL_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM67_MAILBOX_CTL_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM67_MAILBOX_CTL_REG]


//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID]

//>> CLEAR_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID]

//>> GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID]

//>> GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID]
static inline bool GET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_VALID]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD]

//>> CLEAR_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD]

//>> GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD]

//>> GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD]
static inline bool GET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_WR_NOT_RD]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR]

//>> CLEAR_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR]

//>> GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR]

//>> GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR]
static inline bool GET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_ADDR]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN]

//>> CLEAR_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN]

//>> GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN]

//>> GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN]
static inline bool GET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_DOWN]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT]

//>> CLEAR_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT]

//>> GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT]

//>> GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT]
static inline bool GET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_CORRUPT]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT]

//>> CLEAR_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT]

//>> GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT]

//>> GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT]
static inline bool GET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_SENT]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE]

//>> CLEAR_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE]

//>> GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE]

//>> GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE]
static inline bool GET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_BAD_WRITE]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET]

//>> CLEAR_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET]

//>> GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET]

//>> GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET]
static inline bool GET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_RESET]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID]

//>> CLEAR_[PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID]

//>> GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID]

//>> GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID]
static inline bool GET_PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_AILBOX_ID]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_ID]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_ID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_ID,
           PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_ID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_ID]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_ID]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_ID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_ID,
           PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_ID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_ID]

//>> GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_ID]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_ID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_ID,
           PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_ID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_LINK_ID]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_SPARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_SPARE,
           PB_PTLSCOM67_MAILBOX_CTL_REG_B_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_SPARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_SPARE]

//>> SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_SPARE,
           PB_PTLSCOM67_MAILBOX_CTL_REG_B_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_SPARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_SPARE]

//>> GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_MAILBOX_CTL_REG_B_SPARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_MAILBOX_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_MAILBOX_CTL_REG_B_SPARE,
           PB_PTLSCOM67_MAILBOX_CTL_REG_B_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_MAILBOX_CTL_REG_B_SPARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_MAILBOX_CTL_REG_B_SPARE]

//>> PREP_[PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG]

//>> GET_[PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG;
#endif
    return fapi2::getScom(i_target, PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG]

//>> PUT_[PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG));
#endif
    return fapi2::putScom(i_target, PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG]


//>> SET_[PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG_DECAY_1_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG_DECAY_1_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG_DECAY_1_ADDRESS,
           PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG_DECAY_1_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG_DECAY_1_ADDRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG_DECAY_1_ADDRESS]

//>> SET_[PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG_DECAY_1_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG_DECAY_1_ADDRESS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG_DECAY_1_ADDRESS,
           PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG_DECAY_1_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG_DECAY_1_ADDRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG_DECAY_1_ADDRESS]

//>> GET_[PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG_DECAY_1_ADDRESS]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG_DECAY_1_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG_DECAY_1_ADDRESS,
           PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG_DECAY_1_ADDRESS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG_DECAY_1_ADDRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_DECAY_1_ADDRESS_REG_DECAY_1_ADDRESS]

//>> PREP_[PB_BRIDGE_NHTM_SC_HTM0_LAST]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_BRIDGE_NHTM_SC_HTM0_LAST(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_NHTM_SC_HTM0_LAST;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_BRIDGE_NHTM_SC_HTM0_LAST]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM0_LAST]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_BRIDGE_NHTM_SC_HTM0_LAST(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_NHTM_SC_HTM0_LAST;
#endif
    return fapi2::getScom(i_target, PB_BRIDGE_NHTM_SC_HTM0_LAST, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM0_LAST]

//>> PUT_[PB_BRIDGE_NHTM_SC_HTM0_LAST]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_BRIDGE_NHTM_SC_HTM0_LAST(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM0_LAST));
#endif
    return fapi2::putScom(i_target, PB_BRIDGE_NHTM_SC_HTM0_LAST, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_BRIDGE_NHTM_SC_HTM0_LAST]


//>> SET_[PB_BRIDGE_NHTM_SC_HTM0_LAST_HTM0_LAST_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM0_LAST_HTM0_LAST_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM0_LAST));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM0_LAST_HTM0_LAST_ADDRESS,
           PB_BRIDGE_NHTM_SC_HTM0_LAST_HTM0_LAST_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM0_LAST_HTM0_LAST_ADDRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM0_LAST_HTM0_LAST_ADDRESS]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM0_LAST_HTM0_LAST_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM0_LAST_HTM0_LAST_ADDRESS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM0_LAST));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM0_LAST_HTM0_LAST_ADDRESS,
           PB_BRIDGE_NHTM_SC_HTM0_LAST_HTM0_LAST_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM0_LAST_HTM0_LAST_ADDRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM0_LAST_HTM0_LAST_ADDRESS]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM0_LAST_HTM0_LAST_ADDRESS]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM0_LAST_HTM0_LAST_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM0_LAST));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM0_LAST_HTM0_LAST_ADDRESS,
           PB_BRIDGE_NHTM_SC_HTM0_LAST_HTM0_LAST_ADDRESS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM0_LAST_HTM0_LAST_ADDRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM0_LAST_HTM0_LAST_ADDRESS]

//>> PREP_[PSI_MAC_SCOM_REGS_TX_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PSI_MAC_SCOM_REGS_TX_STATUS(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PSI_MAC_SCOM_REGS_TX_STATUS;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PSI_MAC_SCOM_REGS_TX_STATUS]

//>> GET_[PSI_MAC_SCOM_REGS_TX_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PSI_MAC_SCOM_REGS_TX_STATUS(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PSI_MAC_SCOM_REGS_TX_STATUS;
#endif
    return fapi2::getScom(i_target, PSI_MAC_SCOM_REGS_TX_STATUS, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PSI_MAC_SCOM_REGS_TX_STATUS]

//>> PUT_[PSI_MAC_SCOM_REGS_TX_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PSI_MAC_SCOM_REGS_TX_STATUS(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_TX_STATUS));
#endif
    return fapi2::putScom(i_target, PSI_MAC_SCOM_REGS_TX_STATUS, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PSI_MAC_SCOM_REGS_TX_STATUS]


//>> SET_[PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_STATUS_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_STATUS_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_TX_STATUS));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_STATUS_SPARE,
           PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_STATUS_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_STATUS_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_STATUS_SPARE]

//>> SET_[PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_STATUS_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_STATUS_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_TX_STATUS));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_STATUS_SPARE,
           PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_STATUS_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_STATUS_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_STATUS_SPARE]

//>> GET_[PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_STATUS_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_STATUS_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_TX_STATUS));
#endif
    return i_data.extractToRight<PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_STATUS_SPARE,
           PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_STATUS_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_STATUS_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_STATUS_SPARE]

//>> SET_[PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_TX_STATUS));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_ERROR,
           PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_ERROR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_ERROR]

//>> SET_[PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_TX_STATUS));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_ERROR,
           PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_ERROR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_ERROR]

//>> GET_[PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_TX_STATUS));
#endif
    return i_data.extractToRight<PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_ERROR,
           PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_ERROR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_ERROR]

//>> SET_[PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_DONE_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_DONE_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_TX_STATUS));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_DONE_RO_SIGNAL,
           PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_DONE_RO_SIGNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_DONE_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_DONE_RO_SIGNAL]

//>> SET_[PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_DONE_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_DONE_RO_SIGNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_TX_STATUS));
#endif
    return o_data.insertFromRight<PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_DONE_RO_SIGNAL,
           PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_DONE_RO_SIGNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_DONE_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_DONE_RO_SIGNAL]

//>> GET_[PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_DONE_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& GET_PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_DONE_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PSI_MAC_SCOM_REGS_TX_STATUS));
#endif
    return i_data.extractToRight<PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_DONE_RO_SIGNAL,
           PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_DONE_RO_SIGNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_DONE_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PSI_MAC_SCOM_REGS_TX_STATUS_TX_PSI_BIST_DONE_RO_SIGNAL]

//>> PREP_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1]

//>> PUT_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1]


//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_A(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_A,
           TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_A chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_A]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_A,
           TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_A chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_A]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_A(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_A,
           TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_A_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_A chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_A]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_B,
           TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_B]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_B,
           TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_B]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_B]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_B,
           TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_B_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND1_SEL_B]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_A(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_A,
           TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_A chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_A]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_A,
           TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_A chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_A]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_A(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_A,
           TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_A_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_A chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_A]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_B,
           TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_B]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_B,
           TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_B]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_B]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_B,
           TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_B_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND2_SEL_B]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_INAROW_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_INAROW_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_AND_TRIGGER_MODE2]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_NOT_TRIGGER_MODE2]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EDGE_TRIGGER_MODE2]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_COND3_ENABLE_RESET]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_TO_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C2TIMER_ON_C1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_ON_C0]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_SLOW_TO_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_EXACT_RESET_C3_ON_TO]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_COUNT_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_COUNT_LT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_COUNT_LT,
           TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_COUNT_LT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_COUNT_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_COUNT_LT]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_COUNT_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_COUNT_LT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_COUNT_LT,
           TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_COUNT_LT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_COUNT_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_COUNT_LT]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_COUNT_LT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_COUNT_LT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_COUNT_LT,
           TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_COUNT_LT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_COUNT_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C1_COUNT_LT]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_COUNT_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_COUNT_LT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_COUNT_LT,
           TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_COUNT_LT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_COUNT_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_COUNT_LT]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_COUNT_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_COUNT_LT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_COUNT_LT,
           TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_COUNT_LT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_COUNT_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_COUNT_LT]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_COUNT_LT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_COUNT_LT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_COUNT_LT,
           TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_COUNT_LT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_COUNT_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_C2_COUNT_LT]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_SELECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_SELECT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_SELECT,
           TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_SELECT]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_SELECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_SELECT,
           TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_SELECT]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_SELECT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_SELECT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_SELECT,
           TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST1_COND_REG_1_RESET_C3_SELECT]

//>> PREP_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1]

//>> PUT_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1]


//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_A(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_A,
           TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_A chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_A]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_A,
           TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_A chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_A]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_A(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_A,
           TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_A_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_A chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_A]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_B,
           TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_B]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_B,
           TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_B]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_B]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_B,
           TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_B_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND1_SEL_B]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_A(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_A,
           TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_A chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_A]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_A,
           TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_A chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_A]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_A(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_A,
           TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_A_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_A chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_A]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_B,
           TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_B]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_B,
           TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_B]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_B]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_B,
           TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_B_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_B chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND2_SEL_B]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_INAROW_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_INAROW_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_AND_TRIGGER_MODE2]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_NOT_TRIGGER_MODE2]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EDGE_TRIGGER_MODE2]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_COND3_ENABLE_RESET]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_TO_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C2TIMER_ON_C1]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_ON_C0]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_SLOW_TO_MODE]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO]
static inline bool GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_EXACT_RESET_C3_ON_TO]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_COUNT_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_COUNT_LT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_COUNT_LT,
           TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_COUNT_LT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_COUNT_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_COUNT_LT]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_COUNT_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_COUNT_LT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_COUNT_LT,
           TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_COUNT_LT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_COUNT_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_COUNT_LT]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_COUNT_LT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_COUNT_LT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_COUNT_LT,
           TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_COUNT_LT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_COUNT_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C1_COUNT_LT]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_COUNT_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_COUNT_LT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_COUNT_LT,
           TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_COUNT_LT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_COUNT_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_COUNT_LT]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_COUNT_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_COUNT_LT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_COUNT_LT,
           TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_COUNT_LT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_COUNT_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_COUNT_LT]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_COUNT_LT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_COUNT_LT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_COUNT_LT,
           TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_COUNT_LT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_COUNT_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_C2_COUNT_LT]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_SELECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_SELECT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_SELECT,
           TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_SELECT]

//>> SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_SELECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_SELECT,
           TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_SELECT]

//>> GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_SELECT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_SELECT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_SELECT,
           TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_INST2_COND_REG_1_RESET_C3_SELECT]

//>> PREP_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1]

//>> PUT_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1]


//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_XSTOP_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_RECOV_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SPATTN_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_LXSTOP_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_HOSTATTN_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_SYS_XSTOP_STAGED_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_DBG_TRIG_ERR]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP01]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP02]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP03]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP04]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP05]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP06]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP07]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP08]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP09]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP10]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP11]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP12]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP13]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP14]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15]

//>> SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15]

//>> GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15]
static inline bool GET_TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_CLKSTOP_ON_XSTOP_MASK1_UNIT_TC_FIR_LOCAL_XSTOP15]

//>> PREP_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG]

//>> GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG]

//>> PUT_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG]


//>> SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]

//>> SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]

//>> SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]

//>> CLEAR_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]

//>> GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]

//>> GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]
static inline bool GET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_ADDR_PARITY_ERROR]

//>> SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]

//>> SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]

//>> SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]

//>> CLEAR_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]

//>> GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]

//>> GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]
static inline bool GET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_PCB_WDATA_PARITY_ERROR]

//>> SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]

//>> SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]

//>> SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]

//>> CLEAR_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]

//>> GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]

//>> GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]
static inline bool GET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_ABORT_ON_DL_RETURN_WDATA_PARITY_ERROR]

//>> SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]

//>> SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]

//>> SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]

//>> CLEAR_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]

//>> GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]

//>> GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]
static inline bool GET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_WATCHDOG_ENABLE]

//>> SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT,
           TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT]

//>> SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT,
           TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT]

//>> GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT,
           TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_SCOM_HANG_LIMIT]

//>> SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]

//>> SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]

//>> SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]

//>> CLEAR_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]

//>> GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]

//>> GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]
static inline bool GET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FORCE_ALL_RINGS]

//>> SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]
static inline fapi2::buffer<uint64_t>&
SET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]

//>> SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]
static inline fapi2::buffer<uint64_t>&
SET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]

//>> SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]
static inline fapi2::buffer<uint64_t>&
SET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]

//>> CLEAR_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]
static inline fapi2::buffer<uint64_t>&
CLEAR_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]

//>> GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]
static inline fapi2::buffer<uint64_t>&
GET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]

//>> GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]
static inline bool GET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_FSM_SELFRESET_ON_STATEVEC_PARITYERROR_ENABLE]

//>> SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT,
           TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT]

//>> SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT,
           TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT]

//>> GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT,
           TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_PSC_PSCOM_MODE_REG_RESERVED_PSCOM_MODE_LT]

//>> PREP_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG(const fapi2::Target<K, M, V>&
        i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG]

//>> PUT_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG]


//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_CLKSRC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_CLKSRC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_CLKSRC,
           TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_CLKSRC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_CLKSRC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_CLKSRC]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_CLKSRC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_CLKSRC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_CLKSRC,
           TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_CLKSRC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_CLKSRC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_CLKSRC]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_CLKSRC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_CLKSRC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_CLKSRC,
           TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_CLKSRC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_CLKSRC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_CLKSRC]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_DELAY_SELECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_DELAY_SELECT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_DELAY_SELECT,
           TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_DELAY_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_DELAY_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_DELAY_SELECT]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_DELAY_SELECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_DELAY_SELECT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_DELAY_SELECT,
           TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_DELAY_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_DELAY_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_DELAY_SELECT]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_DELAY_SELECT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_DELAY_SELECT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_DELAY_SELECT,
           TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_DELAY_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_DELAY_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_SKITTER_CLKSRC_REG_DELAY_SELECT]

//>> PREP_[TP_TCN0_N0_RECOV]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_RECOV(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_RECOV;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_RECOV]

//>> GET_[TP_TCN0_N0_RECOV]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_RECOV(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_RECOV;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_RECOV, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV]

//>> PUT_[TP_TCN0_N0_RECOV]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_RECOV(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_RECOV, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_RECOV]


//>> SET_[TP_TCN0_N0_RECOV_ANY_RECOV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_ANY_RECOV(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_ANY_RECOV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_ANY_RECOV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_ANY_RECOV]

//>> SET_[TP_TCN0_N0_RECOV_ANY_RECOV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_ANY_RECOV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_ANY_RECOV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_ANY_RECOV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_ANY_RECOV]

//>> SET_[TP_TCN0_N0_RECOV_ANY_RECOV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_ANY_RECOV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_ANY_RECOV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_ANY_RECOV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_ANY_RECOV]

//>> CLEAR_[TP_TCN0_N0_RECOV_ANY_RECOV]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_ANY_RECOV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_ANY_RECOV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_ANY_RECOV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_ANY_RECOV]

//>> GET_[TP_TCN0_N0_RECOV_ANY_RECOV]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_ANY_RECOV(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_ANY_RECOV,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_ANY_RECOV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_ANY_RECOV]

//>> GET_[TP_TCN0_N0_RECOV_ANY_RECOV]
static inline bool GET_TP_TCN0_N0_RECOV_ANY_RECOV(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_ANY_RECOV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_ANY_RECOV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_ANY_RECOV]

//>> SET_[TP_TCN0_N0_RECOV_RESERVED1R]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RESERVED1R(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RESERVED1R,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RESERVED1R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RESERVED1R]

//>> SET_[TP_TCN0_N0_RECOV_RESERVED1R]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RESERVED1R(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RESERVED1R,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RESERVED1R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RESERVED1R]

//>> SET_[TP_TCN0_N0_RECOV_RESERVED1R]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RESERVED1R(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RESERVED1R>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RESERVED1R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RESERVED1R]

//>> CLEAR_[TP_TCN0_N0_RECOV_RESERVED1R]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RESERVED1R(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RESERVED1R>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RESERVED1R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RESERVED1R]

//>> GET_[TP_TCN0_N0_RECOV_RESERVED1R]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RESERVED1R(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RESERVED1R,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RESERVED1R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RESERVED1R]

//>> GET_[TP_TCN0_N0_RECOV_RESERVED1R]
static inline bool GET_TP_TCN0_N0_RECOV_RESERVED1R(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RESERVED1R>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RESERVED1R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RESERVED1R]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_ANY_LOCAL_XSTOP]

//>> SET_[TP_TCN0_N0_RECOV_RESERVED3R]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RESERVED3R(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RESERVED3R,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RESERVED3R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RESERVED3R]

//>> SET_[TP_TCN0_N0_RECOV_RESERVED3R]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RESERVED3R(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RESERVED3R,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RESERVED3R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RESERVED3R]

//>> SET_[TP_TCN0_N0_RECOV_RESERVED3R]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RESERVED3R(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RESERVED3R>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RESERVED3R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RESERVED3R]

//>> CLEAR_[TP_TCN0_N0_RECOV_RESERVED3R]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RESERVED3R(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RESERVED3R>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RESERVED3R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RESERVED3R]

//>> GET_[TP_TCN0_N0_RECOV_RESERVED3R]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RESERVED3R(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RESERVED3R,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RESERVED3R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RESERVED3R]

//>> GET_[TP_TCN0_N0_RECOV_RESERVED3R]
static inline bool GET_TP_TCN0_N0_RECOV_RESERVED3R(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RESERVED3R>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RESERVED3R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RESERVED3R]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_PERV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_PERV(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_PERV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_PERV]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_PERV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_PERV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_PERV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_PERV]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_PERV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_PERV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_PERV]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_PERV]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_PERV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_PERV]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_PERV]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_PERV(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_PERV,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_PERV]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_PERV]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_PERV(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_PERV]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN05(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN05]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN05(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN05]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN05]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN05]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN05]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN05]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN05(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN05,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN05]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN05]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN05(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN05]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN06(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN06]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN06(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN06]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN06]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN06]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN06]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN06]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN06(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN06,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN06]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN06]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN06(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN06]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN07(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN07]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN07(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN07]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN07]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN07]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN07]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN07]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN07(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN07,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN07]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN07]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN07(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN07]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN08(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN08]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN08(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN08]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN08]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN08]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN08]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN08]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN08(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN08,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN08]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN08]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN08(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN08]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN09(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN09]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN09(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN09]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN09]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN09]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN09]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN09]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN09(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN09,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN09]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN09]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN09(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN09]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN10]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN10]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN10]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN10]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN10]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN10]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN10]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN10]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN10]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN11]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN11]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN11]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN11]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN11]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN11]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN11]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN11]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN11]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN12]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN12]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN12]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN12]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN12]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN12]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN12]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN12]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN12]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN13]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN13]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN13]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN13]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN13]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN13]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN13]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN13]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN13]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN14]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN14]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN14]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN14]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN14]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN14]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN14]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN14]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN14]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN15]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN15]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN15]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN15]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN15]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN15]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN15]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN15]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN15]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN16]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN16]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN16]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN16]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN16]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN16]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN16]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN16]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN16]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN16]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN16]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN16]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN17]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN17]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN17]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN17]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN17]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN17]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN17]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN17]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN17]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN17]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN17]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN17]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN18]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN18]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN18]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN18]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN18]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN18]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN18]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN18]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN18]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN18]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN18]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN18]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN19]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN19]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN19]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN19]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN19]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN19]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN19]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN19]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN19]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN19]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN19]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN19]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN20]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN20]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN20]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN20]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN20]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN20]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN20]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN20]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN20]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN20]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN20]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN20]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN21]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN21]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN21]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN21]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN21]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN21]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN21]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN21]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN21]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN21]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN21]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN21]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN22]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN22]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN22]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN22]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN22]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN22]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN22]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN22]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN22]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN22]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN22]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN22]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN23]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN23]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN23]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN23]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN23]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN23]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN23]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN23]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN23]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN23]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN23]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN23]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN24]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN24]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN24]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN24]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN24]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN24]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN24]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN24]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN24]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN24]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN24]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN24]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN25]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN25]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN25]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN25]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN25]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN25]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN25]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN25]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN25]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN25]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN25]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN25]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN26]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN26]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN26]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN26]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN26]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN26]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN26]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN26]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN26]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN26]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN26]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN26]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN27]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN27]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN27]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN27]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN27]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN27]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN27]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN27]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN27]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN27]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN27]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN27]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN28]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN28]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN28]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN28]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN28]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN28]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN28]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN28]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN28]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN28]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN28]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN28]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN29]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN29]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN29]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN29]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN29]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN29]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN29]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN29]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN29]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN29]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN29]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN29]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN30]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN30]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN30]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN30]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN30]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN30]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN30]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN30]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN30]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN30]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN30]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN30]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN31]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN31]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN31]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN31]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN31]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN31]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN31]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN31]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN31]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN31]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN31]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN31]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN32]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN32]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN32]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN32]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN32]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN32]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN32]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN32]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN32]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN32]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN32]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN32]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN33]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN33]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN33]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN33]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN33]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN33]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN33]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN33]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN33]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN33]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN33]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN33]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN34]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN34]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN34]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN34]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN34]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN34]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN34]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN34]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN34]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN34]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN34]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN34]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN35]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN35]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN35]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN35]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN35]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN35]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN35]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN35]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN35]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN35]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN35]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN35]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN36]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN36]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN36]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN36]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN36]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN36]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN36]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN36]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN36]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN36]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN36]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN36]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN37]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN37]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN37]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN37]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN37]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN37]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN37]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN37]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN37]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN37]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN37]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN37]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN38]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN38]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN38]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN38]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN38]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN38]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN38]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN38]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN38]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN38]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN38]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN38]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN39]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN39]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN39]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN39]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN39]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN39]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN39]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN39]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN39]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN39]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN39]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN39]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN40]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN40]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN40]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN40]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN40]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN40]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN40]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN40]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN40]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN40]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN40]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN40]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN41]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN41]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN41]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN41]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN41]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN41]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN41]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN41]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN41]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN41]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN41]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN41]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN42]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN42]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN42]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN42]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN42]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN42]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN42]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN42]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN42]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN42]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN42]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN42]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN43]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN43]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN43]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN43]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN43]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN43]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN43]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN43]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN43]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN43]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN43]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN43]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN44]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN44]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN44]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN44]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN44]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN44]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN44]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN44]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN44]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN44]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN44]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN44]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN45]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN45]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN45]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN45]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN45]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN45]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN45]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN45]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN45]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN45]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN45]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN45]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN46]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN46]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN46]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN46]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN46]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN46]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN46]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN46]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN46]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN46]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN46]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN46]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN47]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN47]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN47]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN47]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN47]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN47]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN47]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN47]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN47]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN47]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN47]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN47]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN48]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN48]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN48]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN48]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN48]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN48]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN48]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN48]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN48]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN48]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN48]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN48]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN49]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN49]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN49]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN49]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN49]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN49]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN49]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN49]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN49]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN49]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN49]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN49]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN50]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN50]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN50]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN50]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN50]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN50]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN50]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN50]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN50]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN50]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN50]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN50]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN51]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN51]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN51]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN51]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN51]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN51]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN51]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN51]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN51]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN51]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN51]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN51]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN52]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN52]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN52]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN52]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN52]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN52]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN52]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN52]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN52]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN52]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN52]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN52]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN53]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN53]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN53]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_RECOV_RECOV_IN53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN53]

//>> SET_[TP_TCN0_N0_RECOV_RECOV_IN53]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_RECOV_RECOV_IN53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.setBit<TP_TCN0_N0_RECOV_RECOV_IN53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_RECOV_RECOV_IN53]

//>> CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN53]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_RECOV_RECOV_IN53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return o_data.clearBit<TP_TCN0_N0_RECOV_RECOV_IN53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_RECOV_RECOV_IN53]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN53]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_RECOV_RECOV_IN53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.extractToRight<TP_TCN0_N0_RECOV_RECOV_IN53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN53]

//>> GET_[TP_TCN0_N0_RECOV_RECOV_IN53]
static inline bool GET_TP_TCN0_N0_RECOV_RECOV_IN53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_RECOV));
#endif
    return i_data.getBit<TP_TCN0_N0_RECOV_RECOV_IN53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_RECOV_RECOV_IN53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_RECOV_RECOV_IN53]

//>> PREP_[TP_TCN0_N0_REGION_CCFLUSH_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_REGION_CCFLUSH_STATUS(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_REGION_CCFLUSH_STATUS;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_REGION_CCFLUSH_STATUS]

//>> GET_[TP_TCN0_N0_REGION_CCFLUSH_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_REGION_CCFLUSH_STATUS(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_REGION_CCFLUSH_STATUS;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_REGION_CCFLUSH_STATUS, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_REGION_CCFLUSH_STATUS]

//>> PUT_[TP_TCN0_N0_REGION_CCFLUSH_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_REGION_CCFLUSH_STATUS(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_REGION_CCFLUSH_STATUS));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_REGION_CCFLUSH_STATUS, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_REGION_CCFLUSH_STATUS]


//>> SET_[TP_TCN0_N0_REGION_CCFLUSH_STATUS_REGION_CCFLUSH]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_REGION_CCFLUSH_STATUS_REGION_CCFLUSH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_REGION_CCFLUSH_STATUS));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_REGION_CCFLUSH_STATUS_REGION_CCFLUSH,
           TP_TCN0_N0_REGION_CCFLUSH_STATUS_REGION_CCFLUSH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_REGION_CCFLUSH_STATUS_REGION_CCFLUSH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_REGION_CCFLUSH_STATUS_REGION_CCFLUSH]

//>> SET_[TP_TCN0_N0_REGION_CCFLUSH_STATUS_REGION_CCFLUSH]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_REGION_CCFLUSH_STATUS_REGION_CCFLUSH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_REGION_CCFLUSH_STATUS));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_REGION_CCFLUSH_STATUS_REGION_CCFLUSH,
           TP_TCN0_N0_REGION_CCFLUSH_STATUS_REGION_CCFLUSH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_REGION_CCFLUSH_STATUS_REGION_CCFLUSH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_REGION_CCFLUSH_STATUS_REGION_CCFLUSH]

//>> GET_[TP_TCN0_N0_REGION_CCFLUSH_STATUS_REGION_CCFLUSH]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_REGION_CCFLUSH_STATUS_REGION_CCFLUSH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_REGION_CCFLUSH_STATUS));
#endif
    return i_data.extractToRight<TP_TCN0_N0_REGION_CCFLUSH_STATUS_REGION_CCFLUSH,
           TP_TCN0_N0_REGION_CCFLUSH_STATUS_REGION_CCFLUSH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_REGION_CCFLUSH_STATUS_REGION_CCFLUSH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_REGION_CCFLUSH_STATUS_REGION_CCFLUSH]

//>> PREP_[TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG]

//>> GET_[TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG]

//>> PUT_[TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG]


//>> SET_[TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA,
           TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA]

//>> SET_[TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA,
           TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA]

//>> GET_[TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA,
           TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA]

//>> PREP_[TP_TCN0_N0_TRA0_TR0_CONFIG_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_TRA0_TR0_CONFIG_2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_TRA0_TR0_CONFIG_2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_TRA0_TR0_CONFIG_2]

//>> GET_[TP_TCN0_N0_TRA0_TR0_CONFIG_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_TRA0_TR0_CONFIG_2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_TRA0_TR0_CONFIG_2;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_TRA0_TR0_CONFIG_2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR0_CONFIG_2]

//>> PUT_[TP_TCN0_N0_TRA0_TR0_CONFIG_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_TRA0_TR0_CONFIG_2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_CONFIG_2));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_TRA0_TR0_CONFIG_2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_TRA0_TR0_CONFIG_2]


//>> SET_[TP_TCN0_N0_TRA0_TR0_CONFIG_2_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_CONFIG_2_A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_CONFIG_2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_CONFIG_2_A,
           TP_TCN0_N0_TRA0_TR0_CONFIG_2_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_CONFIG_2_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_CONFIG_2_A]

//>> SET_[TP_TCN0_N0_TRA0_TR0_CONFIG_2_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_CONFIG_2_A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_CONFIG_2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_CONFIG_2_A,
           TP_TCN0_N0_TRA0_TR0_CONFIG_2_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_CONFIG_2_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_CONFIG_2_A]

//>> GET_[TP_TCN0_N0_TRA0_TR0_CONFIG_2_A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR0_CONFIG_2_A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_CONFIG_2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR0_CONFIG_2_A,
           TP_TCN0_N0_TRA0_TR0_CONFIG_2_A_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_CONFIG_2_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR0_CONFIG_2_A]

//>> SET_[TP_TCN0_N0_TRA0_TR0_CONFIG_2_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_CONFIG_2_B(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_CONFIG_2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_CONFIG_2_B,
           TP_TCN0_N0_TRA0_TR0_CONFIG_2_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_CONFIG_2_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_CONFIG_2_B]

//>> SET_[TP_TCN0_N0_TRA0_TR0_CONFIG_2_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR0_CONFIG_2_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_CONFIG_2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR0_CONFIG_2_B,
           TP_TCN0_N0_TRA0_TR0_CONFIG_2_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_CONFIG_2_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR0_CONFIG_2_B]

//>> GET_[TP_TCN0_N0_TRA0_TR0_CONFIG_2_B]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR0_CONFIG_2_B(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR0_CONFIG_2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR0_CONFIG_2_B,
           TP_TCN0_N0_TRA0_TR0_CONFIG_2_B_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR0_CONFIG_2_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR0_CONFIG_2_B]

//>> PREP_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_EPS_FIR_LOCAL_WOF(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_EPS_FIR_LOCAL_WOF;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_EPS_FIR_LOCAL_WOF;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_EPS_FIR_LOCAL_WOF, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF]

//>> PUT_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_EPS_FIR_LOCAL_WOF(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_EPS_FIR_LOCAL_WOF, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF]


//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_00]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_01]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_02]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_03]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_04]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_05]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_06]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_07]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_08]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_09]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_10]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_11]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_12]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_13]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_14]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_15]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_16]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_17]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_18]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_19]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_20]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_21]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_22]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_23]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_24]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_25]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_26]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_27]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_28]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_29]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_30]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_31]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_32]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_33]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_34]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_35]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_36]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_37]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_38]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_39]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_40]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_41]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_42]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_43]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_44]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_45]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_46]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_47]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_48]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_49]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_50]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_51]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_52]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_53]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_54]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_55]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_56]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_57]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_58]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_59]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_60]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_61]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_62]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63]

//>> SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63]

//>> CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63]

//>> GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63]
static inline bool GET_TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_FIR_LOCAL_WOF_63]

//>> PREP_[TP_TCN1_N1_HOSTATTN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_HOSTATTN(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_HOSTATTN;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_HOSTATTN]

//>> GET_[TP_TCN1_N1_HOSTATTN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_HOSTATTN(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_HOSTATTN;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_HOSTATTN, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN]

//>> PUT_[TP_TCN1_N1_HOSTATTN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_HOSTATTN(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_HOSTATTN, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_HOSTATTN]


//>> SET_[TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN]

//>> SET_[TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN]

//>> SET_[TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN]

//>> GET_[TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN]

//>> GET_[TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN]
static inline bool GET_TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_ANY_HOSTATTN]

//>> SET_[TP_TCN1_N1_HOSTATTN_RESERVED1H]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_RESERVED1H(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_RESERVED1H,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_RESERVED1H chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_RESERVED1H]

//>> SET_[TP_TCN1_N1_HOSTATTN_RESERVED1H]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_RESERVED1H(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_RESERVED1H,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_RESERVED1H chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_RESERVED1H]

//>> SET_[TP_TCN1_N1_HOSTATTN_RESERVED1H]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_RESERVED1H(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_RESERVED1H>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_RESERVED1H chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_RESERVED1H]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_RESERVED1H]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_RESERVED1H(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_RESERVED1H>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_RESERVED1H chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_RESERVED1H]

//>> GET_[TP_TCN1_N1_HOSTATTN_RESERVED1H]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_RESERVED1H(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_RESERVED1H,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_RESERVED1H chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_RESERVED1H]

//>> GET_[TP_TCN1_N1_HOSTATTN_RESERVED1H]
static inline bool GET_TP_TCN1_N1_HOSTATTN_RESERVED1H(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_RESERVED1H>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_RESERVED1H chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_RESERVED1H]

//>> SET_[TP_TCN1_N1_HOSTATTN_RESERVED2H]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_RESERVED2H(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_RESERVED2H,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_RESERVED2H chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_RESERVED2H]

//>> SET_[TP_TCN1_N1_HOSTATTN_RESERVED2H]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_RESERVED2H(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_RESERVED2H,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_RESERVED2H chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_RESERVED2H]

//>> SET_[TP_TCN1_N1_HOSTATTN_RESERVED2H]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_RESERVED2H(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_RESERVED2H>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_RESERVED2H chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_RESERVED2H]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_RESERVED2H]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_RESERVED2H(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_RESERVED2H>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_RESERVED2H chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_RESERVED2H]

//>> GET_[TP_TCN1_N1_HOSTATTN_RESERVED2H]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_RESERVED2H(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_RESERVED2H,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_RESERVED2H chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_RESERVED2H]

//>> GET_[TP_TCN1_N1_HOSTATTN_RESERVED2H]
static inline bool GET_TP_TCN1_N1_HOSTATTN_RESERVED2H(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_RESERVED2H>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_RESERVED2H chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_RESERVED2H]

//>> SET_[TP_TCN1_N1_HOSTATTN_RESERVED3H]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_RESERVED3H(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_RESERVED3H,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_RESERVED3H chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_RESERVED3H]

//>> SET_[TP_TCN1_N1_HOSTATTN_RESERVED3H]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_RESERVED3H(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_RESERVED3H,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_RESERVED3H chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_RESERVED3H]

//>> SET_[TP_TCN1_N1_HOSTATTN_RESERVED3H]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_RESERVED3H(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_RESERVED3H>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_RESERVED3H chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_RESERVED3H]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_RESERVED3H]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_RESERVED3H(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_RESERVED3H>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_RESERVED3H chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_RESERVED3H]

//>> GET_[TP_TCN1_N1_HOSTATTN_RESERVED3H]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_RESERVED3H(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_RESERVED3H,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_RESERVED3H chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_RESERVED3H]

//>> GET_[TP_TCN1_N1_HOSTATTN_RESERVED3H]
static inline bool GET_TP_TCN1_N1_HOSTATTN_RESERVED3H(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_RESERVED3H>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_RESERVED3H chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_RESERVED3H]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_PERV]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN05]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN06]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN07]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN08]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN09]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN10]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN11]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN12]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN13]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN14]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN15]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN16]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN17]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN18]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN19]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN20]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN21]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN22]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN23]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN24]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN25]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN26]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN27]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN28]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN29]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN30]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN31]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN32]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN33]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN34]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN35]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN36]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN37]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN38]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN39]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN40]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN41]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN42]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN43]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN44]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN45]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN46]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN47]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN48]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN49]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN50]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN51]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN52]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53]

//>> SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.setBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53]

//>> CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return o_data.clearBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.extractToRight<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53]

//>> GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53]
static inline bool GET_TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_HOSTATTN));
#endif
    return i_data.getBit<TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_HOSTATTN_HOSTATTN_IN53]

//>> PREP_[TP_TCN1_N1_OPCG_REG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_OPCG_REG2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_OPCG_REG2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_OPCG_REG2]

//>> GET_[TP_TCN1_N1_OPCG_REG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_OPCG_REG2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_OPCG_REG2;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_OPCG_REG2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG2]

//>> PUT_[TP_TCN1_N1_OPCG_REG2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_OPCG_REG2(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_OPCG_REG2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_OPCG_REG2]


//>> SET_[TP_TCN1_N1_OPCG_REG2_OPCG_GO2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_OPCG_GO2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_OPCG_GO2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_OPCG_GO2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_OPCG_GO2]

//>> SET_[TP_TCN1_N1_OPCG_REG2_OPCG_GO2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_OPCG_GO2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_OPCG_GO2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_OPCG_GO2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_OPCG_GO2]

//>> SET_[TP_TCN1_N1_OPCG_REG2_OPCG_GO2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_OPCG_GO2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.setBit<TP_TCN1_N1_OPCG_REG2_OPCG_GO2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_OPCG_GO2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_OPCG_GO2]

//>> CLEAR_[TP_TCN1_N1_OPCG_REG2_OPCG_GO2]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_OPCG_REG2_OPCG_GO2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.clearBit<TP_TCN1_N1_OPCG_REG2_OPCG_GO2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_OPCG_GO2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_OPCG_REG2_OPCG_GO2]

//>> GET_[TP_TCN1_N1_OPCG_REG2_OPCG_GO2]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG2_OPCG_GO2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG2_OPCG_GO2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_OPCG_GO2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG2_OPCG_GO2]

//>> GET_[TP_TCN1_N1_OPCG_REG2_OPCG_GO2]
static inline bool GET_TP_TCN1_N1_OPCG_REG2_OPCG_GO2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return i_data.getBit<TP_TCN1_N1_OPCG_REG2_OPCG_GO2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_OPCG_GO2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG2_OPCG_GO2]

//>> SET_[TP_TCN1_N1_OPCG_REG2_PRPG_WEIGHTING]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_PRPG_WEIGHTING(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_PRPG_WEIGHTING,
           TP_TCN1_N1_OPCG_REG2_PRPG_WEIGHTING_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_PRPG_WEIGHTING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_PRPG_WEIGHTING]

//>> SET_[TP_TCN1_N1_OPCG_REG2_PRPG_WEIGHTING]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_PRPG_WEIGHTING(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_PRPG_WEIGHTING,
           TP_TCN1_N1_OPCG_REG2_PRPG_WEIGHTING_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_PRPG_WEIGHTING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_PRPG_WEIGHTING]

//>> GET_[TP_TCN1_N1_OPCG_REG2_PRPG_WEIGHTING]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG2_PRPG_WEIGHTING(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG2_PRPG_WEIGHTING,
           TP_TCN1_N1_OPCG_REG2_PRPG_WEIGHTING_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_PRPG_WEIGHTING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG2_PRPG_WEIGHTING]

//>> SET_[TP_TCN1_N1_OPCG_REG2_PRPG_SEED]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_PRPG_SEED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_PRPG_SEED,
           TP_TCN1_N1_OPCG_REG2_PRPG_SEED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_PRPG_SEED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_PRPG_SEED]

//>> SET_[TP_TCN1_N1_OPCG_REG2_PRPG_SEED]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_PRPG_SEED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_PRPG_SEED,
           TP_TCN1_N1_OPCG_REG2_PRPG_SEED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_PRPG_SEED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_PRPG_SEED]

//>> GET_[TP_TCN1_N1_OPCG_REG2_PRPG_SEED]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG2_PRPG_SEED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG2_PRPG_SEED,
           TP_TCN1_N1_OPCG_REG2_PRPG_SEED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_PRPG_SEED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG2_PRPG_SEED]

//>> SET_[TP_TCN1_N1_OPCG_REG2_PRPG_A_VAL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_PRPG_A_VAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_PRPG_A_VAL,
           TP_TCN1_N1_OPCG_REG2_PRPG_A_VAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_PRPG_A_VAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_PRPG_A_VAL]

//>> SET_[TP_TCN1_N1_OPCG_REG2_PRPG_A_VAL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_PRPG_A_VAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_PRPG_A_VAL,
           TP_TCN1_N1_OPCG_REG2_PRPG_A_VAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_PRPG_A_VAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_PRPG_A_VAL]

//>> GET_[TP_TCN1_N1_OPCG_REG2_PRPG_A_VAL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG2_PRPG_A_VAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG2_PRPG_A_VAL,
           TP_TCN1_N1_OPCG_REG2_PRPG_A_VAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_PRPG_A_VAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG2_PRPG_A_VAL]

//>> SET_[TP_TCN1_N1_OPCG_REG2_PRPG_B_VAL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_PRPG_B_VAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_PRPG_B_VAL,
           TP_TCN1_N1_OPCG_REG2_PRPG_B_VAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_PRPG_B_VAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_PRPG_B_VAL]

//>> SET_[TP_TCN1_N1_OPCG_REG2_PRPG_B_VAL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_PRPG_B_VAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_PRPG_B_VAL,
           TP_TCN1_N1_OPCG_REG2_PRPG_B_VAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_PRPG_B_VAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_PRPG_B_VAL]

//>> GET_[TP_TCN1_N1_OPCG_REG2_PRPG_B_VAL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG2_PRPG_B_VAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG2_PRPG_B_VAL,
           TP_TCN1_N1_OPCG_REG2_PRPG_B_VAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_PRPG_B_VAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG2_PRPG_B_VAL]

//>> SET_[TP_TCN1_N1_OPCG_REG2_PRPG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_PRPG_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_PRPG_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_PRPG_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_PRPG_MODE]

//>> SET_[TP_TCN1_N1_OPCG_REG2_PRPG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_PRPG_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_PRPG_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_PRPG_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_PRPG_MODE]

//>> SET_[TP_TCN1_N1_OPCG_REG2_PRPG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_PRPG_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.setBit<TP_TCN1_N1_OPCG_REG2_PRPG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_PRPG_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_PRPG_MODE]

//>> CLEAR_[TP_TCN1_N1_OPCG_REG2_PRPG_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_OPCG_REG2_PRPG_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.clearBit<TP_TCN1_N1_OPCG_REG2_PRPG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_PRPG_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_OPCG_REG2_PRPG_MODE]

//>> GET_[TP_TCN1_N1_OPCG_REG2_PRPG_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG2_PRPG_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG2_PRPG_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_PRPG_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG2_PRPG_MODE]

//>> GET_[TP_TCN1_N1_OPCG_REG2_PRPG_MODE]
static inline bool GET_TP_TCN1_N1_OPCG_REG2_PRPG_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return i_data.getBit<TP_TCN1_N1_OPCG_REG2_PRPG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_PRPG_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG2_PRPG_MODE]

//>> SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_PRIM]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_PRIM(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_PRIM,
           TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_PRIM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_PRIM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_PRIM]

//>> SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_PRIM]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_PRIM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_PRIM,
           TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_PRIM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_PRIM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_PRIM]

//>> GET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_PRIM]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_PRIM(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_PRIM,
           TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_PRIM_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_PRIM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_PRIM]

//>> SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_SEC_OR_APERTURE_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_SEC_OR_APERTURE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_SEC_OR_APERTURE_MASK,
           TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_SEC_OR_APERTURE_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_SEC_OR_APERTURE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_SEC_OR_APERTURE_MASK]

//>> SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_SEC_OR_APERTURE_MASK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_SEC_OR_APERTURE_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_SEC_OR_APERTURE_MASK,
           TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_SEC_OR_APERTURE_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_SEC_OR_APERTURE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_SEC_OR_APERTURE_MASK]

//>> GET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_SEC_OR_APERTURE_MASK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_SEC_OR_APERTURE_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_SEC_OR_APERTURE_MASK,
           TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_SEC_OR_APERTURE_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_SEC_OR_APERTURE_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_WEIGHT_SEL_SEC_OR_APERTURE_MASK]

//>> SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT]

//>> SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT]

//>> SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.setBit<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT]

//>> CLEAR_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.clearBit<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT]

//>> GET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT]

//>> GET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT]
static inline bool GET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return i_data.getBit<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_MODE_SELECT]

//>> SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE]

//>> SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE]

//>> SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.setBit<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE]

//>> CLEAR_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.clearBit<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE]

//>> GET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE]

//>> GET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE]
static inline bool GET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return i_data.getBit<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_PRPG_HOLD_MODE]

//>> SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE]

//>> SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE]

//>> SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.setBit<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE]

//>> CLEAR_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.clearBit<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE]

//>> GET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE]

//>> GET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE]
static inline bool GET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return i_data.getBit<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOCAL_OVERRIDE]

//>> SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE]

//>> SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE]

//>> SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.setBit<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE]

//>> CLEAR_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.clearBit<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE]

//>> GET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE]

//>> GET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE]
static inline bool GET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return i_data.getBit<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_VALUE]

//>> SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_SELECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_SELECT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_SELECT,
           TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_SELECT]

//>> SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_SELECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_SELECT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_SELECT,
           TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_SELECT]

//>> GET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_SELECT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_SELECT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_REG2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_SELECT,
           TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_REG2_SM_LBIST_CTRL_LOAD_APERTURE_SELECT]

//>> PREP_[TP_TCN1_N1_TRA0_TR1_CONFIG_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA0_TR1_CONFIG_3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA0_TR1_CONFIG_3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA0_TR1_CONFIG_3]

//>> GET_[TP_TCN1_N1_TRA0_TR1_CONFIG_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA0_TR1_CONFIG_3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA0_TR1_CONFIG_3;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA0_TR1_CONFIG_3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA0_TR1_CONFIG_3]

//>> PUT_[TP_TCN1_N1_TRA0_TR1_CONFIG_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA0_TR1_CONFIG_3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR1_CONFIG_3));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA0_TR1_CONFIG_3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA0_TR1_CONFIG_3]


//>> SET_[TP_TCN1_N1_TRA0_TR1_CONFIG_3_C]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA0_TR1_CONFIG_3_C(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR1_CONFIG_3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA0_TR1_CONFIG_3_C,
           TP_TCN1_N1_TRA0_TR1_CONFIG_3_C_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR1_CONFIG_3_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA0_TR1_CONFIG_3_C]

//>> SET_[TP_TCN1_N1_TRA0_TR1_CONFIG_3_C]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA0_TR1_CONFIG_3_C(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR1_CONFIG_3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA0_TR1_CONFIG_3_C,
           TP_TCN1_N1_TRA0_TR1_CONFIG_3_C_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR1_CONFIG_3_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA0_TR1_CONFIG_3_C]

//>> GET_[TP_TCN1_N1_TRA0_TR1_CONFIG_3_C]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA0_TR1_CONFIG_3_C(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR1_CONFIG_3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA0_TR1_CONFIG_3_C,
           TP_TCN1_N1_TRA0_TR1_CONFIG_3_C_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR1_CONFIG_3_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA0_TR1_CONFIG_3_C]

//>> SET_[TP_TCN1_N1_TRA0_TR1_CONFIG_3_D]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA0_TR1_CONFIG_3_D(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR1_CONFIG_3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA0_TR1_CONFIG_3_D,
           TP_TCN1_N1_TRA0_TR1_CONFIG_3_D_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR1_CONFIG_3_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA0_TR1_CONFIG_3_D]

//>> SET_[TP_TCN1_N1_TRA0_TR1_CONFIG_3_D]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA0_TR1_CONFIG_3_D(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR1_CONFIG_3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA0_TR1_CONFIG_3_D,
           TP_TCN1_N1_TRA0_TR1_CONFIG_3_D_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR1_CONFIG_3_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA0_TR1_CONFIG_3_D]

//>> GET_[TP_TCN1_N1_TRA0_TR1_CONFIG_3_D]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA0_TR1_CONFIG_3_D(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR1_CONFIG_3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA0_TR1_CONFIG_3_D,
           TP_TCN1_N1_TRA0_TR1_CONFIG_3_D_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR1_CONFIG_3_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA0_TR1_CONFIG_3_D]

//>> PREP_[TP_TCN1_N1_TRA1_TR0_CONFIG_5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA1_TR0_CONFIG_5(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA1_TR0_CONFIG_5;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA1_TR0_CONFIG_5]

//>> GET_[TP_TCN1_N1_TRA1_TR0_CONFIG_5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA1_TR0_CONFIG_5(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA1_TR0_CONFIG_5;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA1_TR0_CONFIG_5, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA1_TR0_CONFIG_5]

//>> PUT_[TP_TCN1_N1_TRA1_TR0_CONFIG_5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA1_TR0_CONFIG_5(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR0_CONFIG_5));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA1_TR0_CONFIG_5, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA1_TR0_CONFIG_5]


//>> SET_[TP_TCN1_N1_TRA1_TR0_CONFIG_5_C]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA1_TR0_CONFIG_5_C(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR0_CONFIG_5));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA1_TR0_CONFIG_5_C,
           TP_TCN1_N1_TRA1_TR0_CONFIG_5_C_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA1_TR0_CONFIG_5_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA1_TR0_CONFIG_5_C]

//>> SET_[TP_TCN1_N1_TRA1_TR0_CONFIG_5_C]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA1_TR0_CONFIG_5_C(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR0_CONFIG_5));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA1_TR0_CONFIG_5_C,
           TP_TCN1_N1_TRA1_TR0_CONFIG_5_C_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA1_TR0_CONFIG_5_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA1_TR0_CONFIG_5_C]

//>> GET_[TP_TCN1_N1_TRA1_TR0_CONFIG_5_C]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA1_TR0_CONFIG_5_C(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR0_CONFIG_5));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA1_TR0_CONFIG_5_C,
           TP_TCN1_N1_TRA1_TR0_CONFIG_5_C_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA1_TR0_CONFIG_5_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA1_TR0_CONFIG_5_C]

//>> SET_[TP_TCN1_N1_TRA1_TR0_CONFIG_5_D]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA1_TR0_CONFIG_5_D(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR0_CONFIG_5));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA1_TR0_CONFIG_5_D,
           TP_TCN1_N1_TRA1_TR0_CONFIG_5_D_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA1_TR0_CONFIG_5_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA1_TR0_CONFIG_5_D]

//>> SET_[TP_TCN1_N1_TRA1_TR0_CONFIG_5_D]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA1_TR0_CONFIG_5_D(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR0_CONFIG_5));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA1_TR0_CONFIG_5_D,
           TP_TCN1_N1_TRA1_TR0_CONFIG_5_D_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA1_TR0_CONFIG_5_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA1_TR0_CONFIG_5_D]

//>> GET_[TP_TCN1_N1_TRA1_TR0_CONFIG_5_D]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA1_TR0_CONFIG_5_D(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR0_CONFIG_5));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA1_TR0_CONFIG_5_D,
           TP_TCN1_N1_TRA1_TR0_CONFIG_5_D_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA1_TR0_CONFIG_5_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA1_TR0_CONFIG_5_D]

//>> PREP_[TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG]

//>> GET_[TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG]

//>> PUT_[TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG]


//>> SET_[TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA,
           TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA]

//>> SET_[TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA,
           TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA]

//>> GET_[TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA,
           TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA1_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA]

//>> PREP_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG]

//>> GET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG]

//>> PUT_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG]


//>> SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LO_DATA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LO_DATA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LO_DATA,
           TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LO_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LO_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LO_DATA]

//>> SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LO_DATA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LO_DATA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LO_DATA,
           TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LO_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LO_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LO_DATA]

//>> GET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LO_DATA]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LO_DATA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LO_DATA,
           TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LO_DATA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LO_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LO_DATA]

//>> SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_ADDRESS,
           TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_ADDRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_ADDRESS]

//>> SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_ADDRESS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_ADDRESS,
           TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_ADDRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_ADDRESS]

//>> GET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_ADDRESS]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_ADDRESS,
           TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_ADDRESS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_ADDRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_ADDRESS]

//>> SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK,
           TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK]

//>> SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK,
           TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK]

//>> GET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK,
           TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK]

//>> SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> CLEAR_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> GET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> GET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline bool GET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> CLEAR_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> GET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> GET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline bool GET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING]

//>> SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING]

//>> SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING]

//>> CLEAR_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING]

//>> GET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING]

//>> GET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING]
static inline bool GET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_RUNNING]

//>> SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS,
           TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS]

//>> SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS,
           TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS]

//>> GET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS,
           TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS]

//>> PREP_[TP_TCN1_N1_TRA2_TR0_CONFIG_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA2_TR0_CONFIG_2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA2_TR0_CONFIG_2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA2_TR0_CONFIG_2]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA2_TR0_CONFIG_2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA2_TR0_CONFIG_2;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA2_TR0_CONFIG_2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_2]

//>> PUT_[TP_TCN1_N1_TRA2_TR0_CONFIG_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA2_TR0_CONFIG_2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG_2));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA2_TR0_CONFIG_2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA2_TR0_CONFIG_2]


//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_2_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_2_A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG_2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_2_A,
           TP_TCN1_N1_TRA2_TR0_CONFIG_2_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_2_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_2_A]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_2_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_2_A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG_2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_2_A,
           TP_TCN1_N1_TRA2_TR0_CONFIG_2_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_2_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_2_A]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_2_A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR0_CONFIG_2_A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG_2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR0_CONFIG_2_A,
           TP_TCN1_N1_TRA2_TR0_CONFIG_2_A_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_2_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_2_A]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_2_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_2_B(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG_2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_2_B,
           TP_TCN1_N1_TRA2_TR0_CONFIG_2_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_2_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_2_B]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_2_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_2_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG_2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_2_B,
           TP_TCN1_N1_TRA2_TR0_CONFIG_2_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_2_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_2_B]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_2_B]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR0_CONFIG_2_B(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG_2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR0_CONFIG_2_B,
           TP_TCN1_N1_TRA2_TR0_CONFIG_2_B_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_2_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_2_B]

//>> PREP_[TP_TCN1_N1_TRA3_TR1_CONFIG_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA3_TR1_CONFIG_4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA3_TR1_CONFIG_4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA3_TR1_CONFIG_4]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA3_TR1_CONFIG_4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA3_TR1_CONFIG_4;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA3_TR1_CONFIG_4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_4]

//>> PUT_[TP_TCN1_N1_TRA3_TR1_CONFIG_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA3_TR1_CONFIG_4(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG_4));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA3_TR1_CONFIG_4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA3_TR1_CONFIG_4]


//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_4_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_4_A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_4_A,
           TP_TCN1_N1_TRA3_TR1_CONFIG_4_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_4_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_4_A]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_4_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_4_A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_4_A,
           TP_TCN1_N1_TRA3_TR1_CONFIG_4_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_4_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_4_A]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_4_A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR1_CONFIG_4_A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG_4));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR1_CONFIG_4_A,
           TP_TCN1_N1_TRA3_TR1_CONFIG_4_A_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_4_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_4_A]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_4_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_4_B(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_4_B,
           TP_TCN1_N1_TRA3_TR1_CONFIG_4_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_4_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_4_B]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_4_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_4_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_4_B,
           TP_TCN1_N1_TRA3_TR1_CONFIG_4_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_4_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_4_B]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_4_B]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR1_CONFIG_4_B(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG_4));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR1_CONFIG_4_B,
           TP_TCN1_N1_TRA3_TR1_CONFIG_4_B_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_4_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_4_B]

//>> PREP_[TP_TCN1_N1_TRA4_TR1_CONFIG_5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA4_TR1_CONFIG_5(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA4_TR1_CONFIG_5;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA4_TR1_CONFIG_5]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA4_TR1_CONFIG_5(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA4_TR1_CONFIG_5;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA4_TR1_CONFIG_5, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_5]

//>> PUT_[TP_TCN1_N1_TRA4_TR1_CONFIG_5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA4_TR1_CONFIG_5(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG_5));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA4_TR1_CONFIG_5, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA4_TR1_CONFIG_5]


//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_5_C]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_5_C(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG_5));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_5_C,
           TP_TCN1_N1_TRA4_TR1_CONFIG_5_C_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_5_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_5_C]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_5_C]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_5_C(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG_5));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_5_C,
           TP_TCN1_N1_TRA4_TR1_CONFIG_5_C_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_5_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_5_C]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_5_C]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA4_TR1_CONFIG_5_C(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG_5));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA4_TR1_CONFIG_5_C,
           TP_TCN1_N1_TRA4_TR1_CONFIG_5_C_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_5_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_5_C]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_5_D]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_5_D(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG_5));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_5_D,
           TP_TCN1_N1_TRA4_TR1_CONFIG_5_D_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_5_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_5_D]

//>> SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_5_D]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR1_CONFIG_5_D(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG_5));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR1_CONFIG_5_D,
           TP_TCN1_N1_TRA4_TR1_CONFIG_5_D_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_5_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR1_CONFIG_5_D]

//>> GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_5_D]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA4_TR1_CONFIG_5_D(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR1_CONFIG_5));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA4_TR1_CONFIG_5_D,
           TP_TCN1_N1_TRA4_TR1_CONFIG_5_D_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR1_CONFIG_5_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR1_CONFIG_5_D]

//>> PREP_[TP_TCN1_N1_TRA5_TR0_CONFIG_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA5_TR0_CONFIG_3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA5_TR0_CONFIG_3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA5_TR0_CONFIG_3]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA5_TR0_CONFIG_3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA5_TR0_CONFIG_3;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA5_TR0_CONFIG_3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_3]

//>> PUT_[TP_TCN1_N1_TRA5_TR0_CONFIG_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA5_TR0_CONFIG_3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG_3));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA5_TR0_CONFIG_3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA5_TR0_CONFIG_3]


//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_3_C]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_3_C(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG_3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_3_C,
           TP_TCN1_N1_TRA5_TR0_CONFIG_3_C_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_3_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_3_C]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_3_C]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_3_C(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG_3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_3_C,
           TP_TCN1_N1_TRA5_TR0_CONFIG_3_C_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_3_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_3_C]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_3_C]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA5_TR0_CONFIG_3_C(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG_3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA5_TR0_CONFIG_3_C,
           TP_TCN1_N1_TRA5_TR0_CONFIG_3_C_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_3_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_3_C]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_3_D]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_3_D(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG_3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_3_D,
           TP_TCN1_N1_TRA5_TR0_CONFIG_3_D_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_3_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_3_D]

//>> SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_3_D]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR0_CONFIG_3_D(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG_3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR0_CONFIG_3_D,
           TP_TCN1_N1_TRA5_TR0_CONFIG_3_D_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_3_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR0_CONFIG_3_D]

//>> GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_3_D]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA5_TR0_CONFIG_3_D(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR0_CONFIG_3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA5_TR0_CONFIG_3_D,
           TP_TCN1_N1_TRA5_TR0_CONFIG_3_D_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR0_CONFIG_3_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR0_CONFIG_3_D]

//>> PREP_[TP_TCN1_N1_TRA6_TR0_CONFIG_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA6_TR0_CONFIG_4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA6_TR0_CONFIG_4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA6_TR0_CONFIG_4]

//>> GET_[TP_TCN1_N1_TRA6_TR0_CONFIG_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA6_TR0_CONFIG_4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA6_TR0_CONFIG_4;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA6_TR0_CONFIG_4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA6_TR0_CONFIG_4]

//>> PUT_[TP_TCN1_N1_TRA6_TR0_CONFIG_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA6_TR0_CONFIG_4(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA6_TR0_CONFIG_4));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA6_TR0_CONFIG_4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA6_TR0_CONFIG_4]


//>> SET_[TP_TCN1_N1_TRA6_TR0_CONFIG_4_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA6_TR0_CONFIG_4_A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA6_TR0_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA6_TR0_CONFIG_4_A,
           TP_TCN1_N1_TRA6_TR0_CONFIG_4_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA6_TR0_CONFIG_4_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA6_TR0_CONFIG_4_A]

//>> SET_[TP_TCN1_N1_TRA6_TR0_CONFIG_4_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA6_TR0_CONFIG_4_A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA6_TR0_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA6_TR0_CONFIG_4_A,
           TP_TCN1_N1_TRA6_TR0_CONFIG_4_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA6_TR0_CONFIG_4_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA6_TR0_CONFIG_4_A]

//>> GET_[TP_TCN1_N1_TRA6_TR0_CONFIG_4_A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA6_TR0_CONFIG_4_A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA6_TR0_CONFIG_4));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA6_TR0_CONFIG_4_A,
           TP_TCN1_N1_TRA6_TR0_CONFIG_4_A_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA6_TR0_CONFIG_4_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA6_TR0_CONFIG_4_A]

//>> SET_[TP_TCN1_N1_TRA6_TR0_CONFIG_4_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA6_TR0_CONFIG_4_B(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA6_TR0_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA6_TR0_CONFIG_4_B,
           TP_TCN1_N1_TRA6_TR0_CONFIG_4_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA6_TR0_CONFIG_4_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA6_TR0_CONFIG_4_B]

//>> SET_[TP_TCN1_N1_TRA6_TR0_CONFIG_4_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA6_TR0_CONFIG_4_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA6_TR0_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA6_TR0_CONFIG_4_B,
           TP_TCN1_N1_TRA6_TR0_CONFIG_4_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA6_TR0_CONFIG_4_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA6_TR0_CONFIG_4_B]

//>> GET_[TP_TCN1_N1_TRA6_TR0_CONFIG_4_B]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA6_TR0_CONFIG_4_B(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA6_TR0_CONFIG_4));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA6_TR0_CONFIG_4_B,
           TP_TCN1_N1_TRA6_TR0_CONFIG_4_B_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA6_TR0_CONFIG_4_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA6_TR0_CONFIG_4_B]

//>> PREP_[TP_TCN1_N1_XSTOP1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_XSTOP1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_XSTOP1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_XSTOP1]

//>> GET_[TP_TCN1_N1_XSTOP1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_XSTOP1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_XSTOP1;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_XSTOP1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1]

//>> PUT_[TP_TCN1_N1_XSTOP1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_XSTOP1(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_XSTOP1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_XSTOP1]


//>> SET_[TP_TCN1_N1_XSTOP1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_ENABLE]

//>> SET_[TP_TCN1_N1_XSTOP1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_ENABLE]

//>> SET_[TP_TCN1_N1_XSTOP1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_ENABLE]

//>> CLEAR_[TP_TCN1_N1_XSTOP1_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP1_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP1_ENABLE]

//>> GET_[TP_TCN1_N1_XSTOP1_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP1_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP1_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_ENABLE]

//>> GET_[TP_TCN1_N1_XSTOP1_ENABLE]
static inline bool GET_TP_TCN1_N1_XSTOP1_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_ENABLE]

//>> SET_[TP_TCN1_N1_XSTOP1_WAIT_SNOPA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_WAIT_SNOPA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_WAIT_SNOPA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_WAIT_SNOPA]

//>> SET_[TP_TCN1_N1_XSTOP1_WAIT_SNOPA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_WAIT_SNOPA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_WAIT_SNOPA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_WAIT_SNOPA]

//>> SET_[TP_TCN1_N1_XSTOP1_WAIT_SNOPA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_WAIT_SNOPA(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP1_WAIT_SNOPA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_WAIT_SNOPA]

//>> CLEAR_[TP_TCN1_N1_XSTOP1_WAIT_SNOPA]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP1_WAIT_SNOPA(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP1_WAIT_SNOPA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP1_WAIT_SNOPA]

//>> GET_[TP_TCN1_N1_XSTOP1_WAIT_SNOPA]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP1_WAIT_SNOPA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP1_WAIT_SNOPA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_WAIT_SNOPA]

//>> GET_[TP_TCN1_N1_XSTOP1_WAIT_SNOPA]
static inline bool GET_TP_TCN1_N1_XSTOP1_WAIT_SNOPA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP1_WAIT_SNOPA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_WAIT_SNOPA]

//>> SET_[TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO]

//>> SET_[TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO]

//>> SET_[TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO]

//>> CLEAR_[TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO]

//>> GET_[TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO]

//>> GET_[TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO]
static inline bool GET_TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_TRIGGER_OPCG_GO]

//>> SET_[TP_TCN1_N1_XSTOP1_WAIT_ALWAYS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_WAIT_ALWAYS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_WAIT_ALWAYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_WAIT_ALWAYS]

//>> SET_[TP_TCN1_N1_XSTOP1_WAIT_ALWAYS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_WAIT_ALWAYS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_WAIT_ALWAYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_WAIT_ALWAYS]

//>> SET_[TP_TCN1_N1_XSTOP1_WAIT_ALWAYS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_WAIT_ALWAYS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP1_WAIT_ALWAYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_WAIT_ALWAYS]

//>> CLEAR_[TP_TCN1_N1_XSTOP1_WAIT_ALWAYS]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP1_WAIT_ALWAYS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP1_WAIT_ALWAYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP1_WAIT_ALWAYS]

//>> GET_[TP_TCN1_N1_XSTOP1_WAIT_ALWAYS]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP1_WAIT_ALWAYS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP1_WAIT_ALWAYS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_WAIT_ALWAYS]

//>> GET_[TP_TCN1_N1_XSTOP1_WAIT_ALWAYS]
static inline bool GET_TP_TCN1_N1_XSTOP1_WAIT_ALWAYS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP1_WAIT_ALWAYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_WAIT_ALWAYS]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_PERV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_PERV(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_PERV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_PERV]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_PERV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_PERV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_PERV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_PERV]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_PERV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_PERV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP1_REGION_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_PERV]

//>> CLEAR_[TP_TCN1_N1_XSTOP1_REGION_PERV]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP1_REGION_PERV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP1_REGION_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP1_REGION_PERV]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_PERV]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP1_REGION_PERV(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP1_REGION_PERV,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_PERV]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_PERV]
static inline bool GET_TP_TCN1_N1_XSTOP1_REGION_PERV(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP1_REGION_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_PERV]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT1]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT1]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP1_REGION_UNIT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT1]

//>> CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP1_REGION_UNIT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP1_REGION_UNIT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT1]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP1_REGION_UNIT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP1_REGION_UNIT1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT1]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT1]
static inline bool GET_TP_TCN1_N1_XSTOP1_REGION_UNIT1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP1_REGION_UNIT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT1]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT2]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT2]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP1_REGION_UNIT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT2]

//>> CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP1_REGION_UNIT2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP1_REGION_UNIT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT2]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP1_REGION_UNIT2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP1_REGION_UNIT2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT2]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT2]
static inline bool GET_TP_TCN1_N1_XSTOP1_REGION_UNIT2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP1_REGION_UNIT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT2]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT3]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT3]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP1_REGION_UNIT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT3]

//>> CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP1_REGION_UNIT3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP1_REGION_UNIT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT3]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP1_REGION_UNIT3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP1_REGION_UNIT3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT3]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT3]
static inline bool GET_TP_TCN1_N1_XSTOP1_REGION_UNIT3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP1_REGION_UNIT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT3]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT4]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT4]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP1_REGION_UNIT4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT4]

//>> CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP1_REGION_UNIT4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP1_REGION_UNIT4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT4]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP1_REGION_UNIT4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP1_REGION_UNIT4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT4]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT4]
static inline bool GET_TP_TCN1_N1_XSTOP1_REGION_UNIT4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP1_REGION_UNIT4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT4]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT5]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT5]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP1_REGION_UNIT5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT5]

//>> CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP1_REGION_UNIT5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP1_REGION_UNIT5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT5]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP1_REGION_UNIT5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP1_REGION_UNIT5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT5]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT5]
static inline bool GET_TP_TCN1_N1_XSTOP1_REGION_UNIT5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP1_REGION_UNIT5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT5]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT6]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT6]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP1_REGION_UNIT6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT6]

//>> CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP1_REGION_UNIT6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP1_REGION_UNIT6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT6]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP1_REGION_UNIT6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP1_REGION_UNIT6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT6]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT6]
static inline bool GET_TP_TCN1_N1_XSTOP1_REGION_UNIT6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP1_REGION_UNIT6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT6]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT7]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT7]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP1_REGION_UNIT7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT7]

//>> CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP1_REGION_UNIT7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP1_REGION_UNIT7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT7]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP1_REGION_UNIT7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP1_REGION_UNIT7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT7]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT7]
static inline bool GET_TP_TCN1_N1_XSTOP1_REGION_UNIT7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP1_REGION_UNIT7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT7]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT8]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT8]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP1_REGION_UNIT8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT8]

//>> CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP1_REGION_UNIT8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP1_REGION_UNIT8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT8]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP1_REGION_UNIT8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP1_REGION_UNIT8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT8]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT8]
static inline bool GET_TP_TCN1_N1_XSTOP1_REGION_UNIT8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP1_REGION_UNIT8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT8]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT9]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT9]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP1_REGION_UNIT9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT9]

//>> CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP1_REGION_UNIT9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP1_REGION_UNIT9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT9]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP1_REGION_UNIT9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP1_REGION_UNIT9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT9]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT9]
static inline bool GET_TP_TCN1_N1_XSTOP1_REGION_UNIT9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP1_REGION_UNIT9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT9]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT10]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT10]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP1_REGION_UNIT10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT10]

//>> CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP1_REGION_UNIT10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP1_REGION_UNIT10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT10]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP1_REGION_UNIT10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP1_REGION_UNIT10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT10]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT10]
static inline bool GET_TP_TCN1_N1_XSTOP1_REGION_UNIT10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP1_REGION_UNIT10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT10]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT11]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT11]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP1_REGION_UNIT11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT11]

//>> CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP1_REGION_UNIT11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP1_REGION_UNIT11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT11]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP1_REGION_UNIT11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP1_REGION_UNIT11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT11]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT11]
static inline bool GET_TP_TCN1_N1_XSTOP1_REGION_UNIT11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP1_REGION_UNIT11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT11]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT12]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT12]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP1_REGION_UNIT12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT12]

//>> CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP1_REGION_UNIT12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP1_REGION_UNIT12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT12]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP1_REGION_UNIT12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP1_REGION_UNIT12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT12]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT12]
static inline bool GET_TP_TCN1_N1_XSTOP1_REGION_UNIT12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP1_REGION_UNIT12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT12]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT13]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT13]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP1_REGION_UNIT13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT13]

//>> CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP1_REGION_UNIT13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP1_REGION_UNIT13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT13]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP1_REGION_UNIT13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP1_REGION_UNIT13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT13]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT13]
static inline bool GET_TP_TCN1_N1_XSTOP1_REGION_UNIT13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP1_REGION_UNIT13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT13]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT14]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_REGION_UNIT14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT14]

//>> SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_REGION_UNIT14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.setBit<TP_TCN1_N1_XSTOP1_REGION_UNIT14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_REGION_UNIT14]

//>> CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_XSTOP1_REGION_UNIT14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.clearBit<TP_TCN1_N1_XSTOP1_REGION_UNIT14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_XSTOP1_REGION_UNIT14]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP1_REGION_UNIT14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP1_REGION_UNIT14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT14]

//>> GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT14]
static inline bool GET_TP_TCN1_N1_XSTOP1_REGION_UNIT14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.getBit<TP_TCN1_N1_XSTOP1_REGION_UNIT14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_REGION_UNIT14]

//>> SET_[TP_TCN1_N1_XSTOP1_WAIT_CYCLES]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_WAIT_CYCLES(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_WAIT_CYCLES,
           TP_TCN1_N1_XSTOP1_WAIT_CYCLES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_WAIT_CYCLES chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_WAIT_CYCLES]

//>> SET_[TP_TCN1_N1_XSTOP1_WAIT_CYCLES]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP1_WAIT_CYCLES(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP1_WAIT_CYCLES,
           TP_TCN1_N1_XSTOP1_WAIT_CYCLES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_WAIT_CYCLES chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP1_WAIT_CYCLES]

//>> GET_[TP_TCN1_N1_XSTOP1_WAIT_CYCLES]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP1_WAIT_CYCLES(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP1_WAIT_CYCLES,
           TP_TCN1_N1_XSTOP1_WAIT_CYCLES_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP1_WAIT_CYCLES chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP1_WAIT_CYCLES]

//>> PREP_[TP_TCN1_N1_XSTOP_UNMASKED]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_XSTOP_UNMASKED(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_XSTOP_UNMASKED;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_XSTOP_UNMASKED]

//>> GET_[TP_TCN1_N1_XSTOP_UNMASKED]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_XSTOP_UNMASKED(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_XSTOP_UNMASKED;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_XSTOP_UNMASKED, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP_UNMASKED]

//>> PUT_[TP_TCN1_N1_XSTOP_UNMASKED]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_XSTOP_UNMASKED(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP_UNMASKED));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_XSTOP_UNMASKED, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_XSTOP_UNMASKED]


//>> SET_[TP_TCN1_N1_XSTOP_UNMASKED_XSTOP_UNMASKED_IN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP_UNMASKED_XSTOP_UNMASKED_IN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP_UNMASKED));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP_UNMASKED_XSTOP_UNMASKED_IN,
           TP_TCN1_N1_XSTOP_UNMASKED_XSTOP_UNMASKED_IN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_XSTOP_UNMASKED_XSTOP_UNMASKED_IN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP_UNMASKED_XSTOP_UNMASKED_IN]

//>> SET_[TP_TCN1_N1_XSTOP_UNMASKED_XSTOP_UNMASKED_IN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_XSTOP_UNMASKED_XSTOP_UNMASKED_IN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP_UNMASKED));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_XSTOP_UNMASKED_XSTOP_UNMASKED_IN,
           TP_TCN1_N1_XSTOP_UNMASKED_XSTOP_UNMASKED_IN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_XSTOP_UNMASKED_XSTOP_UNMASKED_IN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_XSTOP_UNMASKED_XSTOP_UNMASKED_IN]

//>> GET_[TP_TCN1_N1_XSTOP_UNMASKED_XSTOP_UNMASKED_IN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_XSTOP_UNMASKED_XSTOP_UNMASKED_IN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_XSTOP_UNMASKED));
#endif
    return i_data.extractToRight<TP_TCN1_N1_XSTOP_UNMASKED_XSTOP_UNMASKED_IN,
           TP_TCN1_N1_XSTOP_UNMASKED_XSTOP_UNMASKED_IN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_XSTOP_UNMASKED_XSTOP_UNMASKED_IN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_XSTOP_UNMASKED_XSTOP_UNMASKED_IN]

//>> PREP_[TP_TPBR_AD_ALTD_OPTION_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TPBR_AD_ALTD_OPTION_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_AD_ALTD_OPTION_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TPBR_AD_ALTD_OPTION_REG]

//>> GET_[TP_TPBR_AD_ALTD_OPTION_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TPBR_AD_ALTD_OPTION_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_AD_ALTD_OPTION_REG;
#endif
    return fapi2::getScom(i_target, TP_TPBR_AD_ALTD_OPTION_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TPBR_AD_ALTD_OPTION_REG]

//>> PUT_[TP_TPBR_AD_ALTD_OPTION_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TPBR_AD_ALTD_OPTION_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return fapi2::putScom(i_target, TP_TPBR_AD_ALTD_OPTION_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TPBR_AD_ALTD_OPTION_REG]


//>> SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT]

//>> SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT]

//>> SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT]

//>> CLEAR_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT]

//>> GET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT]

//>> GET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT]
static inline bool GET_TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PBINIT_LOW_WAIT]

//>> SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE]

//>> SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE]

//>> SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE]

//>> CLEAR_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE]

//>> GET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE]

//>> GET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE]
static inline bool GET_TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_PRE_QUIESCE]

//>> SET_[TP_TPBR_AD_ALTD_OPTION_REG_AFTER_QUIESCE_WAIT_COUNT]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_ALTD_OPTION_REG_AFTER_QUIESCE_WAIT_COUNT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_ALTD_OPTION_REG_AFTER_QUIESCE_WAIT_COUNT,
           TP_TPBR_AD_ALTD_OPTION_REG_AFTER_QUIESCE_WAIT_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_AFTER_QUIESCE_WAIT_COUNT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_ALTD_OPTION_REG_AFTER_QUIESCE_WAIT_COUNT]

//>> SET_[TP_TPBR_AD_ALTD_OPTION_REG_AFTER_QUIESCE_WAIT_COUNT]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_ALTD_OPTION_REG_AFTER_QUIESCE_WAIT_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_ALTD_OPTION_REG_AFTER_QUIESCE_WAIT_COUNT,
           TP_TPBR_AD_ALTD_OPTION_REG_AFTER_QUIESCE_WAIT_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_AFTER_QUIESCE_WAIT_COUNT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_ALTD_OPTION_REG_AFTER_QUIESCE_WAIT_COUNT]

//>> GET_[TP_TPBR_AD_ALTD_OPTION_REG_AFTER_QUIESCE_WAIT_COUNT]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_ALTD_OPTION_REG_AFTER_QUIESCE_WAIT_COUNT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_ALTD_OPTION_REG_AFTER_QUIESCE_WAIT_COUNT,
           TP_TPBR_AD_ALTD_OPTION_REG_AFTER_QUIESCE_WAIT_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_AFTER_QUIESCE_WAIT_COUNT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_ALTD_OPTION_REG_AFTER_QUIESCE_WAIT_COUNT]

//>> SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT]

//>> SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT]

//>> SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT]

//>> CLEAR_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT]

//>> GET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT]

//>> GET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT]
static inline bool GET_TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_POST_INIT]

//>> SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH]

//>> SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH]

//>> SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH]

//>> CLEAR_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH]

//>> GET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH]

//>> GET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH]
static inline bool GET_TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_ALTD_OPTION_REG_WITH_FAST_PATH]

//>> SET_[TP_TPBR_AD_ALTD_OPTION_REG_BEFORE_INIT_WAIT_COUNT]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_ALTD_OPTION_REG_BEFORE_INIT_WAIT_COUNT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_ALTD_OPTION_REG_BEFORE_INIT_WAIT_COUNT,
           TP_TPBR_AD_ALTD_OPTION_REG_BEFORE_INIT_WAIT_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_BEFORE_INIT_WAIT_COUNT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_ALTD_OPTION_REG_BEFORE_INIT_WAIT_COUNT]

//>> SET_[TP_TPBR_AD_ALTD_OPTION_REG_BEFORE_INIT_WAIT_COUNT]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_ALTD_OPTION_REG_BEFORE_INIT_WAIT_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_ALTD_OPTION_REG_BEFORE_INIT_WAIT_COUNT,
           TP_TPBR_AD_ALTD_OPTION_REG_BEFORE_INIT_WAIT_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_BEFORE_INIT_WAIT_COUNT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_ALTD_OPTION_REG_BEFORE_INIT_WAIT_COUNT]

//>> GET_[TP_TPBR_AD_ALTD_OPTION_REG_BEFORE_INIT_WAIT_COUNT]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_ALTD_OPTION_REG_BEFORE_INIT_WAIT_COUNT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_ALTD_OPTION_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_ALTD_OPTION_REG_BEFORE_INIT_WAIT_COUNT,
           TP_TPBR_AD_ALTD_OPTION_REG_BEFORE_INIT_WAIT_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_ALTD_OPTION_REG_BEFORE_INIT_WAIT_COUNT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_ALTD_OPTION_REG_BEFORE_INIT_WAIT_COUNT]

//>> PREP_[TP_TPBR_AD_LPC_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TPBR_AD_LPC_DATA_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_AD_LPC_DATA_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TPBR_AD_LPC_DATA_REG]

//>> GET_[TP_TPBR_AD_LPC_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TPBR_AD_LPC_DATA_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_AD_LPC_DATA_REG;
#endif
    return fapi2::getScom(i_target, TP_TPBR_AD_LPC_DATA_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TPBR_AD_LPC_DATA_REG]

//>> PUT_[TP_TPBR_AD_LPC_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TPBR_AD_LPC_DATA_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_DATA_REG));
#endif
    return fapi2::putScom(i_target, TP_TPBR_AD_LPC_DATA_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TPBR_AD_LPC_DATA_REG]


//>> SET_[TP_TPBR_AD_LPC_DATA_REG_LPC_DATA]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_LPC_DATA_REG_LPC_DATA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_LPC_DATA_REG_LPC_DATA,
           TP_TPBR_AD_LPC_DATA_REG_LPC_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_LPC_DATA_REG_LPC_DATA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_LPC_DATA_REG_LPC_DATA]

//>> SET_[TP_TPBR_AD_LPC_DATA_REG_LPC_DATA]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_LPC_DATA_REG_LPC_DATA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_LPC_DATA_REG_LPC_DATA,
           TP_TPBR_AD_LPC_DATA_REG_LPC_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_LPC_DATA_REG_LPC_DATA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_LPC_DATA_REG_LPC_DATA]

//>> GET_[TP_TPBR_AD_LPC_DATA_REG_LPC_DATA]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_LPC_DATA_REG_LPC_DATA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_DATA_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_LPC_DATA_REG_LPC_DATA,
           TP_TPBR_AD_LPC_DATA_REG_LPC_DATA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_LPC_DATA_REG_LPC_DATA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_LPC_DATA_REG_LPC_DATA]

//>> PREP_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TPBR_AD_XSCOM_RCVED_STAT_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_AD_XSCOM_RCVED_STAT_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG]

//>> GET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TPBR_AD_XSCOM_RCVED_STAT_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_AD_XSCOM_RCVED_STAT_REG;
#endif
    return fapi2::getScom(i_target, TP_TPBR_AD_XSCOM_RCVED_STAT_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG]

//>> PUT_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TPBR_AD_XSCOM_RCVED_STAT_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_XSCOM_RCVED_STAT_REG));
#endif
    return fapi2::putScom(i_target, TP_TPBR_AD_XSCOM_RCVED_STAT_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG]


//>> SET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_XSCOM_RCVED_STAT_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE]

//>> SET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_XSCOM_RCVED_STAT_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE]

//>> SET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_XSCOM_RCVED_STAT_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE]

//>> CLEAR_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_XSCOM_RCVED_STAT_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE]

//>> GET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_XSCOM_RCVED_STAT_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE]

//>> GET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE]
static inline bool GET_TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_XSCOM_RCVED_STAT_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_DONE]

//>> SET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_RESULT]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_RESULT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_XSCOM_RCVED_STAT_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_RESULT,
           TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_RESULT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_RESULT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_RESULT]

//>> SET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_RESULT]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_RESULT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_XSCOM_RCVED_STAT_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_RESULT,
           TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_RESULT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_RESULT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_RESULT]

//>> GET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_RESULT]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_RESULT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_XSCOM_RCVED_STAT_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_RESULT,
           TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_RESULT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_RESULT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_RESULT]

//>> SET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_COREID]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_COREID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_XSCOM_RCVED_STAT_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_COREID,
           TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_COREID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_COREID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_COREID]

//>> SET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_COREID]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_COREID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_XSCOM_RCVED_STAT_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_COREID,
           TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_COREID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_COREID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_COREID]

//>> GET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_COREID]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_COREID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_XSCOM_RCVED_STAT_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_COREID,
           TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_COREID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_COREID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_COREID]

//>> SET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_STAT_THRID]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_STAT_THRID(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_XSCOM_RCVED_STAT_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_STAT_THRID,
           TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_STAT_THRID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_STAT_THRID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_STAT_THRID]

//>> SET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_STAT_THRID]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_STAT_THRID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_XSCOM_RCVED_STAT_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_STAT_THRID,
           TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_STAT_THRID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_STAT_THRID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_STAT_THRID]

//>> GET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_STAT_THRID]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_STAT_THRID(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_XSCOM_RCVED_STAT_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_STAT_THRID,
           TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_STAT_THRID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_STAT_THRID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_XSCOM_STAT_THRID]

//>> SET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_DEST_TOPOLOGY_ID]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_XSCOM_RCVED_STAT_REG_DEST_TOPOLOGY_ID(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_XSCOM_RCVED_STAT_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_XSCOM_RCVED_STAT_REG_DEST_TOPOLOGY_ID,
           TP_TPBR_AD_XSCOM_RCVED_STAT_REG_DEST_TOPOLOGY_ID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_XSCOM_RCVED_STAT_REG_DEST_TOPOLOGY_ID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_DEST_TOPOLOGY_ID]

//>> SET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_DEST_TOPOLOGY_ID]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_XSCOM_RCVED_STAT_REG_DEST_TOPOLOGY_ID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_XSCOM_RCVED_STAT_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_XSCOM_RCVED_STAT_REG_DEST_TOPOLOGY_ID,
           TP_TPBR_AD_XSCOM_RCVED_STAT_REG_DEST_TOPOLOGY_ID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_XSCOM_RCVED_STAT_REG_DEST_TOPOLOGY_ID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_DEST_TOPOLOGY_ID]

//>> GET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_DEST_TOPOLOGY_ID]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_XSCOM_RCVED_STAT_REG_DEST_TOPOLOGY_ID(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_XSCOM_RCVED_STAT_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_XSCOM_RCVED_STAT_REG_DEST_TOPOLOGY_ID,
           TP_TPBR_AD_XSCOM_RCVED_STAT_REG_DEST_TOPOLOGY_ID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_XSCOM_RCVED_STAT_REG_DEST_TOPOLOGY_ID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_XSCOM_RCVED_STAT_REG_DEST_TOPOLOGY_ID]

//>> PREP_[TP_TPBR_PBA_PBAF_GOCPSR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TPBR_PBA_PBAF_GOCPSR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAF_GOCPSR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TPBR_PBA_PBAF_GOCPSR]

//>> GET_[TP_TPBR_PBA_PBAF_GOCPSR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TPBR_PBA_PBAF_GOCPSR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAF_GOCPSR;
#endif
    return fapi2::getScom(i_target, TP_TPBR_PBA_PBAF_GOCPSR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_GOCPSR]

//>> PUT_[TP_TPBR_PBA_PBAF_GOCPSR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TPBR_PBA_PBAF_GOCPSR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_GOCPSR));
#endif
    return fapi2::putScom(i_target, TP_TPBR_PBA_PBAF_GOCPSR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TPBR_PBA_PBAF_GOCPSR]


//>> SET_[TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_GOCPSR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH]

//>> SET_[TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_GOCPSR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH]

//>> SET_[TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_GOCPSR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH]

//>> CLEAR_[TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_GOCPSR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH]

//>> GET_[TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_GOCPSR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH]

//>> GET_[TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH]
static inline bool GET_TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_GOCPSR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_GOCPSR_SLOW_RESPONSE_THRESH]

//>> SET_[TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_GOCPSR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH]

//>> SET_[TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_GOCPSR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH]

//>> SET_[TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_GOCPSR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH]

//>> CLEAR_[TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_GOCPSR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH]

//>> GET_[TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_GOCPSR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH]

//>> GET_[TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH]
static inline bool GET_TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_GOCPSR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_GOCPSR_FAST_RESPONSE_THRESH]

//>> SET_[TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MAX]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MAX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_GOCPSR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MAX,
           TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MAX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MAX]

//>> SET_[TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MAX]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MAX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_GOCPSR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MAX,
           TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MAX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MAX]

//>> GET_[TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MAX]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MAX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_GOCPSR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MAX,
           TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MAX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MAX]

//>> SET_[TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MIN]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MIN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_GOCPSR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MIN,
           TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MIN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MIN]

//>> SET_[TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MIN]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MIN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_GOCPSR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MIN,
           TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MIN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MIN]

//>> GET_[TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MIN]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MIN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_GOCPSR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MIN,
           TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MIN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MIN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_MIN]

//>> SET_[TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_VALUE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_VALUE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_GOCPSR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_VALUE,
           TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_VALUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_VALUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_VALUE]

//>> SET_[TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_VALUE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_VALUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_GOCPSR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_VALUE,
           TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_VALUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_VALUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_VALUE]

//>> GET_[TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_VALUE]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_VALUE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_GOCPSR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_VALUE,
           TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_VALUE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_VALUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_GOCPSR_GLOBAL_TANK_VALUE]

//>> PREP_[TP_TPBR_PBA_PBAF_PBAFIR_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TPBR_PBA_PBAF_PBAFIR_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAF_PBAFIR_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TPBR_PBA_PBAF_PBAFIR_RW]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TPBR_PBA_PBAF_PBAFIR_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAF_PBAFIR_RW;
#endif
    return fapi2::getScom(i_target, TP_TPBR_PBA_PBAF_PBAFIR_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_RW]

//>> PUT_[TP_TPBR_PBA_PBAF_PBAFIR_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TPBR_PBA_PBAF_PBAFIR_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TPBR_PBA_PBAF_PBAFIR_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TPBR_PBA_PBAF_PBAFIR_RW]

//>> PREP_[TP_TPBR_PBA_PBAF_PBAFIR_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TPBR_PBA_PBAF_PBAFIR_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAF_PBAFIR_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TPBR_PBA_PBAF_PBAFIR_WO_AND]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TPBR_PBA_PBAF_PBAFIR_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAF_PBAFIR_WO_AND;
#endif
    return fapi2::getScom(i_target, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_WO_AND]

//>> PUT_[TP_TPBR_PBA_PBAF_PBAFIR_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TPBR_PBA_PBAF_PBAFIR_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TPBR_PBA_PBAF_PBAFIR_WO_AND]

//>> PREP_[TP_TPBR_PBA_PBAF_PBAFIR_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TPBR_PBA_PBAF_PBAFIR_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAF_PBAFIR_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TPBR_PBA_PBAF_PBAFIR_WO_OR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TPBR_PBA_PBAF_PBAFIR_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAF_PBAFIR_WO_OR;
#endif
    return fapi2::getScom(i_target, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_WO_OR]

//>> PUT_[TP_TPBR_PBA_PBAF_PBAFIR_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TPBR_PBA_PBAF_PBAFIR_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TPBR_PBA_PBAF_PBAFIR_WO_OR]


//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDADRERR_FW]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_RDDATATO_FW]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_SUE_FW]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UE_FW]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_CE_FW]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPCRESP]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_UNEXPDATA]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_PARITY_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_WRADRERR_FW]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_BADCRESP]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_RD]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_OPERTO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ACK_DEAD]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCUE_PB_ADRERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ACK_DEAD]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_PB_ADRERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_RDDATATO_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_SUE_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_UE_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_BCDE_CE]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_INTERNAL_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_ILLEGAL_CACHE_OP]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_DLO_TO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXRCV_RSVDATA_TO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXFLOW_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DHI_RTYTO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_DLO_RTYTO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXSND_RSVTO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_PB_ACKDEAD_FW_WR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_DLO_TO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIRCV_RSVDATA_TO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXIFLOW_ERR]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DHI_RTYTO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_DLO_RTYTO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_AXISND_RSVTO]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_37]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_38]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39]

//>> SET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39]

//>> CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39]

//>> GET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39]
static inline bool GET_TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAF_PBAFIR_RW, TP_TPBR_PBA_PBAF_PBAFIR_WO_AND, TP_TPBR_PBA_PBAF_PBAFIR_WO_OR));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAF_PBAFIR_RESERVED_39]

//>> PREP_[TP_TPBR_PBA_PBAO_BCDE_OCIBAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TPBR_PBA_PBAO_BCDE_OCIBAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAO_BCDE_OCIBAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TPBR_PBA_PBAO_BCDE_OCIBAR]

//>> GET_[TP_TPBR_PBA_PBAO_BCDE_OCIBAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TPBR_PBA_PBAO_BCDE_OCIBAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAO_BCDE_OCIBAR;
#endif
    return fapi2::getScom(i_target, TP_TPBR_PBA_PBAO_BCDE_OCIBAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_BCDE_OCIBAR]

//>> PUT_[TP_TPBR_PBA_PBAO_BCDE_OCIBAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TPBR_PBA_PBAO_BCDE_OCIBAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_BCDE_OCIBAR));
#endif
    return fapi2::putScom(i_target, TP_TPBR_PBA_PBAO_BCDE_OCIBAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TPBR_PBA_PBAO_BCDE_OCIBAR]


//>> SET_[TP_TPBR_PBA_PBAO_BCDE_OCIBAR_BCDE_OCIBAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_BCDE_OCIBAR_BCDE_OCIBAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_BCDE_OCIBAR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_BCDE_OCIBAR_BCDE_OCIBAR_ADDR,
           TP_TPBR_PBA_PBAO_BCDE_OCIBAR_BCDE_OCIBAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_BCDE_OCIBAR_BCDE_OCIBAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_BCDE_OCIBAR_BCDE_OCIBAR_ADDR]

//>> SET_[TP_TPBR_PBA_PBAO_BCDE_OCIBAR_BCDE_OCIBAR_ADDR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_BCDE_OCIBAR_BCDE_OCIBAR_ADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_BCDE_OCIBAR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_BCDE_OCIBAR_BCDE_OCIBAR_ADDR,
           TP_TPBR_PBA_PBAO_BCDE_OCIBAR_BCDE_OCIBAR_ADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_BCDE_OCIBAR_BCDE_OCIBAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_BCDE_OCIBAR_BCDE_OCIBAR_ADDR]

//>> GET_[TP_TPBR_PBA_PBAO_BCDE_OCIBAR_BCDE_OCIBAR_ADDR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_BCDE_OCIBAR_BCDE_OCIBAR_ADDR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_BCDE_OCIBAR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_BCDE_OCIBAR_BCDE_OCIBAR_ADDR,
           TP_TPBR_PBA_PBAO_BCDE_OCIBAR_BCDE_OCIBAR_ADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_BCDE_OCIBAR_BCDE_OCIBAR_ADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_BCDE_OCIBAR_BCDE_OCIBAR_ADDR]


//>>THE END<<

#ifndef __PPE_HCODE__
}
}

#endif
#endif
