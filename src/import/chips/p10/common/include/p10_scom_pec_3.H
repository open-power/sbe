/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/p10_scom_pec_3.H $        */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */

#ifndef __PPE_HCODE__
    #include "proc_scomt.H"
#endif

#ifndef __p10_scom_pec_3_H_
#define __p10_scom_pec_3_H_


#ifndef __PPE_HCODE__
namespace scomt
{
namespace pec
{
#endif


//>> [CLOCK_STAT_NSL]
static const uint64_t CLOCK_STAT_NSL = 0x08030009ull;

static const uint32_t CLOCK_STAT_NSL_PERV_NSL = 4;
static const uint32_t CLOCK_STAT_NSL_UNIT1_NSL = 5;
static const uint32_t CLOCK_STAT_NSL_UNIT2_NSL = 6;
static const uint32_t CLOCK_STAT_NSL_UNIT3_NSL = 7;
static const uint32_t CLOCK_STAT_NSL_UNIT4_NSL = 8;
static const uint32_t CLOCK_STAT_NSL_UNIT5_NSL = 9;
static const uint32_t CLOCK_STAT_NSL_UNIT6_NSL = 10;
static const uint32_t CLOCK_STAT_NSL_UNIT7_NSL = 11;
static const uint32_t CLOCK_STAT_NSL_UNIT8_NSL = 12;
static const uint32_t CLOCK_STAT_NSL_UNIT9_NSL = 13;
static const uint32_t CLOCK_STAT_NSL_UNIT10_NSL = 14;
static const uint32_t CLOCK_STAT_NSL_UNIT11_NSL = 15;
static const uint32_t CLOCK_STAT_NSL_UNIT12_NSL = 16;
static const uint32_t CLOCK_STAT_NSL_UNIT13_NSL = 17;
static const uint32_t CLOCK_STAT_NSL_UNIT14_NSL = 18;
//<< [CLOCK_STAT_NSL]
// pec/reg00003.H

//>> [EPS_FIR_ANY_LOCAL_ERR_MASK]
static const uint64_t EPS_FIR_ANY_LOCAL_ERR_MASK = 0x08040080ull;

static const uint32_t EPS_FIR_ANY_LOCAL_ERR_MASK_XSTOP_TO_PCB = 0;
static const uint32_t EPS_FIR_ANY_LOCAL_ERR_MASK_RECOV_TO_PCB = 1;
static const uint32_t EPS_FIR_ANY_LOCAL_ERR_MASK_SPATTN_TO_PCB = 2;
static const uint32_t EPS_FIR_ANY_LOCAL_ERR_MASK_LOCAL_XSTOP_TO_PCB = 3;
static const uint32_t EPS_FIR_ANY_LOCAL_ERR_MASK_HOSTATTN_TO_PCB = 4;
//<< [EPS_FIR_ANY_LOCAL_ERR_MASK]
// pec/reg00003.H

//>> [EPS_THERM_WSUB_DTS_RESULT2]
static const uint64_t EPS_THERM_WSUB_DTS_RESULT2 = 0x08050002ull;

static const uint32_t EPS_THERM_WSUB_DTS_RESULT2_DTS_8_RESULT = 0;
static const uint32_t EPS_THERM_WSUB_DTS_RESULT2_DTS_8_RESULT_LEN = 16;
//<< [EPS_THERM_WSUB_DTS_RESULT2]
// pec/reg00003.H

//>> [EPS_THERM_WSUB_SKITTER_DATA1]
static const uint64_t EPS_THERM_WSUB_SKITTER_DATA1 = 0x0805001aull;
//<< [EPS_THERM_WSUB_SKITTER_DATA1]
// pec/reg00003.H

//>> [EPS_THERM_WSUB_MODE_REG]
static const uint64_t EPS_THERM_WSUB_MODE_REG = 0x0805000full;

static const uint32_t EPS_THERM_WSUB_MODE_REG_THERM_DIS_CPM_BUBBLE_CORR = 0;
static const uint32_t EPS_THERM_WSUB_MODE_REG_THERM_FORCE_THRES_ACT = 1;
static const uint32_t EPS_THERM_WSUB_MODE_REG_THERM_THRES_TRIP_ENA = 2;
static const uint32_t EPS_THERM_WSUB_MODE_REG_THERM_THRES_TRIP_ENA_LEN = 3;
static const uint32_t EPS_THERM_WSUB_MODE_REG_THERM_DTS_SAMPLE_ENA = 5;
static const uint32_t EPS_THERM_WSUB_MODE_REG_THERM_SAMPLE_PULSE_CNT = 6;
static const uint32_t EPS_THERM_WSUB_MODE_REG_THERM_SAMPLE_PULSE_CNT_LEN = 4;
static const uint32_t EPS_THERM_WSUB_MODE_REG_THERM_THRES_MODE_ENA = 10;
static const uint32_t EPS_THERM_WSUB_MODE_REG_THERM_THRES_MODE_ENA_LEN = 2;
static const uint32_t EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_MODE = 12;
static const uint32_t EPS_THERM_WSUB_MODE_REG_DTS_TRIGGER_SEL = 13;
static const uint32_t EPS_THERM_WSUB_MODE_REG_THERM_THRES_OVERFLOW_MASK = 14;
static const uint32_t EPS_THERM_WSUB_MODE_REG_THERM_DTS_READ_SEL = 16;
static const uint32_t EPS_THERM_WSUB_MODE_REG_THERM_DTS_READ_SEL_LEN = 4;
static const uint32_t EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L1 = 20;
static const uint32_t EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L1_LEN = 3;
static const uint32_t EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L2 = 24;
static const uint32_t EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L2_LEN = 3;
static const uint32_t EPS_THERM_WSUB_MODE_REG_THERM_DTS_ENABLE_L3 = 28;
//<< [EPS_THERM_WSUB_MODE_REG]
// pec/reg00003.H

//>> [LOCAL_XSTOP]
static const uint64_t LOCAL_XSTOP = 0x08040003ull;

static const uint32_t LOCAL_XSTOP_ANY_LOCAL_XSTOP = 0;
static const uint32_t LOCAL_XSTOP_RESERVED1L = 1;
static const uint32_t LOCAL_XSTOP_RESERVED2L = 2;
static const uint32_t LOCAL_XSTOP_RESERVED3L = 3;
static const uint32_t LOCAL_XSTOP_PERV = 4;
static const uint32_t LOCAL_XSTOP_IN05 = 5;
static const uint32_t LOCAL_XSTOP_IN06 = 6;
static const uint32_t LOCAL_XSTOP_IN07 = 7;
static const uint32_t LOCAL_XSTOP_IN08 = 8;
static const uint32_t LOCAL_XSTOP_IN09 = 9;
static const uint32_t LOCAL_XSTOP_IN10 = 10;
static const uint32_t LOCAL_XSTOP_IN11 = 11;
static const uint32_t LOCAL_XSTOP_IN12 = 12;
static const uint32_t LOCAL_XSTOP_IN13 = 13;
static const uint32_t LOCAL_XSTOP_IN14 = 14;
static const uint32_t LOCAL_XSTOP_IN15 = 15;
//<< [LOCAL_XSTOP]
// pec/reg00003.H

//>> [LXSTOP_INTERRUPT_REG]
static const uint64_t LXSTOP_INTERRUPT_REG = 0x080f002aull;

static const uint32_t LXSTOP_INTERRUPT_REG_LXSTOP = 0;
//<< [LXSTOP_INTERRUPT_REG]
// pec/reg00003.H

//>> [MULTICAST_GROUP_1]
static const uint64_t MULTICAST_GROUP_1 = 0x080f0001ull;

static const uint32_t MULTICAST_GROUP_1_MULTICAST1_GROUP = 3;
static const uint32_t MULTICAST_GROUP_1_MULTICAST1_GROUP_LEN = 3;
//<< [MULTICAST_GROUP_1]
// pec/reg00003.H

//>> [NET_CTRL0]
static const uint64_t NET_CTRL0_RW = 0x080f0040ull;
static const uint64_t NET_CTRL0_RW_WAND = 0x080f0041ull;
static const uint64_t NET_CTRL0_RW_WOR = 0x080f0042ull;

static const uint32_t NET_CTRL0_CHIPLET_ENABLE = 0;
static const uint32_t NET_CTRL0_PCB_EP_RESET = 1;
static const uint32_t NET_CTRL0_CLK_ASYNC_RESET = 2;
static const uint32_t NET_CTRL0_PLL_TEST_EN = 3;
static const uint32_t NET_CTRL0_PLL_RESET = 4;
static const uint32_t NET_CTRL0_PLL_BYPASS = 5;
static const uint32_t NET_CTRL0_VITAL_SCAN = 6;
static const uint32_t NET_CTRL0_VITAL_SCAN_IN = 7;
static const uint32_t NET_CTRL0_VITAL_PHASE = 8;
static const uint32_t NET_CTRL0_FLUSH_ALIGN_OVR = 9;
static const uint32_t NET_CTRL0_VITAL_AL = 10;
static const uint32_t NET_CTRL0_ACT_DIS = 11;
static const uint32_t NET_CTRL0_TOADMODE_EN = 12;
static const uint32_t NET_CTRL0_SYNC_PULSE = 13;
static const uint32_t NET_CTRL0_MPW3 = 14;
static const uint32_t NET_CTRL0_DELAY_LCLKR = 15;
static const uint32_t NET_CTRL0_VITAL_THOLD = 16;
static const uint32_t NET_CTRL0_FLUSH_SCAN_N = 17;
static const uint32_t NET_CTRL0_FENCE_EN = 18;
static const uint32_t NET_CTRL0_CPLT_RCTRL = 19;
static const uint32_t NET_CTRL0_CPLT_DCTRL = 20;
static const uint32_t NET_CTRL0_CPLT_RCTRL2 = 21;
static const uint32_t NET_CTRL0_ADJ_FUNC_CLKSEL = 22;
static const uint32_t NET_CTRL0_PM_ACCESS = 23;
static const uint32_t NET_CTRL0_FUNC_LCB_EDIS = 24;
static const uint32_t NET_CTRL0_TP_FENCE_PCB = 25;
static const uint32_t NET_CTRL0_LVLTRANS_FENCE = 26;
static const uint32_t NET_CTRL0_ARRAY_WRITE_ASSIST_EN = 27;
static const uint32_t NET_CTRL0_HTB_INTEST = 28;
static const uint32_t NET_CTRL0_HTB_EXTEST = 29;
// ERROR Duplicate Dial         static const uint32_t NET_CTRL0_PM_ACCESS = 30;
static const uint32_t NET_CTRL0_PLLFORCE_OUT_EN = 31;
//<< [NET_CTRL0]
// pec/reg00003.H

//>> [PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG]
static const uint64_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG = 0x03011810ull;

static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_ENABLE = 0;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_TYPE = 1;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_DISABLE_SCOPE = 2;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_RESERVED_03_05 = 3;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_RESERVED_03_05_LEN = 3;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_VALUE = 6;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_VALUE_LEN = 2;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_MAX_OUTSTANDING_COUNT = 8;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_MAX_OUTSTANDING_COUNT_LEN = 2;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_MAX_CRESP_ATAG_VALUE = 10;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_MAX_CRESP_ATAG_VALUE_LEN = 2;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_CRESP_ATAG_DELTA_VALUE = 12;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_CRESP_ATAG_DELTA_VALUE_LEN = 2;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_SAMPLE_RANGE_COUNT = 14;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_SAMPLE_RANGE_COUNT_LEN = 10;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_GROUP_RATE_CHANGE_DELTA = 24;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_GROUP_RATE_CHANGE_DELTA_LEN = 4;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_SYSTEM_RATE_CHANGE_DELTA = 28;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_SYSTEM_RATE_CHANGE_DELTA_LEN = 4;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_GROUP_DECREMENT_RATE = 32;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_GROUP_DECREMENT_RATE_LEN = 8;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_GROUP_MINIMUM_DECREMENT_RATE = 40;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_GROUP_MINIMUM_DECREMENT_RATE_LEN = 8;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_SYSTEM_DECREMENT_RATE = 48;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_SYSTEM_DECREMENT_RATE_LEN = 8;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_SYSTEM_MINIMUM_DECREMENT_RATE = 56;
static const uint32_t PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG_PE_INJECT_THRESHOLD_SYSTEM_MINIMUM_DECREMENT_RATE_LEN =
    8;
//<< [PB_PBCQ_PEPBREGS_PE_INJECT_THRESHOLD_REG]
// pec/reg00003.H

//>> [PHASE_COUNTER_RESET]
static const uint64_t PHASE_COUNTER_RESET = 0x08030028ull;

static const uint32_t PHASE_COUNTER_RESET_PHASECOUNTER_RESET = 0;
//<< [PHASE_COUNTER_RESET]
// pec/reg00003.H

//>> [PLL_LOCK_REG]
static const uint64_t PLL_LOCK_REG = 0x080f0019ull;

static const uint32_t PLL_LOCK_REG_LOCK = 0;
static const uint32_t PLL_LOCK_REG_LOCK_LEN = 8;
//<< [PLL_LOCK_REG]
// pec/reg00003.H

//>> [SPATTN_MASK]
static const uint64_t SPATTN_MASK_RW = 0x08040042ull;
static const uint64_t SPATTN_MASK_WO_CLEAR = 0x08040062ull;
static const uint64_t SPATTN_MASK_WO_OR = 0x08040052ull;

static const uint32_t SPATTN_MASK_01 = 1;
static const uint32_t SPATTN_MASK_02 = 2;
static const uint32_t SPATTN_MASK_03 = 3;
static const uint32_t SPATTN_MASK_04 = 4;
static const uint32_t SPATTN_MASK_05 = 5;
static const uint32_t SPATTN_MASK_06 = 6;
static const uint32_t SPATTN_MASK_07 = 7;
static const uint32_t SPATTN_MASK_08 = 8;
static const uint32_t SPATTN_MASK_09 = 9;
static const uint32_t SPATTN_MASK_10 = 10;
static const uint32_t SPATTN_MASK_11 = 11;
static const uint32_t SPATTN_MASK_12 = 12;
static const uint32_t SPATTN_MASK_13 = 13;
static const uint32_t SPATTN_MASK_14 = 14;
static const uint32_t SPATTN_MASK_15 = 15;
static const uint32_t SPATTN_MASK_16 = 16;
static const uint32_t SPATTN_MASK_17 = 17;
static const uint32_t SPATTN_MASK_18 = 18;
static const uint32_t SPATTN_MASK_19 = 19;
static const uint32_t SPATTN_MASK_20 = 20;
static const uint32_t SPATTN_MASK_21 = 21;
static const uint32_t SPATTN_MASK_22 = 22;
static const uint32_t SPATTN_MASK_23 = 23;
static const uint32_t SPATTN_MASK_24 = 24;
static const uint32_t SPATTN_MASK_25 = 25;
static const uint32_t SPATTN_MASK_26 = 26;
static const uint32_t SPATTN_MASK_27 = 27;
static const uint32_t SPATTN_MASK_28 = 28;
static const uint32_t SPATTN_MASK_29 = 29;
static const uint32_t SPATTN_MASK_30 = 30;
static const uint32_t SPATTN_MASK_31 = 31;
static const uint32_t SPATTN_MASK_32 = 32;
static const uint32_t SPATTN_MASK_33 = 33;
static const uint32_t SPATTN_MASK_34 = 34;
static const uint32_t SPATTN_MASK_35 = 35;
//<< [SPATTN_MASK]
// pec/reg00003.H

//>> [TRA0_TR0_CONFIG_3]
static const uint64_t TRA0_TR0_CONFIG_3 = 0x08010406ull;

static const uint32_t TRA0_TR0_CONFIG_3_C = 0;
static const uint32_t TRA0_TR0_CONFIG_3_C_LEN = 24;
static const uint32_t TRA0_TR0_CONFIG_3_D = 24;
static const uint32_t TRA0_TR0_CONFIG_3_D_LEN = 24;
//<< [TRA0_TR0_CONFIG_3]
// pec/reg00003.H

//>>THE END<<

#ifndef __PPE_HCODE__
}
}
#include "pec/reg00003.H"
#endif
#endif
