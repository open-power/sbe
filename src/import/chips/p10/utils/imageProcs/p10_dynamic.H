/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/utils/imageProcs/p10_dynamic.H $         */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2020,2022                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
// p10_dynamic.H
// This file is generated by perl script gen_dyn_feature_xml.pl

#ifndef P10_DYNAMIC_H_
#define P10_DYNAMIC_H_

#include <stdint.h>

static const uint64_t DYN_MAGIC_FEATURE = 0x44594e4645415453; //'DYNFEATS'
static const uint64_t DYN_MAGIC_SERVICE = 0x44594e5345525653; //'DYNSERVS'

#define MAX_DYN_FEATURES   45
#define NUM_OF_64_BITS_SET 1

typedef struct
{
    uint64_t    magic;
    uint8_t     version;
    uint8_t     numOf64BitsSet;
    uint16_t    numOfRecords;
    uint16_t    sizeOfBinary;
    uint16_t    reserved;
} DynamicHdr_t;

typedef struct
{
    uint8_t     featureNameSize;
    char*       featureName;
    uint16_t    featureValue;
    uint8_t     featureDescSize;
    char*       featureDesc;
} DynamicFeatureRec_t;

typedef struct
{
    uint8_t     serviceNameSize;
    char*       serviceName;
    uint16_t    serviceValue;
    uint64_t*   serviceBitVector;
    uint8_t     serviceDescSize;
    char*       serviceDesc;
} DynamicServiceRec_t;

typedef struct
{
    char        featureName[50];
    uint16_t    featureValue;
} DynamicFeature_t;

///////////////////////////////////////////////////////////////////////////
////////////////////////// APIs SUPPORTED /////////////////////////////////

// 1. API to get 64-bit vector size & number of records for features/services
void dynamic_get_bitVectorSize_n_numRecords( void*     i_dynSection,
        uint8_t*  o_bitVectorSize,
        uint16_t* o_numRecords);

// 2. API to check given feature/service record exist
void dynamic_is_record_exist( void* i_dynSection,
                              char* i_name,
                              bool* o_result);

// 3. API to get value for given name for features/services
void dynamic_get_value( void*     i_dynSection,
                        char*     i_name,
                        uint16_t* o_value);

// 4. API to get name length for given value for features/services
void dynamic_get_name_length_perValue( void*     i_dynSection,
                                       uint16_t  i_value,
                                       uint8_t*  o_nameLength);

// 5. API to get name for given value for features/services
void dynamic_get_name( void*     i_dynSection,
                       uint16_t  i_value,
                       char*     o_name);

// 6. API to get bit vector for given service name
void dynamic_get_bitVector_perName( void*     i_dynSection,
                                    char*     i_name,
                                    uint64_t* o_bitVector);

// 7. API to get bit vector for given service value
void dynamic_get_bitVector_perValue( void*     i_dynSection,
                                     uint16_t  i_value,
                                     uint64_t* o_bitVector);

// 8. API to get desc length for given value for features/services
void dynamic_get_desc_length_perValue( void*     i_dynSection,
                                       uint16_t  i_value,
                                       uint8_t*  o_descLength);

// 9. API to get desc for given name for features/services
void dynamic_get_desc_perName( void* i_dynSection,
                               char* i_name,
                               char* o_desc);

// 10. API to get desc for given value for features/services
void dynamic_get_desc_perValue( void*     i_dynSection,
                                uint16_t  i_value,
                                char*     o_desc);

// 11. API to get record offset for given name for features/services
void dynamic_get_record_perName( void*     i_dynSection,
                                 char*     i_name,
                                 uint32_t* o_offset);

// 12. API to get record offset for given value for features/services
void dynamic_get_record_perValue( void*     i_dynSection,
                                  uint16_t  i_value,
                                  uint32_t* o_offset);

///////////////////////////////////////////////////////////////////////////

enum DYN_FEATURES
{
    CACHE_CONTAINED                                   = 0,
    CHIP_CONTAINED                                    = 1,
    COMMON_CONTAINED                                  = 2,
    HOSTBOOT                                          = 3,
    HV_INITS                                          = 4,
    L2RC_HIGH_JITTER                                  = 5,
    MC2RT_NOMINAL                                     = 6,
    MC2RT_SAFE                                        = 7,
    MC2RT_TURBO                                       = 8,
    MC2RT_ULTRATURBO                                  = 9,
    MC_FAST                                           = 10,
    MMA_STATIC_POWEROFF                               = 11,
    PA2RT_NOMINAL                                     = 12,
    PA2RT_SAFE                                        = 13,
    PA2RT_TURBO                                       = 14,
    RT2MC_NOMINAL                                     = 15,
    RT2MC_SAFE                                        = 16,
    RT2MC_TURBO                                       = 17,
    RT2MC_ULTRATURBO                                  = 18,
    RT2PA_NOMINAL                                     = 19,
    RT2PA_SAFE                                        = 20,
    RUNN_SRESET_THREAD0                               = 21,
    RUNN_SRESET_THREAD1                               = 22,
    RUNN_SRESET_THREAD2                               = 23,
    RUNN_SRESET_THREAD3                               = 24,
    RUNN_USE_QME_TB_SRC                               = 25,
    RUNN_CONTAINED_DUMP                               = 26,
    UV_INITS                                          = 27,
    CONTAINED_CLKOFFS                                 = 28,
    CORE_RECOVERY                                     = 29,
    REVERT_HW542915                                   = 30,
    REVERT_HW541421                                   = 31,
    REVERT_TLBIE_UNMARK_FIXES                         = 32,
    CONVERT_DCBZ_TO_RWITM                             = 33,
    REVERT_HW549081_WIGGLY_AUTOPSY                    = 34,
    REVERT_HW549142_FRESH_TRAINS                      = 35,
    REVERT_HW549976_CRABBY_SMILE                      = 36,
    REVERT_HW552564_SPIFFY_BEETLE                     = 37,
    REVERT_HW552845_SCANT_SCENT                       = 38,
    PERF_DD10_MISC                                    = 39,
    CRONUS_CORE_TO_SYS_XSTOP                          = 40,
    REVERT_DD1_SYS_XSTOP                              = 41,
    FBC_ONEHOP                                        = 42,
    CORE_ERR_INJ                                      = 43,
    FAVOR_AGGRESSIVE_PREFETCH                         = 44,
};

enum DYN_SERVICES
{
    RAS_MPV                                          = 0,
    PERF_DD10                                        = 1,
    EN_CORE_ERR_INJ                                  = 2,
};

#endif
