<!-- IBM_PROLOG_BEGIN_TAG                                                   -->
<!-- This is an automatically generated prolog.                             -->
<!--                                                                        -->
<!-- $Source: src/import/chips/p10/procedures/xml/attribute_info/p10_ipl_attributes.xml $ -->
<!--                                                                        -->
<!-- OpenPOWER sbe Project                                                  -->
<!--                                                                        -->
<!-- Contributors Listed Below - COPYRIGHT 2019,2020                        -->
<!-- [+] International Business Machines Corp.                              -->
<!--                                                                        -->
<!--                                                                        -->
<!-- Licensed under the Apache License, Version 2.0 (the "License");        -->
<!-- you may not use this file except in compliance with the License.       -->
<!-- You may obtain a copy of the License at                                -->
<!--                                                                        -->
<!--     http://www.apache.org/licenses/LICENSE-2.0                         -->
<!--                                                                        -->
<!-- Unless required by applicable law or agreed to in writing, software    -->
<!-- distributed under the License is distributed on an "AS IS" BASIS,      -->
<!-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        -->
<!-- implied. See the License for the specific language governing           -->
<!-- permissions and limitations under the License.                         -->
<!--                                                                        -->
<!-- IBM_PROLOG_END_TAG                                                     -->
<attributes>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_SYSTEM_IPL_PHASE</id>
  <targetType>TARGET_TYPE_SYSTEM</targetType>
  <description>Define context for current phase of system IPL</description>
  <valueType>uint8</valueType>
  <enum>
    HB_IPL          = 0x1,
    HB_RUNTIME      = 0x2,
    CONTAINED_IPL   = 0x4
  </enum>
  <default>HB_IPL</default>
  <writeable/>
  <mrwHide/>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_CONTAINED_IPL_TYPE</id>
  <targetType>TARGET_TYPE_SYSTEM</targetType>
  <description>Indicate if performing a contained system IPL and if so the type
               of contained IPL.</description>
  <valueType>uint8</valueType>
  <enum>
    NONE  = 0x0,
    CACHE = 0x1,
    CHIP  = 0x2
  </enum>
  <initToZero/>
  <writeable/>
  <platInit/>
  <mrwHide/>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_CONTAINED_LOAD_PATH</id>
  <targetType>TARGET_TYPE_SYSTEM</targetType>
  <description>
    Define mechanism used to load contained testcase
  </description>
  <valueType>uint8</valueType>
  <enum>
    PBA = 0x0,
    L2SQ = 0x1
  </enum>
  <initToZero/>
  <platInit/>
  <mrwHide/>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_IS_MPIPL</id>
  <targetType>TARGET_TYPE_SYSTEM</targetType>
  <description>Indicates if current IPL is memory-preserving</description>
  <valueType>uint8</valueType>
  <enum>
    FALSE = 0x0,
    TRUE = 0x1
  </enum>
  <platInit/>
  <initToZero/>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_ISTEP_MODE</id>
  <targetType>TARGET_TYPE_PROC_CHIP</targetType>
  <description>
    Indicates whether IPL should be done by stepping through the isteps (true)
    or continuously executing all steps end-to-end (false).
  </description>
  <valueType>uint8</valueType>
  <enum>FALSE = 0x0, TRUE = 0x1</enum>
  <platInit/>
  <mrwHide/>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_SBE_RUNTIME_MODE</id>
  <targetType>TARGET_TYPE_PROC_CHIP</targetType>
  <description>Indicates that SBE should go directly to runtime functionality</description>
  <valueType>uint8</valueType>
  <enum>FALSE = 0x0, TRUE = 0x1</enum>
  <platInit/>
  <mrwHide/>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_IS_SP_MODE</id>
  <targetType>TARGET_TYPE_PROC_CHIP</targetType>
  <description>Indicates whether we are connected to FSP or not</description>
  <valueType>uint8</valueType>
  <enum>FSP_LESS = 0x0, FSP = 0x1</enum>
  <platInit/>
  <mrwHide/>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_DISABLE_HBBL_VECTORS</id>
  <targetType>TARGET_TYPE_SYSTEM</targetType>
  <description>
    BootLoader HWP flag to not place 12K exception vectors.
    This flag is only applicable when security is disabled.
  </description>
  <valueType>uint8</valueType>
  <enum>FALSE = 0x0,TRUE = 0x1</enum>
  <default>FALSE</default>
  <writeable/>
  <platInit/>
  <mrwHide/>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_BACKUP_SEEPROM_SELECT</id>
  <targetType>TARGET_TYPE_PROC_CHIP</targetType>
  <description>Select Primary or Backup Boot SEEPROM</description>
  <valueType>uint8</valueType>
  <enum>PRIMARY = 0x0,SECONDARY = 0x1</enum>
  <platInit/>
  <default>PRIMARY</default>
  <mrwHide/>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_BACKUP_MEASUREMENT_SEEPROM_SELECT</id>
  <targetType>TARGET_TYPE_PROC_CHIP</targetType>
  <description>Select Primary or Backup Measurement SEEPROM</description>
  <valueType>uint8</valueType>
  <enum>PRIMARY = 0x0,SECONDARY = 0x1</enum>
  <platInit/>
  <default>PRIMARY</default>
  <mrwHide/>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_BOOT_FLAGS</id>
  <targetType>TARGET_TYPE_SYSTEM</targetType>
  <description>Switch to using a flag to indicate SEEPROM side SBE
    Bit 0     : Indicates istep IPL (0b1)
    Bit 1     : Indicates that SBE should go directly to runtime functionality (0b1)
    Bit 2     : Reserved for HB usage for the SBE to indicate an MPIPL to Hostboot
    Bit 3     : Indicates FSPless (0b0), otherwise FSP attached (0b1)
    Bit 4     : Reserved
    Bit 5     : Indicates that the SBE should not send back internal FFDC on any ChipOp failure response
    Bit 6     : Disable security
    Bit 7     : Allow ATTR overrides in secure system
    Bit 8,9   : FW SMT override mode. These bits are only used by Hostboot, not the SBE
    Bit 10    : Reserved
    Bit 11    : Disable Scom white/blacklist in secure systems
    Bit 12    : Disable Invalid Scom address check
    Bit 13    : Indicates SBE was in MFG mode, where extra tests/isteps can be executed
    Bit 14    : Enable SBE output via SUART during boot
    Bit 15-27 : Available
    Bit 28-31 : Reserved
  </description>
  <valueType>uint32</valueType>
  <writeable/>
  <platInit/>
  <mrwHide/>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_SECURITY_ENABLE</id>
  <targetType>TARGET_TYPE_SYSTEM</targetType>
  <description>Holds the state of Security Access Bit (SAB)</description>
  <valueType>uint8</valueType>
  <enum>ENABLE = 0x1, DISABLE = 0x0</enum>
  <writeable/>
  <platInit/>
  <mrwHide/><!--  Firmware gets this value from the hardware -->
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_SECURITY_MODE</id>
  <targetType>TARGET_TYPE_SYSTEM</targetType>
  <description>
    SBE context: If SBE image has ATTR_SECURITY_MODE == 0b1, leave  SAB bit as is.
    Otherwise (ATTR_SECURITY_MODE == 0b0), query mailbox scratch register 3 bit 6
    and if set, clear the SAB bit.
    Non-SBE context: If ATTR_SECURITY_MODE == 0b1, do not attempt to clear the SAB
    bit via the FSI path. Otherwise (ATTR_SECURITY_MODE == 0b0), attempt to clear
    the SAB bit via the FSI path. Customer level chips will silently ignore such
    a request, whereas early lab versions may honor it for debug purposes.
  </description>
  <valueType>uint8</valueType>
  <platInit/>
  <initToZero/>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_SBE_SELECT_EX_POLICY</id>
  <targetType>TARGET_TYPE_SYSTEM</targetType>
  <description>Consumed by p10_sbe_select_ex.
  Dictates policy for selection of active cores and backing caches

  CRONUS_MAX_ACTIVE -- request maximum set of active cores possible
    (use case for Cronus istep 4 to establish run state
    on all functional cores), no backing caches

  HB_DEFAULT -- request minset of active cores (2 in fused core mode, 1
    otherwise) and backing caches (2)

  HB_MAX_FOOTPRINT -- request the maximum set of backing caches
    possible (maintaining a power of 2 size, and guaranteeing minset of
    active cores)

  HB_MAX_THREADS -- request the maximum set of active cores possible,
    logically applied after processing HB_MAX_FOOTPRINT directive if set

  For memory preserving IPLs, the attribute will be honored in the calcuation
    of active cores, but no backing caches will be requested

  For cache-contained IPL types, the selection policy is fixed in code --
    request maximum set of active cores possible, no backing caches

  For chip-contained IPL types, the selection policy is fixed in code --
    request based on contents of ATTR_CHIP_CONTAINED_ACTIVE_CORES_VEC,
    ATTR_CHIP_CONTAINED_BACKING_CACHES_VEC
  </description>
  <valueType>uint8</valueType>
  <enum>
    HB_DEFAULT = 0x0,
    CRONUS_MAX_ACTIVE = 0x1,
    HB_MAX_FOOTPRINT = 0x2,
    HB_MAX_THREADS = 0x4,
    HB_MAX_FOOTPRINT_MAX_THREADS = 0x6
  </enum>
  <writeable/>
  <initToZero/>
  <platInit/>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_MASTER_CORE</id>
  <targetType>TARGET_TYPE_PROC_CHIP</targetType>
  <description>
  Indicates the master boot core selected by p10_sbe_select_ex.
  Ranges from 0 to 31.
  </description>
  <valueType>uint8</valueType>
  <writeable/>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_ACTIVE_CORES_VEC</id>
  <targetType>TARGET_TYPE_PROC_CHIP</targetType>
  <description>Bit vector indicating the active cores selected by
  p10_sbe_select_ex.
  Bit 0 = Core 0, Bit 1 = Core 1, ..., Bit 31 = Core 31.
  </description>
  <valueType>uint32</valueType>
  <writeable/>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_CHIP_CONTAINED_ACTIVE_CORES_VEC</id>
  <targetType>TARGET_TYPE_PROC_CHIP</targetType>
  <description>Bit vector indicating the active cores to be set by
  p10_sbe_select_ex for a chip contained IPL.
  Bit 0 = Core 0, Bit 1 = Core 1, ..., Bit 31 = Core 31.
  </description>
  <valueType>uint32</valueType>
  <writeable/>
  <platInit/>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_BACKING_CACHES_VEC</id>
  <targetType>TARGET_TYPE_PROC_CHIP</targetType>
  <description>Bit vector indicating the backing caches selected
  by p10_sbe_select_ex.
  Bit 0 = Cache 0, Bit 1 = Cache 1, ..., Bit 31 = Cache 31.
  </description>
  <valueType>uint32</valueType>
  <writeable/>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_CHIP_CONTAINED_BACKING_CACHES_VEC</id>
  <targetType>TARGET_TYPE_PROC_CHIP</targetType>
  <description>Bit vector indicating the backing caches to be set by
  by p10_sbe_select_ex.
  Bit 0 = Cache 0, Bit 1 = Cache 1, ..., Bit 31 = Cache 31.
  </description>
  <valueType>uint32</valueType>
  <writeable/>
  <platInit/>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_ACTIVE_CORES_NUM</id>
  <targetType>TARGET_TYPE_PROC_CHIP</targetType>
  <description>Number of necessary active boot cores requested. Written by
  p10_sbe_select_ex based on IPL type and ATTR_SBE_SELECT_EX_POLICY
  </description>
  <writeable/>
  <valueType>uint8</valueType>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_BACKING_CACHES_NUM</id>
  <targetType>TARGET_TYPE_PROC_CHIP</targetType>
  <description>Number of necessary backing caches required. Written by
  p10_sbe_select_ex based on IPL type and ATTR_SBE_SELECT_EX_POLICY
  </description>
  <writeable/>
  <valueType>uint8</valueType>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_FUSED_CORE_MODE</id>
  <targetType>TARGET_TYPE_SYSTEM</targetType>
  <description>
    Summarizes the fused status of cores. This is same for all p10 chips
    in the system. If a core is in a fused state, attribute should read 1
    else zero. It needs to be populated during ipl but before istep 15.
  </description>
  <valueType>uint8</valueType>
  <enum> CORE_UNFUSED = 0x0, CORE_FUSED = 0x1 </enum>
  <platInit/>
  <default>CORE_UNFUSED</default>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_CORE_LPAR_MODE_POLICY</id>
  <targetType>TARGET_TYPE_SYSTEM</targetType>
  <description>
    Sets policy for core LPAR configuration
  </description>
  <valueType>uint8</valueType>
  <enum>FOLLOW_FUSED_STATE = 0x0, LPAR_PER_CORE = 0x1, LPAR_PER_THREAD = 0x2</enum>
  <platInit/>
  <default>FOLLOW_FUSED_STATE</default>
</attribute>
<!-- ********************************************************************** -->
<attribute>
  <id>ATTR_CORE_LPAR_MODE</id>
  <targetType>TARGET_TYPE_SYSTEM</targetType>
  <description>
    Sets policy for core LPAR configuration
  </description>
  <valueType>uint8</valueType>
  <enum>LPAR_PER_THREAD = 0x0, LPAR_PER_CORE = 0x1</enum>
  <writeable/>
  <initToZero/>
</attribute>
<!-- ********************************************************************** -->
</attributes>
